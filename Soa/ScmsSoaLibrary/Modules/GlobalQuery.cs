using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ScmsSoaLibrary.Commons;
using ScmsModel.Core;
using ScmsModel;
using Ext.Net;
using System.Globalization;
using System.Data.Linq.SqlClient;
using ScmsSoaLibraryInterface.Commons;

namespace ScmsSoaLibrary.Modules
{
    partial class GlobalQuery
    {
        #region Internal

        internal class ReceiptNote
        {
            public string c_rnno { get; set; }
            public string c_iteno { get; set; }
            public string c_typern { get; set; }
            public string v_itemdesc { get; set; }
            public string c_refno { get; set; }
            public string c_batch { get; set; }
            public string c_type { get; set; }
            public string v_typedesc { get; set; }
            public decimal? n_gqty { get; set; }
            public decimal? n_bqty { get; set; }
            public DateTime d_batchexpiredDate { get; set; }
            public DateTime d_batchexpired { get; set; }
        }

        internal class ReceiptNoteKhusus
        {
            public string c_rnno { get; set; }
            public string c_iteno { get; set; }
            public string c_typern { get; set; }
            public string v_itemdesc { get; set; }
            public string c_refno { get; set; }
            public string c_batch { get; set; }
            public string c_type { get; set; }
            public string v_typedesc { get; set; }
            public decimal? n_gqty { get; set; }
            public decimal? n_bqty { get; set; }
            public DateTime d_batchexpiredDate { get; set; }
            public string d_batchexpired { get; set; }
        }

        internal class MsExpEst
        {
            public string c_exp { get; set; }
            public string v_ket { get; set; }
            public string c_cusno { get; set; }
            public string v_cunam { get; set; }
            public decimal t_udara { get; set; }
            public decimal t_daratlaut { get; set; }
            public decimal t_icepack { get; set; }
            public decimal t_import { get; set; }
            public bool l_delete { get; set; }
        }

        internal class MsExpCostEst
        {
            public string c_exp { get; set; }
            public string v_ket { get; set; }
            public string c_cusno { get; set; }
            public char c_gdg { get; set; }
            public string v_gdgdesc { get; set; }
            public string v_cunam { get; set; }
            public decimal n_udara { get; set; }
            public decimal n_daratlaut { get; set; }
            public decimal n_icepack { get; set; }
            public decimal n_cdd { get; set; }
            public decimal n_fuso { get; set; }
            public decimal n_tronton { get; set; }
            public decimal n_container { get; set; }
            public decimal n_cde { get; set; }
            public decimal n_l300 { get; set; }
            public decimal n_import { get; set; }
            public decimal n_expmin { get; set; }
            public DateTime d_effective { get; set; }
            public bool l_delete { get; set; }
            public string c_typekrm { get; set; }
            public string c_typesat { get; set; }
            public string v_typekrm { get; set; }
            public string v_typesat { get; set; }
        }

        internal class SpSpg
        {
            public char? c_gdg { get; set; }
            public string c_cusno { get; set; }
            public string c_iteno { get; set; }
            public string c_spno { get; set; }
            public DateTime? d_spdate { get; set; }
            public string v_cunam { get; set; }
            public string c_sp { get; set; }
            public string c_type { get; set; }
            public decimal? n_sisa { get; set; }
            public DateTime? d_entry { get; set; }
        }

        internal class ExpedisiH
        {
            public string c_expno { get; set; }
            public DateTime d_expdate { get; set; }
            public char c_gdg { get; set; }
            public string v_gdgdesc { get; set; }
            public DateTime d_resi { get; set; }
            public TimeSpan t_resi { get; set; }
            public string v_cunam { get; set; }
            public string c_cusno { get; set; }
            public string v_ketMsek { get; set; }
            public string v_ketTran { get; set; }
            public string v_ket { get; set; }
            public string v_ketBy { get; set; }
            public string c_via { get; set; }
            public string c_type { get; set; }
            public string c_exp { get; set; }
            public string c_resi { get; set; }
            public string c_typeby { get; set; }
            public decimal n_berat { get; set; }
            public decimal n_koli { get; set; }
            public decimal n_receh { get; set; }
            public decimal n_vol { get; set; }
            public string v_by_desc { get; set; }
            public bool? l_delete { get; set; }
            public bool? l_print { get; set; }
            public string c_entry { get; set; }
            public string c_dono { get; set; }
            public string c_driver { get; set; }
            public string c_nopol { get; set; }
            public string v_exp { get; set; }
            public DateTime d_doentry { get; set; }
            public string c_ref { get; set; }
            public string v_ket_ref { get; set; }
            public string c_exptype { get; set; }
            public decimal n_biayalain { get; set; }
            public decimal n_totalbiaya { get; set; }
            public decimal n_biayakg { get; set; }
            public decimal n_expmin { get; set; }
            public bool? l_isCabang { get; set; }
            public string c_cusno2 { get; set; }
            public string v_cunam2 { get; set; }
            public string c_asal { get; set; } //penambahan direct shipment by suwandi 8 juni 2018
            public string v_asal { get; set; } //penambahan direct shipment by suwandi 9 juni 2018
        }

        internal class biayaekspedisi
        {
            public decimal n_udara { get; set; }
            public decimal n_daratlaut { get; set; }
            public decimal n_icepack { get; set; }
            public decimal n_cdd { get; set; }
            public decimal n_fuso { get; set; }
            public decimal n_tronton { get; set; }
            public decimal n_container { get; set; }
            public decimal n_cde { get; set; }
            public decimal n_l300 { get; set; }
            public decimal n_expmin { get; set; }
        }

        internal class feh
        {
            public string c_exp { get; set; }
            public string c_ieno { get; set; }
            public string c_cusno { get; set; }
            public decimal n_bilva_faktur { get; set; }
            public decimal n_top { get; set; }
            public DateTime d_top { get; set; }
            public string c_expno { get; set; }
            public string c_taxno { get; set; }
            public DateTime d_taxdate { get; set; }
            public string v_ket { get; set; }
            public decimal n_awalkm { get; set; }
            public decimal n_akhirkm { get; set; }
            public decimal n_meter { get; set; }
            public decimal n_bruto { get; set; }
            public decimal n_ppn { get; set; }
            public decimal n_disc { get; set; }
            public decimal n_net { get; set; }
            public string c_entry { get; set; }
            public DateTime d_entry { get; set; }
            public string c_update { get; set; }
            public DateTime d_update { get; set; }
            public bool? l_delete { get; set; }
        }

        internal class PoSpg
        {
            public char c_gdg { get; set; }
            public string c_pono { get; set; }
            public string c_nosup { get; set; }
            public string c_iteno { get; set; }
            public DateTime? d_podate { get; set; }
            public decimal n_sisa { get; set; }
            public bool l_import { get; set; }
        }

        internal class AverageSales
        {
            public string Customer { get; set; }
            public string Item { get; set; }
            public int Year { get; set; }
            public decimal Sales { get; set; }
            public decimal Retur { get; set; }
        }

        internal class SearchingST
        {
            public char? c_gdg { get; set; }
            public string c_no { get; set; }
            public string c_plno { get; set; }
            public string c_nodoc { get; set; }
            public string c_cusno { get; set; }
            public string v_cunam { get; set; }
            public string c_picker { get; set; }
            public string v_picker { get; set; }
            public string c_checker { get; set; }
            public string v_checker { get; set; }
            public string c_packer { get; set; }
            public string v_packer { get; set; }
            public DateTime d_entry { get; set; }
        }

        private static bool isPrincipalInfo = false;

        #endregion

        public static IDictionary<string, object> ModelGridQuery(string connectionString, int start, int limit, bool allQuery, string sort, string dir, string model, IDictionary<string, Functionals.ParameterParser> parameters)
        {
            IDictionary<string, object> dic = new Dictionary<string, object>();

            ScmsModel.ORMDataContext db = new ScmsModel.ORMDataContext(connectionString);
            //db.CommandTimeout = 1000;

            int nCount = 0;
            string paternLike = null;

            try
            {
                switch (model)
                {
                    #region MODEL_QUERY_EKSPEDISIGRID

                    case Constant.MODEL_QUERY_EKSPEDISIGRID:
                        {
                            #region Old Coded

                            //var trans = (from mstran in db.MsTransDs
                            //             where (mstran.c_notrans == "02") && (mstran.c_portal == '3')
                            //             select new
                            //             {
                            //               mstran.c_type,
                            //               mstran.v_ket
                            //             }).Distinct().AsQueryable();

                            //var byOleh = (from mstran in db.MsTransDs
                            //              where (mstran.c_notrans == "08") && (mstran.c_portal == '3')
                            //              select new
                            //              {
                            //                mstran.c_type,
                            //                mstran.v_ket
                            //              }).Distinct().AsQueryable();

                            //var qry = (from exph in db.LG_ExpHs
                            //           join msgud in db.LG_MsGudangs on exph.c_gdg equals msgud.c_gdg into gud
                            //           from msgud1 in gud.DefaultIfEmpty()
                            //           join cusmas in db.LG_Cusmas on exph.c_cusno equals cusmas.c_cusno into cus
                            //           from cusmas1 in cus.DefaultIfEmpty()
                            //           join mstran in trans on exph.c_via equals mstran.c_type into trn
                            //           from mstran1 in trn.DefaultIfEmpty()
                            //           join msexp in db.LG_MsExps on exph.c_exp equals msexp.c_exp into msex1
                            //           from ms1 in msex1.DefaultIfEmpty()
                            //           join bey in byOleh on exph.c_type equals bey.c_type into beyO
                            //           from bey in beyO.DefaultIfEmpty()
                            //           where exph.c_type == "01" && (exph.l_delete == null || exph.l_delete != true)
                            //           select new
                            //           {
                            //             c_expno = exph.c_expno,
                            //             d_expdate = exph.d_expdate,
                            //             c_gdg = exph.c_gdg,
                            //             //d_resi = (exph.d_resi.HasValue ?  exph.d_resi.Value.Date : DateTime.Now.Date),
                            //             //t_resi = (exph.d_resi.HasValue ? exph.d_resi.Value.TimeOfDay : DateTime.Now.TimeOfDay),
                            //             d_resi = exph.d_resi.Value.Date,
                            //             t_resi = exph.d_resi.Value.TimeOfDay,
                            //             v_gdgdesc = msgud1.v_gdgdesc,
                            //             v_cunam = cusmas1.v_cunam,
                            //             c_cusno = exph.c_cusno,
                            //             v_ketMsek = ms1.v_ket,
                            //             v_ketTran = mstran1.v_ket,
                            //             v_ketBy = bey.v_ket,
                            //             c_via = exph.c_via,
                            //             v_ket = exph.v_ket,
                            //             c_type = exph.c_type,
                            //             c_exp = exph.c_exp,
                            //             c_resi = exph.c_resi,
                            //             c_typeby = exph.c_by,
                            //             n_berat = exph.n_berat,
                            //             n_koli = exph.n_koli,
                            //             v_by_desc = bey.v_ket
                            //           }).Distinct().AsQueryable();

                            #endregion

                            string resi = (parameters.ContainsKey("c_resi") ? (string)((Functionals.ParameterParser)parameters["c_resi"]).Value : string.Empty);


                            var qry1 = (from q in db.LG_ExpHs
                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg
                                       join q2 in db.LG_Cusmas on q.c_cusno equals q2.c_cusno
                                       join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "16", q.c_via } equals new { q3.c_portal, q3.c_notrans, c_via = q3.c_type }
                                       join q4 in db.MsTransDs on new { c_portal = '3', c_notrans = "08", q.c_by } equals new { q4.c_portal, q4.c_notrans, c_by = q4.c_type }
                                       join q5 in db.LG_MsExps on q.c_exp equals q5.c_exp into q_5
                                       join q6 in db.MsTransDs on new { c_portal = '9', c_notrans = "005", q.c_exptype } equals new { q6.c_portal, q6.c_notrans, c_exptype = q6.c_type }
                                       from qExp in q_5.DefaultIfEmpty() 
                                       join q7 in db.LG_CusmasCabs on q.c_asal equals q7.c_cusno into q_7
                                       from qExp2 in q_7.DefaultIfEmpty()
                                       where (q.c_type == "01") &&
                                       (resi.Length > 0 ? q.c_resi.Contains(resi) : true)
                                       select new ExpedisiH()
                                       {
                                           c_expno = q.c_expno,
                                           d_expdate = (q.d_expdate.HasValue ? q.d_expdate.Value : Functionals.StandardSqlDateTime),
                                           c_gdg = (q.c_gdg.HasValue ? q.c_gdg.Value : char.MinValue),
                                           d_resi = (q.d_resi.HasValue ? q.d_resi.Value : Functionals.StandardSqlDateTime),
                                           //t_resi = q.d_resi.Value.TimeOfDay,
                                           v_gdgdesc = q1.v_gdgdesc,
                                           v_cunam = q2.v_cunam,
                                           c_cusno = q.c_cusno,
                                            v_ketMsek = qExp.v_ket,
                                           v_ketTran = q3.v_ket,
                                           v_ketBy = q4.v_ket,
                                           c_via = q.c_via,
                                           v_ket = q.v_ket,
                                           c_type = q.c_type,
                                           c_exp = q.c_exp,
                                           c_resi = (q.c_resi == null ? string.Empty : q.c_resi.Trim()),
                                           c_typeby = q.c_by,
                                           n_berat = (q.n_berat.HasValue ? q.n_berat.Value : 0),
                                           n_koli = (q.n_koli.HasValue ? q.n_koli.Value : 0),
                                           n_receh = (q.n_receh.HasValue ? q.n_receh.Value : 0),
                                           n_vol = (q.n_vol.HasValue ? q.n_vol.Value : 0),
                                           v_by_desc = q4.v_ket,
                                           l_delete = q.l_delete,
                                           l_print = q.l_print,
                                           c_entry = q.c_entry,
                                           c_driver = q.c_driver,
                                           c_nopol = q.c_nopol,
                                           v_exp = q.v_exp,
                                           c_ref = q.c_ref,
                                           v_ket_ref = q6.v_ket,
                                           c_exptype = q.c_exptype,
                                           n_biayalain = (q.n_biayalain.HasValue ? q.n_biayalain.Value : 0),
                                           n_totalbiaya = (q.n_totalbiaya.HasValue ? q.n_totalbiaya.Value : 0),
                                           n_biayakg = (q.n_biayakg.HasValue ? q.n_biayakg.Value : 0),
                                           n_expmin = (q.n_expmin.HasValue ? q.n_expmin.Value : 0),
                                           c_asal = q.c_asal,
                                           v_asal = qExp2.v_cunam
                                       }).AsQueryable();


                            var qry2 = (from q in db.LG_ExpHs
                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg
                                       join q2 in db.LG_MsGudangs on q.c_cusno equals q2.c_gdg.ToString()
                                       join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "16", q.c_via } equals new { q3.c_portal, q3.c_notrans, c_via = q3.c_type }
                                       join q4 in db.MsTransDs on new { c_portal = '3', c_notrans = "08", q.c_by } equals new { q4.c_portal, q4.c_notrans, c_by = q4.c_type }
                                       join q5 in db.LG_MsExps on q.c_exp equals q5.c_exp into q_5
                                       join q6 in db.MsTransDs on new { c_portal = '9', c_notrans = "005", q.c_exptype } equals new { q6.c_portal, q6.c_notrans, c_exptype = q6.c_type }
                                       from qExp in q_5.DefaultIfEmpty()
                                       join q7 in db.LG_CusmasCabs on q.c_asal equals q7.c_cusno into q_7
                                       from qExp2 in q_7.DefaultIfEmpty()
                                       where (q.c_type == "01") &&
                                       (resi.Length > 0 ? q.c_resi.Contains(resi) : true)
                                       select new ExpedisiH()
                                       {
                                           c_expno = q.c_expno,
                                           d_expdate = (q.d_expdate.HasValue ? q.d_expdate.Value : Functionals.StandardSqlDateTime),
                                           c_gdg = (q.c_gdg.HasValue ? q.c_gdg.Value : char.MinValue),
                                           d_resi = (q.d_resi.HasValue ? q.d_resi.Value : Functionals.StandardSqlDateTime),
                                           //t_resi = q.d_resi.Value.TimeOfDay,
                                           v_gdgdesc = q1.v_gdgdesc,
                                           v_cunam = q2.v_gdgdesc,
                                           c_cusno = q.c_cusno,
                                           v_ketMsek = qExp.v_ket,
                                           v_ketTran = q3.v_ket,
                                           v_ketBy = q4.v_ket,
                                           c_via = q.c_via,
                                           v_ket = q.v_ket,
                                           c_type = q.c_type,
                                           c_exp = q.c_exp,
                                           c_resi = (q.c_resi == null ? string.Empty : q.c_resi.Trim()),
                                           c_typeby = q.c_by,
                                           n_berat = (q.n_berat.HasValue ? q.n_berat.Value : 0),
                                           n_koli = (q.n_koli.HasValue ? q.n_koli.Value : 0),
                                           n_receh = (q.n_receh.HasValue ? q.n_receh.Value : 0),
                                           n_vol = (q.n_vol.HasValue ? q.n_vol.Value : 0),
                                           v_by_desc = q4.v_ket,
                                           l_delete = q.l_delete,
                                           l_print = q.l_print,
                                           c_entry = q.c_entry,
                                           c_driver = q.c_driver,
                                           c_nopol = q.c_nopol,
                                           v_exp = q.v_exp,
                                           c_ref = q.c_ref,
                                           v_ket_ref = q6.v_ket,
                                           c_exptype = q.c_exptype,
                                           n_biayalain = (q.n_biayalain.HasValue ? q.n_biayalain.Value : 0),
                                           n_totalbiaya = (q.n_totalbiaya.HasValue ? q.n_totalbiaya.Value : 0),
                                           n_biayakg = (q.n_biayakg.HasValue ? q.n_biayakg.Value : 0),
                                           n_expmin = (q.n_expmin.HasValue ? q.n_expmin.Value : 0),
                                           c_asal = q.c_asal,
                                           v_asal = qExp2.v_cunam
                                       }).AsQueryable();

                            var qry = qry1.Union(qry2);
                             
                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }

                        break;

                    #endregion

                    #region MODEL_QUERY_EKSPEDISI_DOSJ_Pending

                    case Constant.MODEL_QUERY_EKSPEDISI_DOSJ_Pending:
                        {
                            var qry = (from q in db.LG_ExpErrs
                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg
                                       select new ExpedisiH()
                                       {
                                           c_gdg = (q.c_gdg.HasValue ? q.c_gdg.Value : char.MinValue),
                                           c_expno = q.c_expno,
                                           d_resi = (q.d_resi.HasValue ? q.d_resi.Value : Functionals.StandardSqlDateTime),
                                           v_gdgdesc = q1.v_gdgdesc,
                                           c_dono = q.c_dono,
                                           d_doentry = (q.d_doentry.HasValue ? q.d_doentry.Value : Functionals.StandardSqlDateTime)
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }

                        break;

                    #endregion

                    #region MODEL_QUERY_EKSPEDISIGRID_DETAIL

                    case Constant.MODEL_QUERY_EKSPEDISIGRID_DETAIL:
                        {
                            var qry = (from exph in db.LG_ExpDs
                                       select new
                                       {
                                           exph.c_expno,
                                           exph.c_dono,
                                           exph.c_nopart,
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_EKSPEDISIGRID_DETAIL_EXT

                    case Constant.MODEL_QUERY_EKSPEDISIGRID_DETAIL_EXT:
                        {
                            var qry = (from exph in db.LG_ExpD2s
                                       select new
                                       {
                                           exph.c_expno,
                                           exph.n_koli,
                                           n_receh = exph.n_receh.HasValue ? exph.n_receh : 0,
                                           exph.n_vol,
                                           exph.c_nopart,
                                           n_berat = exph.n_berat.HasValue ? exph.n_berat.Value : 0,
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_EKSPEDISIGRID_GUDANG

                    case Constant.MODEL_QUERY_EKSPEDISIGRID_GUDANG:
                        {
                            //string tipe = (parameters.ContainsKey("tipe") ? (string)((Functionals.ParameterParser)parameters["tipe"]).Value : string.Empty);
                            string resi = (parameters.ContainsKey("c_resi") ? (string)((Functionals.ParameterParser)parameters["c_resi"]).Value : string.Empty);

                            var qry = (from q in db.LG_ExpHs
                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg
                                       //Indra 20170802
                                       join q2 in db.LG_MsGudangs on new { q.c_cusno } equals new { c_cusno = q2.c_gdg.ToString() }
                                       join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "16", q.c_via } equals new { q3.c_portal, q3.c_notrans, c_via = q3.c_type }
                                       join q4 in db.MsTransDs on new { c_portal = '3', c_notrans = "08", q.c_by } equals new { q4.c_portal, q4.c_notrans, c_by = q4.c_type }
                                       join q5 in db.LG_MsExps on q.c_exp equals q5.c_exp into q_5
                                       from qExp in q_5.DefaultIfEmpty()
                                       join q6 in db.LG_Cusmas on q.c_cusno2 equals q6.c_cusno into q_6
                                       from qExp2 in q_6.DefaultIfEmpty()
                                       where (q.c_type == "02") &&
                                       (resi.Length > 0 ? q.c_resi.Contains(resi) : true)
                                       select new ExpedisiH()
                                       {
                                           c_expno = q.c_expno,
                                           d_expdate = (q.d_expdate.HasValue ? q.d_expdate.Value : Functionals.StandardSqlDateTime),
                                           c_gdg = (q.c_gdg.HasValue ? q.c_gdg.Value : char.MinValue),
                                           d_resi = (q.d_resi.HasValue ? q.d_resi.Value : Functionals.StandardSqlDateTime),
                                           //t_resi = q.d_resi.Value.TimeOfDay,
                                           v_gdgdesc = q1.v_gdgdesc,
                                           //Indra 20170802
                                           v_cunam = q2.v_gdgdesc,
                                           //v_cunam = q1.v_gdgdesc,
                                           c_cusno = q.c_cusno,
                                           v_ketMsek = qExp.v_ket,
                                           v_ketTran = q3.v_ket,
                                           v_ketBy = q4.v_ket,
                                           c_via = q.c_via,
                                           v_ket = q.v_ket,
                                           c_type = q.c_type,
                                           c_exp = q.c_exp,
                                           c_resi = (q.c_resi == null ? string.Empty : q.c_resi.Trim()),
                                           c_typeby = q.c_by,
                                           n_berat = (q.n_berat.HasValue ? q.n_berat.Value : 0),
                                           n_koli = (q.n_koli.HasValue ? q.n_koli.Value : 0),
                                           n_receh = (q.n_receh.HasValue ? q.n_receh.Value : 0),
                                           n_vol = (q.n_vol.HasValue ? q.n_vol.Value : 0),
                                           v_by_desc = q4.v_ket,
                                           l_delete = q.l_delete,
                                           c_entry = q.c_entry,
                                           c_driver = q.c_driver,
                                           c_nopol = q.c_nopol,
                                           v_exp = q.v_exp,
                                           l_print = q.l_print,
                                           c_exptype = q.c_exptype,
                                           n_biayalain = (q.n_biayalain.HasValue ? q.n_biayalain.Value : 0),
                                           n_totalbiaya = (q.n_totalbiaya.HasValue ? q.n_totalbiaya.Value : 0),
                                           n_biayakg = (q.n_biayakg.HasValue ? q.n_biayakg.Value : 0),
                                           n_expmin = (q.n_expmin.HasValue ? q.n_expmin.Value : 0),
                                           l_isCabang = q.l_iscab,
                                           c_cusno2 = q.c_cusno2,
                                           v_cunam2 = qExp2.v_cunam,
                                           c_ref = q.c_ref
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }

                        break;

                    #endregion

                    #region MODEL_QUERY_EKSPEDISIGRID_GUDANG_DETAIL

                    case Constant.MODEL_QUERY_EKSPEDISIGRID_GUDANG_DETAIL:
                        {

                            var qry = (from exph in db.LG_ExpDs
                                       select new
                                       {
                                           exph.c_expno,
                                           exph.c_dono
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }

                        break;

                    #endregion

                    #region MODEL_QUERY_EKSPEDISIGRID_RS

                    case Constant.MODEL_QUERY_EKSPEDISIGRID_RS:
                        {
                            //string tipe = (parameters.ContainsKey("tipe") ? (string)((Functionals.ParameterParser)parameters["tipe"]).Value : string.Empty);
                            string resi = (parameters.ContainsKey("c_resi") ? (string)((Functionals.ParameterParser)parameters["c_resi"]).Value : string.Empty);

                            var qry = (from q in db.LG_ExpHs
                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg
                                       join q2 in db.LG_Cusmas on q.c_cusno equals q2.c_cusno
                                       join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "16", q.c_via } equals new { q3.c_portal, q3.c_notrans, c_via = q3.c_type }
                                       join q4 in db.MsTransDs on new { c_portal = '3', c_notrans = "08", q.c_by } equals new { q4.c_portal, q4.c_notrans, c_by = q4.c_type }
                                       join q5 in db.LG_MsExps on q.c_exp equals q5.c_exp into q_5
                                       join q6 in db.MsTransDs on new { c_portal = '9', c_notrans = "005", q.c_exptype } equals new { q6.c_portal, q6.c_notrans, c_exptype = q6.c_type }
                                       from qExp in q_5.DefaultIfEmpty()
                                       join q7 in db.LG_DatSups on q.c_cusno2 equals q7.c_nosup
                                       where (q.c_type == "03") &&
                                       (resi.Length > 0 ? q.c_resi.Contains(resi) : true)
                                       select new
                                       {
                                           c_expno = q.c_expno,
                                           d_expdate = (q.d_expdate.HasValue ? q.d_expdate.Value : Functionals.StandardSqlDateTime),
                                           c_gdg = (q.c_gdg.HasValue ? q.c_gdg.Value : char.MinValue),
                                           d_resi = (q.d_resi.HasValue ? q.d_resi.Value : Functionals.StandardSqlDateTime),
                                           //t_resi = q.d_resi.Value.TimeOfDay,
                                           v_gdgdesc = q1.v_gdgdesc,
                                           v_cunam = q2.v_cunam,
                                           c_cusno = q.c_cusno,
                                           v_ketMsek = qExp.v_ket,
                                           v_ketTran = q3.v_ket,
                                           v_ketBy = q4.v_ket,
                                           c_via = q.c_via,
                                           v_ket = q.v_ket,
                                           c_type = q.c_type,
                                           c_exp = q.c_exp,
                                           c_resi = (q.c_resi == null ? string.Empty : q.c_resi.Trim()),
                                           c_typeby = q.c_by,
                                           n_berat = (q.n_berat.HasValue ? q.n_berat.Value : 0),
                                           n_koli = (q.n_koli.HasValue ? q.n_koli.Value : 0),
                                           n_vol = (q.n_vol.HasValue ? q.n_vol.Value : 0),
                                           v_by_desc = q4.v_ket,
                                           l_delete = q.l_delete,
                                           l_print = q.l_print,
                                           c_entry = q.c_entry,
                                           c_driver = q.c_driver,
                                           c_nopol = q.c_nopol,
                                           v_exp = q.v_exp,
                                           c_ref = q.c_ref,
                                           v_ket_ref = q6.v_ket,
                                           c_exptype = q.c_exptype,
                                           n_biayalain = (q.n_biayalain.HasValue ? q.n_biayalain.Value : 0),
                                           n_totalbiaya = (q.n_totalbiaya.HasValue ? q.n_totalbiaya.Value : 0),
                                           n_biayakg = (q.n_biayakg.HasValue ? q.n_biayakg.Value : 0),
                                           n_expmin = (q.n_expmin.HasValue ? q.n_expmin.Value : 0),
                                           c_cusno2 = q.c_cusno2,
                                           v_nama = q7.v_nama
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }

                        break;

                    #endregion

                    #region MODEL_QUERY_STT

                    case Constant.MODEL_QUERY_STT:
                        {
                            //string c_typeDS = (parameters.ContainsKey("c_type") ? (string)((Functionals.ParameterParser)parameters["c_type"]).Value : string.Empty);

                            //var trans = (from q in db.MsTransDs
                            //             where q.c_portal == '3' && q.c_notrans == "46"
                            //             select q).Distinct().AsQueryable();

                            var qry = (from q in db.LG_STHs
                                       join q2 in db.MK_MTHs on new { q.c_gdg, q.c_mtno } equals new { q2.c_gdg, q2.c_mtno } into q_2
                                       from qMT in q_2.DefaultIfEmpty()
                                       //join tip in trans on q.c_type equals tip.c_type
                                       join tip in db.MsTransDs on new { c_portal = '3', c_notrans = "46", q.c_type } equals new { tip.c_portal, tip.c_notrans, tip.c_type }
                                       join gud in db.LG_MsGudangs on q.c_gdg equals gud.c_gdg
                                       //where q.c_type == c_typeDS
                                       select new
                                       {
                                           q.c_gdg,
                                           q.c_stno,
                                           q.d_stdate,
                                           gud.v_gdgdesc,
                                           ket_ds = tip.v_ket,
                                           q.c_mtno,
                                           qMT.c_memo,
                                           c_type = q.c_type == null ? "" : q.c_type,
                                           q.v_ket,
                                           q.l_delete
                                       }).Distinct().AsQueryable();


                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);

                        }
                        break;
                    #endregion

                    #region MODEL_QUERY_STT_DETAIL

                    case Constant.MODEL_QUERY_STT_DETAIL:
                        {
                            //string c_stno = (parameters.ContainsKey("c_stno") ? (string)((Functionals.ParameterParser)parameters["c_stno"]).Value : string.Empty);

                            var qry = (from q1 in db.LG_STD1s
                                       join q2 in db.LG_MsGudangs on q1.c_gdg equals q2.c_gdg
                                       join q3 in db.FA_MasItms on q1.c_iteno equals q3.c_iteno
                                       //where q.c_stno == c_stno
                                       select new
                                       {
                                           q1.c_stno,
                                           q1.c_gdg,
                                           q1.c_iteno,
                                           q1.c_batch,
                                           n_gqty = q1.n_qty,
                                           q2.v_gdgdesc,
                                           q3.v_itnam
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;
                    #endregion

                    #region MODEL_QUERY_SPOUTSTAND

                    case Constant.MODEL_QUERY_SPOUTSTAND: //suwandi 22 okt 2018
                        {
                            var qry = (from q in db.LG_SPHs
                                       join q1 in db.LG_SPD1s on q.c_spno equals q1.c_spno
                                       join q2 in db.LG_CusmasCabs on q.c_cusno equals q2.c_cusno
                                       where q1.n_sisa > 0 && SqlMethods.DateDiffMonth(q.d_etasp, DateTime.Now) < 2
                                       group q1 by new {q1.c_iteno,q2.c_cab_dcore} into g
                                       select new 
                                       { 
                                            c_iteno = g.Key.c_iteno,
                                            c_cab_dcore = g.Key.c_cab_dcore,
                                            n_sisa = g.Sum(x => x.n_sisa)
                                       });

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);

                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_SPOUTSTAND_DETAIL

                    case Constant.MODEL_QUERY_SPOUTSTAND_DETAIL: //suwandi 07 Nov 2018
                        {
                            var qry = (from q in db.LG_SPHs
                                       join q1 in db.LG_SPD1s on q.c_spno equals q1.c_spno
                                       join q2 in db.LG_CusmasCabs on q.c_cusno equals q2.c_cusno
                                       where q1.n_sisa > 0 && SqlMethods.DateDiffMonth(q.d_etasp, DateTime.Now) < 2
                                       group q1 by new { q1.c_iteno, q2.c_cab_dcore, q1.c_spno, q.c_sp, q.d_etasp, q.d_spdate } into g
                                       select new
                                       {
                                           c_spno = g.Key.c_spno,
                                           c_sp = g.Key.c_sp,
                                           d_spdate = g.Key.d_spdate.ToString(),
                                           d_etasp = g.Key.d_etasp,
                                           c_iteno = g.Key.c_iteno,
                                           c_cab_dcore = g.Key.c_cab_dcore,
                                           n_sisa = g.Sum(x => x.n_sisa)
                                       });

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);

                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_SPOUTSTAND_PER_REGION

                    case Constant.MODEL_QUERY_SPOUTSTAND_PER_REGION: //suwandi 07 Nov 2018
                        {
                            var qry = (from q in db.LG_SPHs
                                       join q1 in db.LG_SPD1s on q.c_spno equals q1.c_spno
                                       join q2 in db.LG_CusmasCabs on q.c_cusno equals q2.c_cusno
                                       join q3 in db.lg_relo_cabs on q2.c_cab_dcore equals q3.TUJUAN
                                       where q1.n_sisa > 0 && SqlMethods.DateDiffMonth(q.d_etasp, DateTime.Now) < 2
                                       group q1 by new { q1.c_iteno, q3.KODECAB } into g
                                       select new
                                       {
                                           c_iteno = g.Key.c_iteno,
                                           pengirim = g.Key.KODECAB,
                                           n_sisa = g.Sum(x => x.n_sisa)
                                       });

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);

                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_SURATPESANANGRID

                    case Constant.MODEL_QUERY_SURATPESANANGRID:
                        {
                            var dateAndTime = DateTime.Now;
                            var dateonly = dateAndTime.Date;

                            var sqQry = (from sq in db.LG_SPD1s
                                         group sq by sq.c_spno into g
                                         select new
                                         {
                                             totalSisa = g.Sum(x => x.n_sisa),
                                             totalAcc = g.Sum(x => x.n_acc),
                                             c_spno = g.Key,
                                             nCount = g.Count()
                                         });

                            var sqPld = (from pl in db.LG_PLHs
                                         join pd in db.LG_PLD1s on pl.c_plno equals pd.c_plno
                                         where SqlMethods.DateDiffMonth(pl.d_pldate, dateonly) < 2
                                         select new
                                         {
                                             pl.d_update,
                                             pd.c_spno
                                         });
                            var PlGrup = (from pg in sqPld
                                          group pg by pg.c_spno into g
                                          select new
                                          {
                                              update = g.Max(x => x.d_update),
                                              c_spno = g.Key
                                          });

                            var qry = (
                                //from q in db.lg_vwSPHs
                                from q in db.LG_SPHs
                                join q1 in sqQry on q.c_spno equals q1.c_spno into q_1
                                from qSPD in q_1.DefaultIfEmpty()
                                join q2 in db.LG_Cusmas on q.c_cusno equals q2.c_cusno
                                join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "47", q.c_type } equals new { q3.c_portal, q3.c_notrans, q3.c_type }
                                join q4 in PlGrup on q.c_spno equals q4.c_spno into q_2
                                from qPL in q_2.DefaultIfEmpty()
                                //where SqlMethods.DateDiffMonth(q.d_etasp, DateTime.Now) < 2 && (qSPD.nCount > 0 || qSPD.nCount != null || qSPD.totalSisa != null || qSPD.totalAcc != null) || q.d_etasp == null
                                where SqlMethods.DateDiffMonth(q.d_etasp, dateonly) < 12 && (qSPD.nCount > 0 || qSPD.nCount != null || qSPD.totalSisa != null || qSPD.totalAcc != null) || q.d_etasp == null 
                                select new
                                {
                                    q.c_cusno,
                                    q.c_sp,
                                    q.c_spno,
                                    q.c_type,
                                    d_spinsert = q.d_entry,
                                    q.d_spdate,
                                    q.l_cek,
                                    q.l_print,
                                    q.v_ket,
                                    q.l_delete,
                                    q2.v_cunam,
                                    v_type_desc = q3.v_ket,
                                    //spComplete = ((qSPD != null) && (qSPD.nCount > 0) ? (qSPD.totalSisa > 0 ? false : true) : false),
                                    //spPartial = ((qSPD != null) && (qSPD.nCount > 0) ? (qSPD.totalSisa != qSPD.totalAcc ? false : true) : false),
                                    spComplete = qSPD.totalSisa == 0 && qSPD.totalAcc != 0 ? true : false,
                                    spPartial = qSPD.totalSisa != qSPD.totalAcc && qSPD.totalSisa != 0 ? true : false,
                                    d_etasp = (q.d_etasp.HasValue ? q.d_etasp : DateTime.Now),
                                    d_etdsp = (q.d_etdsp.HasValue ? q.d_etdsp : DateTime.Now),
                                    //diffdate = SqlMethods.DateDiffDay(q.d_etasp,DateTime.Now)
                                    diffdate = (qSPD.totalSisa == 0 && Convert.ToDateTime(qPL.update).Date <= q.d_etasp ? "ND" : 
                                               (qSPD.totalSisa == 0 && Convert.ToDateTime(qPL.update).Date > q.d_etasp ? "+" + Convert.ToString(SqlMethods.DateDiffDay(q.d_etasp,qPL.update)) : 
                                                dateonly <= q.d_etasp ? "ND" : "+" + Convert.ToString(SqlMethods.DateDiffDay(q.d_etasp,dateonly))))
                                    
                                }).AsQueryable();
                            //var qry = (from q in db.LG_SPHs
                            //       join q2 in db.LG_Cusmas on q.c_cusno equals q2.c_cusno
                            //       join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "47", q.c_type } equals new { q3.c_portal, q3.c_notrans, q3.c_type }
                            //       where SqlMethods.DateDiffYear(q.d_spdate, DateTime.Now) <= 2
                            //       select new { 
                            //        q.c_cusno,
                            //        q.c_sp,
                            //        q.c_spno,
                            //        q.c_type,
                            //        d_spinsert = q.d_entry,
                            //        q.d_spdate,
                            //        q.l_cek,
                            //       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_SURATPESANANGRID_DETAIL

                    case Constant.MODEL_QUERY_SURATPESANANGRID_DETAIL:
                        {
                            string spNo = (parameters.ContainsKey("spno") ? (string)((Functionals.ParameterParser)parameters["spno"]).Value : string.Empty);

                            var qrySph = (from q in db.LG_SPHs
                                          where q.c_spno == spNo
                                          select new { q.c_cusno, q.d_entry }).SingleOrDefault();

                            if (qrySph != null)
                            {
                                DateTime date = (qrySph.d_entry.HasValue ? qrySph.d_entry.Value : new DateTime(1970, 1, 1));
                                DateTime datePrev = date.AddMonths(-1);
                                string custNo = qrySph.c_cusno;

                                var qry1 = (from sq in db.LG_SPHs
                                            join sq1 in db.LG_SPD1s on sq.c_spno equals sq1.c_spno
                                            where sq.c_cusno == custNo && sq.d_entry.Value.Month == date.Month && sq.d_entry.Value.Year == date.Year &&
                                              ((sq.l_delete.HasValue ? sq.l_delete : false) == false)
                                            group sq1 by sq1.c_iteno into g
                                            select new
                                            {
                                                c_iteno = g.Key,
                                                n_accTotal = g.Sum(x => x.n_acc)
                                            });

                                var qry2 = (from sq in db.LG_SPHs
                                            join sq1 in db.LG_SPD1s on sq.c_spno equals sq1.c_spno
                                            where sq.c_cusno == custNo && sq.d_entry.Value.Year == date.Year && sq.d_entry.Value.Month == date.Month
                                            group sq1 by sq1.c_iteno into g
                                            select new
                                            {
                                                c_iteno = g.Key,
                                                n_totalAcc = g.Sum(x => x.n_acc)
                                            });

                                //var qry3 = (from sq in ViewAverageSales(db, custNo, datePrev)
                                //            select new
                                //            {
                                //              sq.c_iteno,
                                //              n_avgSales = ((sq.n_sales.HasValue ? sq.n_sales.Value : 0) - (sq.n_retur.HasValue ? sq.n_retur.Value : 0))
                                //            });

                                var qry = (from q in db.LG_SPD1s
                                           join q1 in db.FA_MasItms on q.c_iteno equals q1.c_iteno into q_1
                                           from qItm in q_1.DefaultIfEmpty()
                                           join q2 in
                                               (from sq in db.MsTransDs
                                                where sq.c_portal == '3' && sq.c_notrans == "06"
                                                select sq) on q.c_type equals q2.c_type into q_2
                                           from qMtD in q_2.DefaultIfEmpty()
                                           join q3 in qry2 on q.c_iteno equals q3.c_iteno into q_3
                                           from qTACC in q_3.DefaultIfEmpty()
                                           join q4 in ViewAverageSales(db, custNo, datePrev) on q.c_iteno equals q4.Item into q_4
                                           from qAVGS in q_4.DefaultIfEmpty()
                                           select new
                                           {
                                               q.c_iteno,
                                               q.c_spno,
                                               q.c_type,
                                               n_QtyApprove = q.n_acc,
                                               n_QtyRequest = q.n_qty,
                                               q.n_salpri,
                                               q.n_sisa,
                                               v_keterangan = q.v_ket,
                                               v_itemdesc = qItm.v_itnam,
                                               v_type_desc = qMtD.v_ket,
                                               n_totalAcc = (qTACC == null ? 0 : qTACC.n_totalAcc),
                                               n_avgSales = (qAVGS == null ? 0 : (qAVGS.Sales - qAVGS.Retur))
                                           }).Where(x => x.c_spno == spNo);

                                if ((parameters != null) && (parameters.Count > 0))
                                {


                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }

                                Logger.WriteLine(qry.Provider.ToString());

                                nCount = qry.Count();

                                if (nCount > 0)
                                {
                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }

                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                    }
                                }

                                dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                            }
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_SURATPESANANMANUALGRID

                    case Constant.MODEL_QUERY_SURATPESANANMANUALGRID:
                        {
                            var qry = (from q in db.vw_spkhusus
                                       join q1 in db.vw_pendingsp_bysps on new { q.c_iteno, q.c_cusno } equals new { q1.c_iteno, q1.c_cusno } into q_1
                                       from qSPP in q_1.DefaultIfEmpty()
                                       join q2 in db.vw_pendingsp_bypls on new { q.c_iteno, q.c_cusno } equals new { q2.c_iteno, q2.c_cusno } into q_2
                                       from qSPL in q_2.DefaultIfEmpty()
                                       select new
                                       {
                                           q.c_cusno,
                                           q.v_cunam,
                                           q.c_spno,
                                           q.c_type,
                                           q.d_spdate,
                                           q.tahun,
                                           q.bulan,
                                           q.c_iteno,
                                           q.v_itnam,
                                           q.n_qty,
                                           q.n_acc,
                                           q.n_sisa,
                                           q.v_ket,
                                           q.n_qoh,
                                           q.n_avg,
                                           q.n_sales,
                                           q.v_jenisSP,
                                           n_spp = qSPP.n_sp,
                                           n_spl = qSPL.n_sp
                                           //l_accepted = (q.c_type == "02" ? true : false),
                                           //l_declined = (q.c_type == "03" ? true : false),
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion


                    // Hafizh Pharmanet Detail 

                    #region MODEL_QUERY_PROSESPHARMANETGRID_DETAIL

                    case Constant.MODEL_QUERY_PROSESPHARMANETGRID_DETAIL:
                        {
                            //string[] listNoSupl = (parameters.ContainsKey("noSup") ? (string[])((Functionals.ParameterParser)parameters["noSup"]).Value : new string[0]);

                            //string spNo = (parameters.ContainsKey("spno") ? (string)((Functionals.ParameterParser)parameters["spno"]).Value : string.Empty);

                            string outlet = (parameters.ContainsKey("c_po_outlet") ? (string)((Functionals.ParameterParser)parameters["c_po_outlet"]).Value : string.Empty);


                             var qry = (from q in db.vwLGDOPD_PROSEs
                                       //where q.c_po_outlet == outlet
                                       select new
                                       {
                                           q.c_iteno,
                                           q.c_itenopri,
                                           q.v_itnam,
                                           q.v_undes,
                                           q.c_batch,
                                           q.d_expired,
                                           q.n_qty,
                                           q.n_dprion,
                                           q.n_dprioff,
                                           q.c_po_outlet,
                                           q.c_plphar,
                                           q.Proses,
                                           q.v_ket,
                                           q.n_qtyterima,
                                           q.nv_batchterima,
                                       //}).AsQueryable();
                                       }).Where(x => x.c_po_outlet == outlet);

                            var ssss = qry.ToList();

                           
                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                           
                        }
                        break;

                    #endregion

                    // hafizh pharmanet

                    #region MODEL_QUERY_PROSESPHARMANETGRID

                    case Constant.MODEL_QUERY_PROSESPHARMANETGRID:
                        {

                            //string[] listNoSupl = (parameters.ContainsKey("c_cusno") ? (string[])((Functionals.ParameterParser)parameters["c_cusno"]).Value : new string[0]);
                            
                            
                            var qry = (from q in db.vwLGDOPHs
                                       //where (listNoSupl.Length == 0 ? true : listNoSupl.Contains(q.c_cusno))
                                       //where q.Status == "10" && q.Status == "20" && q.Status == "30" && q.Status == "40"
                                       //where q.c_dono == "N126H15625"
                                       //where q.c_cusno == "0116"
                                       select new
                                       {
                                           q.IDX,
                                           q.c_nosup,
                                           q.v_nama,
                                           q.c_dono,
                                           q.c_dono_detail,
                                           q.d_dodate,
                                           q.c_po_outlet,
                                           q.c_plphar,
                                           q.c_cusno,
                                           q.v_cunam,
                                           q.c_type,
                                           q.Status,
                                           q.v_ket,
                                           q.v_status,
                                           q.c_spphar                                                                                     
                                       }).AsQueryable();

                            //var ttt = qry.ToList();
                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region Order Request

                    #region MODEL_QUERY_ORDERREQUESTPRINCIPALGRID

                    case Constant.MODEL_QUERY_ORDERREQUESTPRINCIPALGRID:
                        {
                            char gdg = (parameters.ContainsKey("gudang") ? Convert.ToChar(((Functionals.ParameterParser)parameters["gudang"]).Value) : char.MinValue);

                            var qry = (from q in db.LG_ORHs
                                       join q1 in db.LG_DatSups on q.c_nosup equals q1.c_nosup
                                       join q2 in
                                           (from sq in db.MsTransDs
                                            where sq.c_portal == '3' && sq.c_notrans == "04"
                                            select sq) on q.c_type equals q2.c_type
                                       join q3 in db.LG_POD2s on new { q.c_gdg, q.c_orno } equals new { q3.c_gdg, q3.c_orno } into q_3
                                       from qPOD2 in q_3.DefaultIfEmpty()
                                       where (q.c_gdg == gdg)
                                       select new
                                       {
                                           //q.c_entry,
                                           q.c_gdg,
                                           q.c_nosup,
                                           q.c_orno,
                                           q.c_type,
                                           //q.c_update,
                                           //q.d_entry,
                                           q.d_ordate,
                                           //q.d_update,
                                           q.l_print,
                                           q.l_status,
                                           q.v_ket,
                                           q.l_delete,
                                           v_type_desc = q2.v_ket,
                                           q1.v_nama,
                                           c_pono = (qPOD2.c_pono == null ? string.Empty : qPOD2.c_pono),
                                           orProses = (string.IsNullOrEmpty(qPOD2.c_pono) ? false : true)
                                           //orProses = ((qPOD2.c_pono == null) || (qPOD2.c_pono.Trim().Length < 1) ? false : true)
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        if (kvp.Value.IsLike && (!kvp.Value.IsLikeOrNull))
                                        {
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_ORDERREQUESTPRINCIPALGRID_DETAIL

                    case Constant.MODEL_QUERY_ORDERREQUESTPRINCIPALGRID_DETAIL:
                        {
                            string orNo = (parameters.ContainsKey("orno") ? (string)((Functionals.ParameterParser)parameters["orno"]).Value : string.Empty);

                            var qry = (from q in db.LG_ORD1s
                                       join q1 in db.FA_MasItms on q.c_iteno equals q1.c_iteno into q_1
                                       from qItm in q_1.DefaultIfEmpty()
                                       where q.c_orno == orNo
                                       select new
                                       {
                                           q.c_iteno,
                                           n_Qty = q.n_qty,
                                           q.n_salpri,
                                           n_QtyOrd = q.n_sisa,
                                           v_itemdesc = qItm.v_itnam
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        if (kvp.Value.IsLike && (!kvp.Value.IsLikeOrNull))
                                        {
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_ORDERREQUESTGUDANGGRID

                    case Constant.MODEL_QUERY_ORDERREQUESTGUDANGGRID:
                        {
                            var sqQry = (from sq in db.LG_SPGD1s
                                         group sq by sq.c_spgno into g
                                         select new
                                         {
                                             totalSisa = g.Sum(x => x.n_sisa),
                                             totalAcc = g.Sum(x => x.n_qty),
                                             c_spgno = g.Key,
                                             nCount = g.Count()
                                         });

                            var qry = (from q in db.LG_SPGHs
                                       join q1 in sqQry on q.c_spgno equals q1.c_spgno into q_1
                                       from qSPGD in q_1.DefaultIfEmpty()
                                       join q2 in db.LG_DatSups on q.c_nosup equals q2.c_nosup
                                       join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "48", q.c_type } equals new { q3.c_portal, q3.c_notrans, q3.c_type }
                                       join q4 in db.LG_MsGudangs on q.c_gdg1 equals q4.c_gdg
                                       join q5 in db.LG_MsGudangs on q.c_gdg2 equals q5.c_gdg
                                       //Indra 20190312FM Tambah kolom ETD di Grid
                                       join q6 in db.VW_MAXETDSGs on q.c_spgno equals q6.C_SPGNO into q_6
                                       from qETD in q_6.DefaultIfEmpty()
                                       where SqlMethods.DateDiffMonth(q.d_spgdate, DateTime.Now) <= 1
                                       select new
                                       {
                                           q.c_entry, //Indra 20190414FM Tambah kolom NIP
                                           q.c_gdg1,
                                           q.c_gdg2,
                                           q.c_nosup,
                                           q.c_spgno,
                                           q.c_type,
                                           //q.c_update,
                                           //q.d_entry,
                                           q.d_spgdate,
                                           //q.d_update,
                                           q.l_print,
                                           q.l_status,
                                           q.v_ket,
                                           q.l_delete,
                                           v_type_desc = q3.v_ket,
                                           q2.v_nama,
                                           v_gudang_from = q4.v_gdgdesc,
                                           v_gudang_to = q5.v_gdgdesc,
                                           spgComplete = ((qSPGD != null) && (qSPGD.nCount > 0) ? (qSPGD.totalSisa > 0 ? false : true) : false),
                                           spgPartial = ((qSPGD != null) && (qSPGD.nCount > 0) ? (qSPGD.totalSisa != qSPGD.totalAcc) : false),
                                           q.d_sgsender,
                                           qETD.ETD //Indra 20190312FM Tambah kolom ETD di Grid
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        if (kvp.Value.IsLike && (!kvp.Value.IsLikeOrNull))
                                        {
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_ORDERREQUESTGUDANGGRID_DETAIL

                    case Constant.MODEL_QUERY_ORDERREQUESTGUDANGGRID_DETAIL:
                        {
                            string orgNo = (parameters.ContainsKey("orgno") ? (string)((Functionals.ParameterParser)parameters["orgno"]).Value : string.Empty);

                            var qry = (from q in db.LG_SPGD1s
                                       join q1 in db.FA_MasItms on q.c_iteno equals q1.c_iteno into q_1
                                       from qItm in q_1.DefaultIfEmpty()
                                       where q.c_spgno == orgNo
                                       select new
                                       {
                                           q.c_iteno,
                                           n_Qty = q.n_qty,
                                           n_QtyOrd = q.n_sisa,
                                           v_itemdesc = qItm.v_itnam
                                       });

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        if (kvp.Value.IsLike && (!kvp.Value.IsLikeOrNull))
                                        {
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #region Purchase Order

                    #region MODEL_QUERY_PURCHASEORDER

                    case Constant.MODEL_QUERY_PURCHASEORDER:
                        {
                            var qry = (from q in db.LG_POHs
                                       join q1 in db.LG_POD2s on new { q.c_gdg, q.c_pono } equals new { q1.c_gdg, q1.c_pono } into q_1
                                       from qPOD2 in q_1.DefaultIfEmpty()
                                       join q2 in db.LG_DatSups on q.c_nosup equals q2.c_nosup into q_2
                                       from qDS in q_2.DefaultIfEmpty()
                                       join q3 in db.LG_MsGudangs on q.c_gdg equals q3.c_gdg into q_3
                                       from qGdg in q_3.DefaultIfEmpty()
                                       join q4 in db.LG_ORHs on qPOD2.c_orno equals q4.c_orno into q_4
                                       from qORH in q_4.DefaultIfEmpty()
                                       join q5 in db.FA_Kurs on q.c_kurs equals q5.c_kurs into q_5
                                       from qKurs in q_5.DefaultIfEmpty()
                                       select new
                                       {
                                           q.c_gdg,
                                           q.c_kurs,
                                           q.c_nosup,
                                           q.c_pono,
                                           q.d_podate,
                                           q.l_delete,
                                           q.l_import,
                                           q.l_print,
                                           q.l_revisi,
                                           q.l_send,
                                           q.l_sent,
                                           q.n_bilva,
                                           q.n_bruto,
                                           q.n_disc,
                                           q.n_kurs,
                                           q.n_pdisc,
                                           q.n_ppn,
                                           q.n_xdisc,
                                           q.v_ket,
                                           qDS.v_nama,
                                           qGdg.v_gdgdesc,
                                           //c_orno = (qORH == null ? 
                                           //   (qPOD2 == null ? string.Empty : 
                                           //     (qPOD2.c_orno == null ? string.Empty : qPOD2.c_orno.Trim())) : 
                                           //   (qORH.c_orno == null ? string.Empty : qORH.c_orno.Trim())), //qORH.c_orno,
                                           c_orno = (qPOD2 == null ? string.Empty :
                                                (qPOD2.c_orno == null ? string.Empty : qPOD2.c_orno.Trim())),
                                           v_desc_kurs = qKurs.v_desc,
                                           isProcess = (q.l_send.HasValue ? q.l_send.Value : false) || (q.l_print.HasValue ? q.l_print.Value : false),
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_PURCHASEORDER_OUTSTAND

                    case Constant.MODEL_QUERY_PURCHASEORDER_OUTSTAND:
                        {
                            var qry = (from q in db.LG_vwPOPending_news where q.c_gdg == '1'
                                       group q by (q.c_iteno) into g
                                       select new 
                                       { 
                                        c_iteno = g.Key,
                                        n_sisa = g.Sum(x => x.n_sisa)
                                       }
                                       ).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_PURCHASEORDER_DETAIL

                    case Constant.MODEL_QUERY_PURCHASEORDER_DETAIL:
                        {
                            char gdg = (parameters.ContainsKey("gudang") ? Convert.ToChar(((Functionals.ParameterParser)parameters["gudang"]).Value) : char.MinValue);
                            string pono = (parameters.ContainsKey("pono") ? (string)((Functionals.ParameterParser)parameters["pono"]).Value : string.Empty);

                            var qry = (from q in db.LG_POD1s
                                       join q1 in db.LG_POHs on new { q.c_gdg, q.c_pono } equals new { q1.c_gdg, q1.c_pono } into q_1
                                       from qPOH in q_1.DefaultIfEmpty()
                                       join q2 in db.FA_MasItms on q.c_iteno equals q2.c_iteno into q_2
                                       from qItm in q_2.DefaultIfEmpty()
                                       where q.c_gdg == gdg && q.c_pono == pono
                                       select new
                                       {
                                           q.c_gdg,
                                           q.c_iteno,
                                           q.c_pono,
                                           q.n_disc,
                                           q.n_qty,
                                           q.n_salpri,
                                           q.n_sisa,
                                           isProcess = (qPOH.l_send.HasValue ? qPOH.l_send.Value : false) || (qPOH.l_print.HasValue ? qPOH.l_print.Value : false),
                                           v_itemdesc = qItm.v_itnam,
                                           n_total_gross = (q.n_qty * q.n_salpri),
                                           n_total_net = ((q.n_qty * q.n_salpri) - ((q.n_qty * q.n_salpri) * (q.n_disc / 100)))
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion



                    #endregion

                    #region Receive Note

                    #region Pembelian & Khusus

                    #region MODEL_QUERY_RNBELI

                    case Constant.MODEL_QUERY_RNBELI:
                        {
                            string tipe = (parameters.ContainsKey("c_typern") ? (string)((Functionals.ParameterParser)parameters["c_typern"]).Value : string.Empty);
                            bool khusus = (parameters.ContainsKey("l_typern") ? (bool)((Functionals.ParameterParser)parameters["l_typern"]).Value : false);

                            var qry = (from q in db.LG_RNHs
                                       join q1 in db.LG_DatSups on q.c_from equals q1.c_nosup 
                                       //join q1 in db.LG_DatSups on q.c_from equals q1.c_nosup into q_1
                                       //from qDS in q_1.DefaultIfEmpty()
                                       join q2 in db.LG_MsGudangs on q.c_gdg equals q2.c_gdg 
                                       //join q2 in db.LG_MsGudangs on q.c_gdg equals q2.c_gdg into q_2
                                       //from qGDG in q_2.DefaultIfEmpty()
                                       join q3 in
                                           (from sq in db.MsTransDs
                                            where sq.c_portal == '3' && sq.c_notrans == "05"
                                            select sq) on q.c_type equals q3.c_type into q_3
                                       from qMTD in q_3.DefaultIfEmpty()
                                       where (!q.c_rnno.Substring(0, 3).Equals("RNX")) &&
                                       ((q.l_rnkhusus.HasValue ? q.l_rnkhusus.Value : false) == khusus)
                                       && q.c_gdg.ToString() != "6"
                                       select new
                                       {
                                           q.c_dono,
                                           q.d_dodate,
                                           q.c_from,
                                           q.c_gdg,
                                           q.c_rnno,
                                           c_typern = q.c_type,
                                           q.d_rndate,
                                           q.l_delete,
                                           q.l_float,
                                           q.l_print,
                                           q.l_status,
                                           q.n_bea,
                                           q.v_ket,
                                           q.l_khusus,
                                           q1.v_nama,
                                           q2.v_gdgdesc,
                                           v_typedesc = qMTD.v_ket,
                                           q.c_entry,
                                           q.d_entry,
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_RNBELI_DETAIL

                    case Constant.MODEL_QUERY_RNBELI_DETAIL:
                        {
                            char gdg = (parameters.ContainsKey("gudang") ? (char)((Functionals.ParameterParser)parameters["gudang"]).Value : char.MinValue);
                            bool khusus = (parameters.ContainsKey("l_rnkhusus") ? (bool)((Functionals.ParameterParser)parameters["l_rnkhusus"]).Value : false);

                            List<ReceiptNote> lstrcp = new List<ReceiptNote>();
                            List<ReceiptNoteKhusus> lstrcpkhusus = new List<ReceiptNoteKhusus>();

                            //20170117 Indra.D
                            //Penamabahan table LG_POH, Lg_CusmasCab dan Field v_cunam
                            if (khusus)
                            {
                                var qry = (from q in db.LG_RND2s
                                           join q1 in db.LG_RNHs on new { q.c_gdg, q.c_rnno } equals new { q1.c_gdg, q1.c_rnno }
                                           join q2 in db.FA_MasItms on q.c_iteno equals q2.c_iteno
                                           join q5 in db.LG_POHs on q.c_no equals q5.c_pono
                                           join q6 in db.LG_CusmasCabs on q5.c_cab equals q6.c_cab into q_2
                                           from qItm in q_2.DefaultIfEmpty()
                                           join q3 in db.MsTransDs on new { q.c_type, c_portal = '3', c_notrans = "06" } equals new { q3.c_type, q3.c_portal, q3.c_notrans } into q_3
                                           from qMTD in q_3.DefaultIfEmpty()
                                           join q4 in db.LG_MsBatches on new { q.c_iteno, q.c_batch } equals new { q4.c_iteno, q4.c_batch } into q_4
                                           from qBat in q_4.DefaultIfEmpty()
                                           where (q.c_gdg == gdg)
                                           select new ReceiptNoteKhusus
                                           {    
                                               c_rnno = q.c_rnno,
                                               c_iteno = q.c_iteno,
                                               c_typern = q1.c_type,
                                               v_itemdesc = q2.v_itnam,
                                               c_refno = q.c_no,
                                               c_batch = q.c_batch,
                                               c_type = q.c_type,
                                               v_typedesc = qMTD.v_ket,
                                               n_gqty = q.n_gqty,
                                               n_bqty = q.n_bqty,
                                               d_batchexpiredDate = qBat.d_expired.HasValue ? qBat.d_expired.Value : DateTime.Today.Date,
                                           }).AsQueryable();

                                if ((parameters != null) && (parameters.Count > 0))
                                {
                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else if (kvp.Value.IsBetween)
                                            {

                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }

                                Logger.WriteLine(qry.Provider.ToString());

                                nCount = qry.Count();

                                var DOKO = qry.ToList();

                                if (nCount > 0)
                                {
                                    lstrcpkhusus = qry.ToList();

                                    lstrcpkhusus = (from q in lstrcpkhusus
                                                    select new ReceiptNoteKhusus
                                                    {
                                                        c_rnno = q.c_rnno,
                                                        c_iteno = q.c_iteno,
                                                        c_typern = q.c_type,
                                                        v_itemdesc = q.v_itemdesc,
                                                        c_refno = q.c_refno,
                                                        c_batch = q.c_batch,
                                                        c_type = q.c_type,
                                                        v_typedesc = q.v_typedesc,
                                                        n_gqty = q.n_gqty,
                                                        n_bqty = q.n_bqty,
                                                        d_batchexpired = q.d_batchexpiredDate.ToString("dd-MM-yyyy"),
                                                    }).ToList();

                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }

                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, lstrcpkhusus);
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, lstrcpkhusus.Skip(start).Take(limit).ToList());
                                    }
                                }

                                dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                            }
                            else
                            {
                                var qry = (from q in db.LG_RND2s
                                           join q1 in db.LG_RNHs on new { q.c_gdg, q.c_rnno } equals new { q1.c_gdg, q1.c_rnno }
                                           join q2 in db.FA_MasItms on q.c_iteno equals q2.c_iteno
                                           //join q5 in db.LG_POHs on q.c_no equals q5.c_pono
                                           //join q6 in db.LG_CusmasCabs on q5.c_cab equals q6.c_cab into q_2
                                           //join q5 in db.LG_ClaimAccHes on q.c_no equals q5.c_claimaccno
                                           //join q6 in db.LG_DatSups on q5.c_nosup equals q6.c_nosup into q_2
                                           //from qItm in q_2.DefaultIfEmpty()
                                           join q3 in db.MsTransDs on new { q.c_type, c_portal = '3', c_notrans = "06" } equals new { q3.c_type, q3.c_portal, q3.c_notrans } into q_3
                                           from qMTD in q_3.DefaultIfEmpty()
                                           //20170213 D. Indra
                                           //join q7 in db.MsTransDs on new { c_portal = '9', c_notrans = "003" } equals new { q7.c_portal, q7.c_notrans } into q_7
                                           //from qMTD2 in q_7.DefaultIfEmpty()
                                           //join q8 in db.SCMS_MSITEM_LATs on new { q.c_iteno, c_type_lat = qMTD2.c_type } equals new { q8.c_iteno, q8.c_type_lat }
                                           //20170213 <---------
                                           join q4 in db.LG_MsBatches on new { q.c_iteno, q.c_batch } equals new { q4.c_iteno, q4.c_batch } into q_4
                                           from qBat in q_4.DefaultIfEmpty()
                                           where (q.c_gdg == gdg)
                                                 //&& (qMTD2.c_gdg == gdg)//20170213 D. Indra
                                           select new
                                           {
                                               q.c_rnno,
                                               q.c_iteno,
                                               c_typern = q1.c_type,
                                               v_itemdesc = q2.v_itnam,
                                               c_refno = q.c_no,
                                               q.c_batch,
                                               q.c_type,
                                               v_typedesc = qMTD.v_ket,
                                               q.n_gqty,
                                               q.n_bqty,
                                               d_batchexpired = qBat.d_expired,
                                               //v_cunam = qItm.c_nosup,
                                               //kdLantai = qMTD2.c_type + "-" + qMTD2.v_ket, //20170213 D. Indra
                                           }).AsQueryable();

                                if ((parameters != null) && (parameters.Count > 0))
                                {
                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else if (kvp.Value.IsBetween)
                                            {

                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }

                                Logger.WriteLine(qry.Provider.ToString());

                                nCount = qry.Count();

                                if (nCount > 0)
                                {
                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }

                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                    }
                                }

                                dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);

                            }


                        }
                        break;

                    #endregion


                    //DEATIL ULUJAMI

                    #region MODEL_QUERY_RNBELI_DETAIL_ULUJAMI

                    case Constant.MODEL_QUERY_RNBELI_DETAIL_ULUJAMI:
                        {

                            char gdg = (parameters.ContainsKey("gudang") ? (char)((Functionals.ParameterParser)parameters["gudang"]).Value : char.MinValue);
                            bool khusus = (parameters.ContainsKey("l_rnkhusus") ? (bool)((Functionals.ParameterParser)parameters["l_rnkhusus"]).Value : false);

                            string Ket = (parameters.ContainsKey("Ket") ? Convert.ToString(((Functionals.ParameterParser)parameters["Ket"]).Value).Trim() : string.Empty);


                            List<ReceiptNote> lstrcp = new List<ReceiptNote>();
                            List<ReceiptNoteKhusus> lstrcpkhusus = new List<ReceiptNoteKhusus>();





                            if (khusus)
                            {




                                var qry = (from q in db.LG_RND2s
                                           join q1 in db.LG_RNHs on new { q.c_gdg, q.c_rnno } equals new { q1.c_gdg, q1.c_rnno }
                                           join q2 in db.FA_MasItms on q.c_iteno equals q2.c_iteno
                                           join q3 in db.MsTransDs on new { q.c_type, c_portal = '3', c_notrans = "06" } equals new { q3.c_type, q3.c_portal, q3.c_notrans } into q_3
                                           from qMTD in q_3.DefaultIfEmpty()
                                           join q4 in db.LG_MsBatches on new { q.c_iteno, q.c_batch } equals new { q4.c_iteno, q4.c_batch } into q_4
                                           from qBat in q_4.DefaultIfEmpty()
                                           //where (q.c_gdg == '6')
                                           where (q1.c_gdg == '6') && q1.c_type == "05" && q1.v_ket.Contains("Ulujami")
                                           select new ReceiptNoteKhusus
                                           {
                                               c_rnno = q.c_rnno,
                                               c_iteno = q.c_iteno,
                                               c_typern = q1.c_type,
                                               v_itemdesc = q2.v_itnam,
                                               c_refno = q.c_no,
                                               c_batch = q.c_batch,
                                               c_type = q.c_type,
                                               v_typedesc = qMTD.v_ket,
                                               n_gqty = q.n_gqty,
                                               n_bqty = q.n_bqty,
                                               d_batchexpiredDate = qBat.d_expired.HasValue ? qBat.d_expired.Value : DateTime.Today.Date,
                                           }).AsQueryable();
                                var sss = qry.ToList();


                                if ((parameters != null) && (parameters.Count > 0))
                                {
                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else if (kvp.Value.IsBetween)
                                            {

                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }

                                Logger.WriteLine(qry.Provider.ToString());

                                nCount = qry.Count();

                                if (nCount > 0)
                                {
                                    lstrcpkhusus = qry.ToList();

                                    lstrcpkhusus = (from q in lstrcpkhusus
                                                    select new ReceiptNoteKhusus
                                                    {
                                                        c_rnno = q.c_rnno,
                                                        c_iteno = q.c_iteno,
                                                        c_typern = q.c_type,
                                                        v_itemdesc = q.v_itemdesc,
                                                        c_refno = q.c_refno,
                                                        c_batch = q.c_batch,
                                                        c_type = q.c_type,
                                                        v_typedesc = q.v_typedesc,
                                                        n_gqty = q.n_gqty,
                                                        n_bqty = q.n_bqty,
                                                        d_batchexpired = q.d_batchexpiredDate.ToString("dd-MM-yyyy"),
                                                    }).ToList();

                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }

                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, lstrcpkhusus);
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, lstrcpkhusus.Skip(start).Take(limit).ToList());
                                    }
                                }

                                dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                            }
                            else
                            {



                                if (Ket.Contains("RelokasiUJClaim03"))
                                {

                                    //
                                    var qry = (from q in db.LG_RND2s
                                               join q1 in db.LG_RNHs on new { q.c_gdg, q.c_rnno } equals new { q1.c_gdg, q1.c_rnno }
                                               join q2 in db.FA_MasItms on q.c_iteno equals q2.c_iteno
                                               join q3 in db.MsTransDs on new { q.c_type, c_portal = '3', c_notrans = "06" } equals new { q3.c_type, q3.c_portal, q3.c_notrans } into q_3
                                               from qMTD in q_3.DefaultIfEmpty()
                                               join q4 in db.LG_MsBatches on new { q.c_iteno, q.c_batch } equals new { q4.c_iteno, q4.c_batch } into q_4
                                               from qBat in q_4.DefaultIfEmpty()
                                               where (q1.c_gdg == '6') && q1.c_type == "05" && q1.v_ket.Contains("RelokasiUJClaim03")
                                               select new
                                               {
                                                   q.c_rnno,
                                                   q.c_iteno,
                                                   c_typern = q1.c_type,
                                                   v_itemdesc = q2.v_itnam,
                                                   c_refno = q.c_no,
                                                   q.c_batch,
                                                   q.c_type,
                                                   v_typedesc = qMTD.v_ket,
                                                   q.n_gqty,
                                                   q.n_bqty,
                                                   d_batchexpired = qBat.d_expired,
                                               }).AsQueryable();

                                    var ccc = qry.ToList();

                                    if ((parameters != null) && (parameters.Count > 0))
                                    {
                                        foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                        {
                                            if (kvp.Value.IsCondition)
                                            {
                                                if (kvp.Value.IsLike)
                                                {
                                                    paternLike = kvp.Value.Value.ToString();
                                                    qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                                }
                                                else if (kvp.Value.IsBetween)
                                                {

                                                }
                                                else
                                                {
                                                    qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                                }
                                            }
                                        }
                                    }

                                    Logger.WriteLine(qry.Provider.ToString());

                                    nCount = qry.Count();

                                    if (nCount > 0)
                                    {
                                        if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                        {
                                            qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                        }

                                        if ((limit == -1) || allQuery)
                                        {
                                            dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                        }
                                        else
                                        {
                                            dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                        }
                                    }

                                    dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                    dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                                    //

                                }
                                else
                                {

                                    //
                                    var qry = (from q in db.LG_RND2s
                                               join q1 in db.LG_RNHs on new { q.c_gdg, q.c_rnno } equals new { q1.c_gdg, q1.c_rnno }
                                               join q2 in db.FA_MasItms on q.c_iteno equals q2.c_iteno
                                               join q3 in db.MsTransDs on new { q.c_type, c_portal = '3', c_notrans = "06" } equals new { q3.c_type, q3.c_portal, q3.c_notrans } into q_3
                                               from qMTD in q_3.DefaultIfEmpty()
                                               join q4 in db.LG_MsBatches on new { q.c_iteno, q.c_batch } equals new { q4.c_iteno, q4.c_batch } into q_4
                                               from qBat in q_4.DefaultIfEmpty()
                                               where (q1.c_gdg == '6') && q1.c_type == "05" && q1.v_ket.Contains("Ulujami")
                                               select new
                                               {
                                                   q.c_rnno,
                                                   q.c_iteno,
                                                   c_typern = q1.c_type,
                                                   v_itemdesc = q2.v_itnam,
                                                   c_refno = q.c_no,
                                                   q.c_batch,
                                                   q.c_type,
                                                   v_typedesc = qMTD.v_ket,
                                                   q.n_gqty,
                                                   q.n_bqty,
                                                   d_batchexpired = qBat.d_expired,
                                               }).AsQueryable();

                                    var ccc = qry.ToList();

                                    if ((parameters != null) && (parameters.Count > 0))
                                    {
                                        foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                        {
                                            if (kvp.Value.IsCondition)
                                            {
                                                if (kvp.Value.IsLike)
                                                {
                                                    paternLike = kvp.Value.Value.ToString();
                                                    qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                                }
                                                else if (kvp.Value.IsBetween)
                                                {

                                                }
                                                else
                                                {
                                                    qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                                }
                                            }
                                        }
                                    }

                                    Logger.WriteLine(qry.Provider.ToString());

                                    nCount = qry.Count();

                                    if (nCount > 0)
                                    {
                                        if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                        {
                                            qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                        }

                                        if ((limit == -1) || allQuery)
                                        {
                                            dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                        }
                                        else
                                        {
                                            dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                        }
                                    }

                                    dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                    dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                                    //

                                }




                            }


                        }
                        break;

                    #endregion

                    // ULUJAMI  

                    #region MODEL_QUERY_RNBELI_ULUJAMI

                    case Constant.MODEL_QUERY_RNBELI_ULUJAMI:
                        {
                            string tipe = (parameters.ContainsKey("c_typern") ? (string)((Functionals.ParameterParser)parameters["c_typern"]).Value : string.Empty);
                            bool khusus = (parameters.ContainsKey("l_typern") ? (bool)((Functionals.ParameterParser)parameters["l_typern"]).Value : false);

                            string Ket = (parameters.ContainsKey("Ket") ? Convert.ToString(((Functionals.ParameterParser)parameters["Ket"]).Value).Trim() : string.Empty);




                            if (Ket.Contains("RelokasiUJClaim03"))
                            {
                                var qry = (from q in db.LG_RNHs
                                           join q1 in db.LG_DatSups on q.c_from equals q1.c_nosup
                                           //join q1 in db.LG_DatSups on q.c_from equals q1.c_nosup into q_1
                                           //from qDS in q_1.DefaultIfEmpty()
                                           join q2 in db.LG_MsGudangs on q.c_gdg equals q2.c_gdg
                                           //join q2 in db.LG_MsGudangs on q.c_gdg equals q2.c_gdg into q_2
                                           //from qGDG in q_2.DefaultIfEmpty()
                                           join q3 in
                                               (from sq in db.MsTransDs
                                                where sq.c_portal == '3' && sq.c_notrans == "05"
                                                select sq) on q.c_type equals q3.c_type into q_3
                                           from qMTD in q_3.DefaultIfEmpty()
                                           where q2.c_gdg == '6' && q.v_ket.Contains("RelokasiUJClaim03") && //&& q.c_type == "05" &&   // khusus gudang Ulujami di pantek dan tipen rn selain dari 05

                                           (!q.c_rnno.Substring(0, 3).Equals("RNX")) &&
                                           ((q.l_rnkhusus.HasValue ? q.l_rnkhusus.Value : false) == khusus)
                                           select new
                                           {
                                               q.c_dono,
                                               q.d_dodate,
                                               q.c_from,
                                               q.c_gdg,
                                               q.c_rnno,
                                               c_typern = q.c_type,
                                               q.d_rndate,
                                               q.l_delete,
                                               q.l_float,
                                               q.l_print,
                                               q.l_status,
                                               q.n_bea,
                                               q.v_ket,
                                               q.l_khusus,
                                               q1.v_nama,
                                               q2.v_gdgdesc,
                                               v_typedesc = qMTD.v_ket,
                                               q.c_entry,
                                               q.d_entry,
                                           }).Distinct().AsQueryable();

                                var fff = qry.ToList();

                                if ((parameters != null) && (parameters.Count > 0))
                                {


                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else if (kvp.Value.IsBetween)
                                            {

                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }

                                Logger.WriteLine(qry.Provider.ToString());

                                nCount = qry.Count();



                                if (nCount > 0)
                                {
                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }

                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                    }
                                }

                                dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);

                            }

                            else
                            {
                                var qry = (from q in db.LG_RNHs
                                           join q1 in db.LG_DatSups on q.c_from equals q1.c_nosup
                                           //join q1 in db.LG_DatSups on q.c_from equals q1.c_nosup into q_1
                                           //from qDS in q_1.DefaultIfEmpty()
                                           join q2 in db.LG_MsGudangs on q.c_gdg equals q2.c_gdg
                                           //join q2 in db.LG_MsGudangs on q.c_gdg equals q2.c_gdg into q_2
                                           //from qGDG in q_2.DefaultIfEmpty()
                                           join q3 in
                                               (from sq in db.MsTransDs
                                                where sq.c_portal == '3' && sq.c_notrans == "05"
                                                select sq) on q.c_type equals q3.c_type into q_3
                                           from qMTD in q_3.DefaultIfEmpty()
                                           where q2.c_gdg == '6' && q.v_ket.Contains("Ulujami") && //&& q.c_type == "05" &&   // khusus gudang Ulujami di pantek dan tipen rn selain dari 05

                                           (!q.c_rnno.Substring(0, 3).Equals("RNX")) &&
                                           ((q.l_rnkhusus.HasValue ? q.l_rnkhusus.Value : false) == khusus)
                                           select new
                                           {
                                               q.c_dono,
                                               q.d_dodate,
                                               q.c_from,
                                               q.c_gdg,
                                               q.c_rnno,
                                               c_typern = q.c_type,
                                               q.d_rndate,
                                               q.l_delete,
                                               q.l_float,
                                               q.l_print,
                                               q.l_status,
                                               q.n_bea,
                                               q.v_ket,
                                               q.l_khusus,
                                               q1.v_nama,
                                               q2.v_gdgdesc,
                                               v_typedesc = qMTD.v_ket,
                                               q.c_entry,
                                               q.d_entry,
                                           }).Distinct().AsQueryable();

                                var fff = qry.ToList();

                                if ((parameters != null) && (parameters.Count > 0))
                                {


                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else if (kvp.Value.IsBetween)
                                            {

                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }

                                Logger.WriteLine(qry.Provider.ToString());

                                nCount = qry.Count();



                                if (nCount > 0)
                                {
                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }

                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                    }
                                }

                                dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);





                            }







                        }
                        break;

                    #endregion


                    #endregion

                    #region Transfer Gudang

                    #region MODEL_QUERY_TRANSFERGUDANG

                    case Constant.MODEL_QUERY_TRANSFERGUDANG:
                        {
                            var qry = (from q in db.LG_SJHs
                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg into q_1
                                       from qGdg1 in q_1.DefaultIfEmpty()
                                       join q2 in db.LG_MsGudangs on q.c_gdg2 equals q2.c_gdg into q_2
                                       from qGdg2 in q_2.DefaultIfEmpty()
                                       //join q3 in db.LG_DatSups on q.C_nosup equals q3.C_nosup into q_3
                                       //from qSup in q_3.DefaultIfEmpty()
                                       select new
                                       {
                                           q.c_gdg,
                                           q.c_gdg2,
                                           q.c_nosup,
                                           q.c_pin,
                                           q.c_sjno,
                                           q.c_type,
                                           q.d_sjdate,
                                           q.l_confirm,
                                           q.l_delete,
                                           q.l_exp,
                                           q.l_print,
                                           q.l_status,
                                           q.v_ket,
                                           v_gdgFromDesc = qGdg1.v_gdgdesc,
                                           v_gdgToDesc = qGdg2.v_gdgdesc
                                           //qSup.V_nama
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_TRANSFERGUDANG_DETAIL

                    case Constant.MODEL_QUERY_TRANSFERGUDANG_DETAIL:
                        {
                            string sjID = (parameters.ContainsKey("suratID") ? (string)((Functionals.ParameterParser)parameters["suratID"]).Value : string.Empty);
                            char gdg = (parameters.ContainsKey("gudang") ? (char)((Functionals.ParameterParser)parameters["gudang"]).Value : char.MinValue);

                            var qry = (from q in db.LG_SJD1s
                                       join q1 in db.FA_MasItms on q.c_iteno equals q1.c_iteno into q_1
                                       from qItm in q_1.DefaultIfEmpty()
                                       where (q.c_sjno == sjID) && (q.c_gdg == gdg) &&
                                       ((q.n_gqty > 0) || (q.n_bqty >0))
                                       select new
                                       {
                                           q.c_gdg,
                                           q.c_sjno,
                                           q.c_spgno,
                                           q.c_iteno,
                                           q.c_batch,
                                           q.n_gqty,
                                           q.n_bqty,
                                           v_item_desc = qItm.v_itnam
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #region RN REPACK DETIL

                    case Constant.MODEL_QUERY_REPACK_DETAIL:
                        {
                            string rnno = (parameters.ContainsKey("c_rnno") ? (string)((Functionals.ParameterParser)parameters["c_rnno"]).Value : string.Empty);
                            string typern = (parameters.ContainsKey("c_typern") ? (string)((Functionals.ParameterParser)parameters["c_typern"]).Value : string.Empty);
                            char gdg = (parameters.ContainsKey("gudang") ? (char)((Functionals.ParameterParser)parameters["gudang"]).Value : char.MinValue);

                            var qry = (from q in db.LG_RND1s
                                       join q1 in db.LG_RNHs on new { q.c_gdg, q.c_rnno } equals new { q1.c_gdg, q1.c_rnno }
                                       join q2 in db.FA_MasItms on q.c_iteno equals q2.c_iteno
                                       join q4 in db.LG_MsBatches on new { q.c_iteno, q.c_batch } equals new { q4.c_iteno, q4.c_batch } into q_4
                                       from qBat in q_4.DefaultIfEmpty()
                                       group q by new { q1.c_gdg, q1.c_rnno, q.c_iteno, q.c_batch, q1.c_type, q2.v_itnam, qBat.d_expired } into g
                                       select new
                                       {
                                           c_gdg = g.Key.c_gdg,
                                           c_rnno = g.Key.c_rnno,
                                           c_iteno = g.Key.c_iteno,
                                           c_typern = g.Key.c_type,
                                           v_itemdesc = g.Key.v_itnam,
                                           c_batch = g.Key.c_batch,
                                           n_gqty = g.Sum(x => x.n_gqty),
                                           n_bqty = g.Sum(x => x.n_bqty),
                                           d_batchexpired = g.Key.d_expired,
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #region MODEL_QUERY_REPACK_DETAIL

                    #endregion

                    #endregion

                    #endregion

                    #region Adjustment

                    #region Adjust Stock

                    #region MODEL_QUERY_ADJUST_STOCK

                    case Constant.MODEL_QUERY_ADJUST_STOCK:
                        {
                            var qry = (from q in db.LG_AdjustHs
                                       join q2 in db.MsTransDs on q.c_type equals q2.c_type
                                       join q3 in db.LG_MsGudangs on q.c_gdg equals q3.c_gdg
                                       where q2.c_notrans == "12" && q2.c_portal == '3'
                                       && (q.l_delete == false || q.l_delete == null)
                                       select new
                                       {
                                           q.c_adjno,
                                           q.c_gdg,
                                           q3.v_gdgdesc,
                                           q.c_type,
                                           ketType = q2.v_ket,
                                           q.v_ket,
                                           q.d_adjdate
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_ADJUST_STOCK_DETIL

                    case Constant.MODEL_QUERY_ADJUST_STOCK_DETIL:
                        {
                            //string adjno = (parameters.ContainsKey("c_adjno") ? (string)((Functionals.ParameterParser)parameters["c_adjno"]).Value : string.Empty);
                            //string type = (parameters.ContainsKey("c_type") ? (string)((Functionals.ParameterParser)parameters["c_type"]).Value : string.Empty);
                            //char gdg = (parameters.ContainsKey("gudang") ? (char)((Functionals.ParameterParser)parameters["gudang"]).Value : char.MinValue);

                            var qry = (from q in db.LG_AdjustHs
                                       join q1 in db.LG_AdjustD1s on new { q.c_gdg, q.c_adjno } equals new { q1.c_gdg, q1.c_adjno }
                                       join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno
                                       select new
                                       {
                                           q.c_gdg,
                                           q.c_adjno,
                                           q1.c_iteno,
                                           q2.v_itnam,
                                           q1.c_batch,
                                           q.c_type,
                                           q1.n_gqty,
                                           q1.n_bqty,
                                           q1.v_ket
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #endregion

                    #region MK

                    #region Memo Combo

                    #region MODEL_QUERY_MK_MEMOCOMBO

                    case Constant.MODEL_QUERY_MK_MEMOCOMBO:
                        {
                            var qry = (from q in db.MK_MemoHs
                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg into q_1
                                       from qGdg in q_1.DefaultIfEmpty()
                                       select new
                                       {
                                           q.c_gdg,
                                           q.c_memo,
                                           q.c_memono,
                                           q.d_memodate,
                                           q.l_print,
                                           q.l_status,
                                           q.v_ket1,
                                           q.v_ket2,
                                           q.l_delete,
                                           q.v_ket_mark,
                                           qGdg.v_gdgdesc
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_MK_MEMOCOMBO_DETAIL

                    case Constant.MODEL_QUERY_MK_MEMOCOMBO_DETAIL:
                        {
                            char gdg = (parameters.ContainsKey("gudang") ? (char)((Functionals.ParameterParser)parameters["gudang"]).Value : char.MinValue);
                            string memoId = (parameters.ContainsKey("memoID") ? (string)((Functionals.ParameterParser)parameters["memoID"]).Value : string.Empty);

                            var qry = (from q in db.MK_MemoDs
                                       join q1 in db.FA_MasItms on q.c_iteno equals q1.c_iteno into q_1
                                       from qItm in q_1.DefaultIfEmpty()
                                       where (q.c_gdg == gdg) && (q.c_memono == memoId)
                                       select new
                                       {
                                           q.c_gdg,
                                           q.c_iteno,
                                           q.c_memono,
                                           q.n_acc,
                                           q.n_box,
                                           q.n_qty,
                                           q.n_sisa,
                                           v_itemdesc = qItm.v_itnam
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #endregion

                    #region Memo

                    #region Memo STT

                    case Constant.MODEL_QUERY_MEMO_MEMODONASI:
                        {
                            var qry = (from q in db.MK_MTHs
                                       join q1 in db.HR_MsKries on q.c_nip equals q1.c_nip
                                       join q2 in db.LG_MsGudangs on q.c_gdg equals q2.c_gdg
                                       join q3 in db.MsTransDs on q.c_type equals q3.c_type
                                       where (q.l_delete == false || q.l_delete == null)
                                       && q3.c_notrans == "35" && q3.c_portal == '3'
                                       orderby q.c_mtno
                                       select new
                                       {
                                           q.c_gdg,
                                           q.c_mtno,
                                           q.d_mtdate,
                                           q2.v_gdgdesc,
                                           v_ketTrans = q3.v_ket,
                                           q.v_ket,
                                           q.c_nip,
                                           q.c_memo,
                                           q.c_type,
                                           q1.v_nama,
                                           Nama = q.c_nip + " - " + q1.v_nama
                                       });

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_MEMO_MEMOSAMPLE_DETAIL

                    case Constant.MODEL_QUERY_MEMO_MEMOSAMPLE_DETAIL:
                        {
                            var qry = (from q in db.MK_MTDs
                                       join q1 in db.FA_MasItms on q.c_iteno equals q1.c_iteno
                                       join q2 in db.MK_MTHs on q.c_mtno equals q2.c_mtno
                                       where (q2.l_delete == false || q2.l_delete == null)
                                       select new
                                       {
                                           q.c_iteno,
                                           q1.v_itnam,
                                           q.c_mtno,
                                           q.n_qty,
                                           q.n_sisa
                                       });

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region Memo Combo

                    #region MODEL_QUERY_MEMO_MEMOCOMBO

                    case Constant.MODEL_QUERY_MEMO_MEMOCOMBO:
                        {
                            string typeCode = (parameters.ContainsKey("typeCode") ? (string)((Functionals.ParameterParser)parameters["typeCode"]).Value : string.Empty);

                            var qry = (from q in db.LG_ComboHs
                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg into q_1
                                       from qGdg in q_1.DefaultIfEmpty()
                                       join q2 in db.FA_MasItms on q.c_iteno equals q2.c_iteno into q_2
                                       from qItm in q_2.DefaultIfEmpty()
                                       join q3 in db.MK_MemoHs on q.c_memono equals q3.c_memono into q_3
                                       from qMemCb in q_3.DefaultIfEmpty()
                                       where q.c_type == typeCode
                                       select new
                                       {
                                           q.c_batch,
                                           q.c_combono,
                                           q.c_gdg,
                                           q.c_iteno,
                                           q.c_memono,
                                           q.c_type,
                                           q.d_combodate,
                                           q.l_confirm,
                                           q.l_delete,
                                           q.n_acc,
                                           q.n_bqty,
                                           q.n_bsisa,
                                           q.n_gqty,
                                           q.n_gsisa,
                                           q.v_ket,
                                           qMemCb.c_memo,
                                           n_box = Math.Round(((q.n_gqty / q.n_acc).HasValue ? (q.n_gqty / q.n_acc).Value : 0), 2, MidpointRounding.AwayFromZero),
                                           qGdg.v_gdgdesc,
                                           qItm.v_itnam
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_MEMO_MEMOCOMBO_DETAIL

                    case Constant.MODEL_QUERY_MEMO_MEMOCOMBO_DETAIL:
                        {
                            string comboId = (parameters.ContainsKey("comboID") ? (string)((Functionals.ParameterParser)parameters["comboID"]).Value : string.Empty);
                            char gdg = (parameters.ContainsKey("gudang") ? (char)((Functionals.ParameterParser)parameters["gudang"]).Value : char.MinValue);

                            var qry = (from q in db.LG_ComboHs
                                       join q1 in db.LG_ComboD1s on new { q.c_gdg, q.c_combono } equals new { q1.c_gdg, q1.c_combono }
                                       join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno into q_2
                                       from qItm in q_2.DefaultIfEmpty()
                                       join q3 in db.LG_MsBatches on new { q1.c_iteno, q1.c_batch } equals new { q3.c_iteno, q3.c_batch }
                                       join q4 in db.FA_Combos on new { c_comboItem = q.c_iteno, q1.c_iteno } equals new { c_comboItem = q4.c_combo, q4.c_iteno }
                                       where q.c_combono == comboId && q.c_gdg == gdg
                                       select new
                                       {
                                           q.l_delete,
                                           q1.c_batch,
                                           q1.c_combono,
                                           q1.n_qty,
                                           qItm.c_iteno,
                                           v_itemdesc = qItm.v_itnam,
                                           n_pack = q4.n_qty,
                                           n_qty_expected = q1.n_qty,
                                           q3.d_expired
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #region Memo Pemusnahan

                    case Constant.MODEL_QUERY_MEMO_MEMOPEMUSNAHAN:
                        {
                            var qry = (from q in db.MK_MPHs
                                       join q2 in db.LG_MsGudangs on q.c_gdg equals q2.c_gdg
                                       where (q.l_delete == false || q.l_delete == null)
                                       orderby q.c_mpno
                                       select new
                                       {
                                           q.c_gdg,
                                           q.c_mpno,
                                           q.d_mpdate,
                                           q2.v_gdgdesc,
                                           q.v_ket,
                                           q.c_memo
                                       });

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_MEMO_MEMOPEMUSNAHAN_DETAIL

                    case Constant.MODEL_QUERY_MEMO_MEMOPEMUSNAHAN_DETAIL:
                        {
                            var qry = (from q in db.MK_MPDs
                                       join q1 in db.FA_MasItms on q.c_iteno equals q1.c_iteno
                                       join q2 in db.MK_MPHs on q.c_mpno equals q2.c_mpno
                                       where (q2.l_delete == false || q2.l_delete == null)
                                       select new
                                       {
                                           q.c_iteno,
                                           q1.v_itnam,
                                           q.c_mpno,
                                           q.n_qty,
                                           q.n_sisa
                                       });

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #region MODEL_QUERY_RC

                    case Constant.MODEL_QUERY_RC:
                        {
                            var qry = (from q in db.LG_RCHes
                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg into gud
                                       from qgud in gud.DefaultIfEmpty()
                                       join q2 in db.LG_Cusmas on q.c_cusno equals q2.c_cusno into cus
                                       from qcus in cus.DefaultIfEmpty()
                                       where (q.l_delete == null || q.l_delete == false)
                                       select new
                                       {
                                           q.d_rcdate,
                                           q.c_rcno,
                                           q.v_ket,
                                           q.c_pin,
                                           l_send = q.l_send.HasValue ? q.l_send.Value : false,
                                           q.d_send,
                                           v_gdgdesc = qgud.v_gdgdesc == null ? "" : qgud.v_gdgdesc,
                                           q.c_gdg,
                                           q.c_cusno,
                                           v_cunam = qcus.v_cunam == null ? "" : qcus.v_cunam,
                                           pbbrno = q.v_pbbrno == null ? "" : q.v_pbbrno,
                                           l_sent = (q.l_sent.HasValue ? q.l_sent.Value : ((q.d_entry.Value != q.d_update.Value) ? true : false)),
                                           q.c_entry,
                                           qcus.l_rcdcore,
                                           q.c_baspbno,
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_RC_RESEND

                    case Constant.MODEL_QUERY_RC_RESEND:
                        {
                            var qry = (from q in db.LG_RCHes
                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg into gud
                                       from qgud in gud.DefaultIfEmpty()
                                       join q2 in db.LG_Cusmas on q.c_cusno equals q2.c_cusno into cus
                                       from qcus in cus.DefaultIfEmpty()
                                       where (q.l_delete == null || q.l_delete == false) && (q.l_sent == true)
                                       select new
                                       {
                                           q.d_rcdate,
                                           q.c_rcno,
                                           q.c_pin,
                                           l_send = q.l_send.HasValue ? q.l_send.Value : false,
                                           q.d_send,
                                           v_gdgdesc = qgud.v_gdgdesc == null ? "" : qgud.v_gdgdesc,
                                           q.c_gdg,
                                           q.c_cusno,
                                           v_cunam = qcus.v_cunam == null ? "" : qcus.v_cunam,
                                           l_sent = (q.l_sent.HasValue ? q.l_sent.Value : ((q.d_entry.Value != q.d_update.Value) ? true : false)),
                                           q.c_entry,
                                           q.v_pbbrno
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_RC_DETAIL

                    case Constant.MODEL_QUERY_RC_DETAIL:
                        {
                            var qry = (from q1 in db.LG_RCD1s
                                       join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno
                                       join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "10", q1.c_type } equals new { q3.c_portal, q3.c_notrans, q3.c_type }
                                       select new
                                       {
                                           q1.c_rcno,
                                           q1.c_iteno,
                                           q2.v_itnam,
                                           q2.v_undes,
                                           q1.c_batch,
                                           q1.c_dono,
                                           q1.c_rnno,
                                           q1.n_qty,
                                           q1.c_type,
                                           q1.n_sisa,
                                           q1.n_qtyrcv,
                                           q1.n_qtydestroy,
                                           v_ket_trans = q3.v_ket
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_RS_PEMBELIAN

                    case Constant.MODEL_QUERY_RS_PEMBELIAN:
                        {
                            var qry = (from q in db.LG_RSHes
                                       join q1 in db.LG_DatSups on q.c_nosup equals q1.c_nosup into qsup
                                       from sup in qsup.DefaultIfEmpty()
                                       join q2 in db.LG_MsGudangs on q.c_gdg equals q2.c_gdg into qgud
                                       from gud in qgud.DefaultIfEmpty()
                                       join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "07", q.c_type } equals new { q3.c_portal, q3.c_notrans, q3.c_type }
                                       select new
                                       {
                                           q.c_rsno,
                                           q.d_rsdate,
                                           q.v_ket,
                                           q.c_nosup,
                                           q.c_gdg,
                                           sup.v_nama,
                                           q.c_type,
                                           gud.v_gdgdesc,
                                           v_descTrans = q3.v_ket,
                                           q.l_confirm,
                                           q.c_cprno,
                                           q.l_delete
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_RS_PEMBELIAN_CONF_DETIL

                    case Constant.MODEL_QUERY_RS_PEMBELIAN_CONF_DETIL:
                        {
                            //string rsno = (parameters.ContainsKey("rsno") ? (string)((Functionals.ParameterParser)parameters["rsno"]).Value : string.Empty);

                            var qry = (from q in db.LG_RSHes
                                       join q1 in db.LG_RSD6s on new { q.c_gdg, q.c_rsno } equals new { c_gdg = (q1.c_gdg.HasValue ? q1.c_gdg.Value : '1'), q1.c_rsno }
                                       join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno
                                       select new
                                       {
                                           NoRef = q1.c_noref,
                                           q1.c_iteno,
                                           q2.v_itnam,
                                           q1.c_batch,
                                           q2.v_undes,
                                           q.c_rsno,
                                           nReject = q1.n_reject,
                                           nRework = q1.n_rework,
                                           nRedress = q1.n_redress,
                                           q1.v_ket,
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_RS_PEMBELIAN_CONF

                    case Constant.MODEL_QUERY_RS_PEMBELIAN_CONF:
                        {
                            var qry = (from q in db.LG_RSHes
                                       join q1 in db.LG_DatSups on q.c_nosup equals q1.c_nosup into qsup
                                       from sup in qsup.DefaultIfEmpty()
                                       join q2 in db.LG_MsGudangs on q.c_gdg equals q2.c_gdg into qgud
                                       from gud in qgud.DefaultIfEmpty()
                                       join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "07", q.c_type } equals new { q3.c_portal, q3.c_notrans, q3.c_type }
                                       select new
                                       {
                                           q.c_rsno,
                                           q.d_rsdate,
                                           q.v_ket,
                                           q.c_nosup,
                                           q.c_gdg,
                                           sup.v_nama,
                                           q.c_type,
                                           gud.v_gdgdesc,
                                           v_descTrans = q3.v_ket,
                                           q.l_confirm,
                                           q.c_cprno,
                                           q.l_delete
                                       }).Distinct().AsQueryable();

                            #region Old Coded

                            //var rs = (from q in db.LG_RSD6s
                            //          //where (q.l_delete == false || q.l_delete == null)
                            //          select new
                            //          {
                            //            q.c_rsno,
                            //            q.c_nosup,
                            //            q.c_gdg,
                            //            q.d_rsdate,
                            //            q.c_noref,
                            //            q.v_ket
                            //          }).Distinct().AsQueryable();

                            //var qry = (from q in rs
                            //           join q3 in db.LG_RSHes on q.c_noref equals q3.c_rsno
                            //           join q1 in db.LG_DatSups on q.c_nosup equals q1.c_nosup
                            //           join q2 in db.LG_MsGudangs on q.c_gdg equals q2.c_gdg
                            //           select new
                            //           {
                            //             q.c_gdg,
                            //             q.c_nosup,
                            //             q.d_rsdate,
                            //             q.c_rsno,
                            //             q2.v_gdgdesc,
                            //             q1.v_nama,
                            //             q3.c_cprno,
                            //             q.v_ket
                            //           }).AsQueryable();

                            #endregion

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);

                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_RS_PEMBELIAN_DETAIL

                    case Constant.MODEL_QUERY_RS_PEMBELIAN_DETAIL:
                        {
                            var qry = (from q in db.LG_RSHes
                                       join q1 in db.LG_RSD1s on new { q.c_gdg, q.c_rsno } equals new { q1.c_gdg, q1.c_rsno }
                                       join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno
                                       join q3 in db.LG_MsGudangs on q.c_gdg equals q3.c_gdg
                                       from q4 in db.LG_Cusmas
                                          .Where(map => map.c_cusno == q1.c_cusno)
                                          .DefaultIfEmpty()
                                       from q5 in db.SCMS_MSOUTLET_CABANGs
                                          .Where(map2 => map2.c_outlet == q1.c_outlet && map2.c_cusno == q1.c_cusno)
                                          .DefaultIfEmpty()
                                       from q6 in db.SCMS_MSRETUR_REASONs
                                          .Where(map3 => map3.c_reason == q1.c_reason)
                                          .DefaultIfEmpty()
                                       where (q.l_delete == false || q.l_delete == null)
                                       select new
                                       {
                                           q1.c_gdg,
                                           q1.c_rsno,
                                           q1.c_iteno,
                                           q1.c_batch,
                                           q2.v_itnam,
                                           q2.v_undes,
                                           q3.v_gdgdesc,
                                           q1.n_gqty,
                                           q1.n_bqty,
                                           q1.v_ket,
                                           q1.c_cprno,
                                           q1.c_cusno,
                                           q4.v_cunam,
                                           q1.c_outlet,
                                           q5.v_outlet,
                                           q1.c_reason,
                                           q6.v_reason
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_RS_REPACK_DETAIL

                    case Constant.MODEL_QUERY_RS_REPACK_DETAIL:
                        {
                            var qry = (from q in db.LG_RSHes
                                       join q1 in db.LG_RSD1s on new { q.c_gdg, q.c_rsno } equals new { q1.c_gdg, q1.c_rsno }
                                       join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno
                                       join q3 in db.LG_MsGudangs on q.c_gdg equals q3.c_gdg
                                       from q4 in db.LG_Cusmas
                                          .Where(map => map.c_cusno == q1.c_cusno)
                                          .DefaultIfEmpty()
                                       from q5 in db.SCMS_MSOUTLET_CABANGs
                                          .Where(map2 => map2.c_outlet == q1.c_outlet && map2.c_cusno == q1.c_cusno)
                                          .DefaultIfEmpty()
                                       from q6 in db.SCMS_MSRETUR_REASONs
                                          .Where(map3 => map3.c_reason == q1.c_reason)
                                          .DefaultIfEmpty()
                                       where (q.l_delete == false || q.l_delete == null)
                                       select new
                                       {
                                           q1.c_gdg,
                                           q1.c_rsno,
                                           q1.c_iteno,
                                           q1.c_batch,
                                           q2.v_itnam,
                                           q2.v_undes,
                                           q3.v_gdgdesc,
                                           q1.n_gqty,
                                           q1.n_bqty,
                                           q1.v_ket,
                                           q1.c_cprno,
                                           q1.c_cusno,
                                           q4.v_cunam,
                                           q1.c_outlet,
                                           q5.v_outlet,
                                           q1.c_reason,
                                           q6.v_reason
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_CLAIM_REGULAR

                    case Constant.MODEL_QUERY_CLAIM_REGULAR:
                        {
                            var qry = (from q in db.LG_ClaimHs
                                       join q1 in db.LG_DatSups on q.c_nosup equals q1.c_nosup
                                       join q2 in db.MsTransDs on q.c_type equals q2.c_type
                                       join q3 in db.FA_Kurs on q.c_kurs equals q3.c_kurs into g
                                       from q3Sum in g.DefaultIfEmpty()
                                       where q2.c_notrans == "39"
                                       && q2.c_portal == '3' && (q.l_delete == null || q.l_delete == false)
                                       select new
                                       {
                                           q.c_claimno,
                                           q.d_claimdate,
                                           q.t_bulan,
                                           q.s_tahun,
                                           q.v_ket,
                                           q.n_bruto,
                                           q.n_disc,
                                           q.n_bilva,
                                           q1.v_nama,
                                           q.c_type,
                                           q3Sum.c_desc,
                                           q.c_kurs,
                                           n_top = q.n_top.Value == 0 ? 0 : q.n_top.Value,
                                           q.n_kurs,
                                           q.c_nosup
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);

                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_CLAIM_STT

                    case Constant.MODEL_QUERY_CLAIM_STT:
                        {
                            var qry = (from q in db.LG_ClaimHs
                                       join q1 in db.LG_DatSups on q.c_nosup equals q1.c_nosup
                                       join q2 in db.MsTransDs on q.c_type equals q2.c_type
                                       join q3 in db.FA_Kurs on q.c_kurs equals q3.c_kurs
                                       where q.c_type == "02" && q2.c_notrans == "39"
                                       && q2.c_portal == '3'
                                       select new
                                       {
                                           q.c_claimno,
                                           q.d_claimdate,
                                           q.t_bulan,
                                           q.s_tahun,
                                           q.n_bruto,
                                           q.n_disc,
                                           q.n_bilva,
                                           q.v_ket,
                                           q1.v_nama,
                                           q3.c_desc,
                                           q.c_kurs,
                                           n_top = q.n_top.Value == 0 ? 0 : q.n_top.Value,
                                           q.n_kurs,
                                           q.c_nosup
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);

                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_CLAIM_REGULAR_STT_DETAIL

                    case Constant.MODEL_QUERY_CLAIM_REGULAR_STT_DETAIL:
                        {
                            var qry = (from q in db.LG_ClaimD1s
                                       join q1 in db.FA_MasItms on q.c_iteno equals q1.c_iteno
                                       join q2 in db.LG_DatSups on q1.c_nosup equals q2.c_nosup
                                       select new
                                       {
                                           q.c_claimno,
                                           q.c_iteno,
                                           q.n_disc,
                                           q.n_salpri,
                                           q1.v_itnam,
                                           q.n_qty,
                                           n_net = (q.n_qty * q.n_salpri) - ((q.n_qty * q.n_salpri) * (q.n_disc / 100)),
                                           q2.c_nosup,
                                           q2.v_nama
                                       });

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_CLAIM_ACC_REGULAR

                    case Constant.MODEL_QUERY_CLAIM_ACC_REGULAR:
                        {
                            var qry = (from q in db.LG_ClaimAccHes
                                       join q1 in db.LG_DatSups on q.c_nosup equals q1.c_nosup
                                       select new
                                       {
                                           q.c_claimaccno,
                                           q.c_claimno,
                                           q.c_claimnoprinc,
                                           q.d_claimaccdate,
                                           q.c_nosup,
                                           q.d_claimdateprinc,
                                           q.l_delete,
                                           q1.v_nama,
                                           q.c_type,
                                           q.v_ket
                                       }).Distinct().AsQueryable();


                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_CLAIM_ACC_REGULAR_STT

                    case Constant.MODEL_QUERY_CLAIM_ACC_REGULAR_STT:
                        {
                            var qry = (from q in db.LG_ClaimAccHes
                                       join q1 in db.LG_DatSups on q.c_nosup equals q1.c_nosup
                                       where (q.l_delete == null || q.l_delete == false)
                                       && q.d_claimaccdate >= DateTime.Parse("2010-08-01")

                                       select new
                                       {
                                           q.c_claimaccno,
                                           q.c_claimno,
                                           q.c_claimnoprinc,
                                           q.d_claimaccdate,
                                           q.c_nosup,
                                           q.d_claimdateprinc,
                                           q.l_delete,
                                           q1.v_nama,
                                           q.c_type,
                                           q.v_ket
                                       }).Distinct().AsQueryable();


                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_CLAIM_ACC_REGULAR_STT_DETIL

                    case Constant.MODEL_QUERY_CLAIM_ACC_REGULAR_STT_DETIL:
                        {
                            var qry = (from q in db.LG_ClaimAccDs
                                       join q1 in db.LG_ClaimAccHes on q.c_claimaccno equals q1.c_claimaccno
                                       join q2 in db.FA_MasItms on q.c_iteno equals q2.c_iteno
                                       select new
                                       {
                                           q.c_claimaccno,
                                           q.n_qtyacc,
                                           q.n_qtytolak,
                                           q.n_sisa,
                                           q1.c_type,
                                           q.c_iteno,
                                           q2.v_itnam
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region Ekspedisi

                    case Constant.MODEL_QUERY_EKSPEDISIGRID_CABANG:
                        {
                            var qry = (from q in
                                           (from q in db.LG_ExpHs
                                            join q1 in db.LG_Cusmas on q.c_cusno equals q1.c_cusno
                                            join q2 in db.MsTransDs on q.c_type equals q2.c_type
                                            join q3 in db.LG_MsExps on q.c_exp equals q3.c_exp
                                            where q2.c_notrans == "02" && q2.c_portal == '3'
                                            select new
                                            {
                                                q.c_cusno,
                                                q1.v_cunam,
                                                q.c_expno,
                                                q.c_exp,
                                                q3.v_ket,
                                                q.c_resi,
                                                q.d_resi,
                                                q.l_delete
                                            })
                                       join q1 in db.LG_ExpCabHs on q.c_expno equals q1.c_expno into g
                                       from gq1 in g.DefaultIfEmpty()
                                       select new
                                       {
                                           q.c_cusno,
                                           q.v_cunam,
                                           q.c_expno,
                                           q.c_exp,
                                           q.v_ket,
                                           q.c_resi,
                                           q.d_resi,
                                           c_noexpcab = gq1.c_noexpcab == null ? string.Empty : gq1.c_noexpcab,
                                           d_cabang = gq1.d_cabang == null ? string.Empty : gq1.d_cabang,
                                           t_cabang = gq1.t_cabang == null ? string.Empty : gq1.t_cabang,
                                           l_status = gq1.l_status.HasValue ? gq1.l_status : false,
                                           q.l_delete
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_DOPRINSIPALGRID

                    case Constant.MODEL_QUERY_DOPRINSIPALGRID:
                        {
                            var qry = (from q in db.LG_DOPHs
                                       join q1 in db.LG_DatSups on q.c_nosup equals q1.c_nosup into q_1
                                       from qDS in q_1.DefaultIfEmpty()
                                       join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "02", c_type = q.c_via } equals new { q3.c_portal, q3.c_notrans, q3.c_type } into q_3
                                       from qVia in q_3.DefaultIfEmpty()
                                       join q4 in db.LG_RNHs on new { q.c_dono, q.c_nosup } equals new { q4.c_dono, c_nosup = q4.c_from } into q_4
                                       from qRn in q_4.DefaultIfEmpty()
                                       where q.c_plphar == null 
                                       select new
                                       {
                                           q.c_nosup,
                                           v_sup_name = qDS.v_nama,
                                           q.c_dono,
                                           q.d_dodate,
                                           q.d_fjno,
                                           q.d_fjdate,
                                           q.c_cab,
                                           q.c_via,
                                           v_via_kirim = qVia.v_ket,
                                           q.c_taxno,
                                           q.l_status,
                                           qRn.c_rnno,
                                           qRn.d_rndate
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_DOPRINSIPALGRIDDETAIL

                    case Constant.MODEL_QUERY_DOPRINSIPALGRIDDETAIL:
                        {
                            string supl = (parameters.ContainsKey("nosup") ? (string)((Functionals.ParameterParser)parameters["nosup"]).Value : string.Empty);
                            string dono = (parameters.ContainsKey("nodo") ? (string)((Functionals.ParameterParser)parameters["nodo"]).Value : string.Empty);

                            var qry = (from q in db.LG_DOPDs
                                       join q1 in db.FA_MasItms on q.c_iteno equals q1.c_iteno into q_1
                                       from qItm in q_1.DefaultIfEmpty()
                                       join q2 in db.MsTransDs on new { c_portal = '3', c_notrans = "43", q.c_type } equals new { q2.c_portal, q2.c_notrans, q2.c_type } into q_2
                                       from qTipe in q_2.DefaultIfEmpty()
                                       where (q.c_nosup == supl) && (q.c_dono == dono)
                                       select new
                                       {
                                           q.c_iteno,
                                           qItm.v_itnam,
                                           qItm.v_undes,
                                           q.c_type,
                                           c_type_ket = qTipe.v_ket,
                                           q.c_itenopri,
                                           q.c_pono,
                                           q.n_qty,
                                           q.c_batch,
                                           q.d_expired,
                                           q.n_disc,
                                           q.l_claim,
                                           q.l_pending,
                                           q.n_qty_sisa,
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_WP_LOGISTIK

                    case Constant.MODEL_QUERY_WP_LOGISTIK:
                        {
                            string sTipe = (parameters.ContainsKey("c_type") ? (string)((Functionals.ParameterParser)parameters["c_type"]).Value : string.Empty);
                            char gdg = (parameters.ContainsKey("c_gdg") ? (char)((Functionals.ParameterParser)parameters["c_gdg"]).Value : '?');
                            string sModeDay = (parameters.ContainsKey("c_modeDay") ? (string)((Functionals.ParameterParser)parameters["c_modeDay"]).Value : string.Empty);

                            DateTime date = DateTime.Today;

                            if (sTipe.Equals("01"))
                            {
                                #region 01

                                switch (sModeDay)
                                {
                                    case "01":
                                        {
                                            //sDataWP = (from q in db.LG_WPLogistiks
                                            //           where q.c_type == sTipe && q.c_gdg == gdg
                                            //           select q.c_notrans).ToList();

                                            var qry = (from q in db.LG_PLHs
                                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg
                                                       where SqlMethods.DateDiffMonth(q.d_pldate, date) <= 0
                                                       && (q.l_wpppic == false || q.l_wpppic == null)
                                                       //!sDataWP.Contains(q.c_plno)
                                                       select new
                                                       {
                                                           q1.v_gdgdesc,
                                                           q.c_gdg,
                                                           c_notrans = q.c_plno,
                                                           q.c_type,
                                                           q.d_entry,
                                                           q.d_pldate,
                                                           l_new = true,
                                                       }).AsQueryable();

                                            if ((parameters != null) && (parameters.Count > 0))
                                            {
                                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                                {
                                                    if (kvp.Value.IsCondition)
                                                    {
                                                        if (kvp.Value.IsLike)
                                                        {
                                                            paternLike = kvp.Value.Value.ToString();
                                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                                        }
                                                        else
                                                        {
                                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                                        }
                                                    }
                                                }
                                            }

                                            Logger.WriteLine(qry.Provider.ToString());

                                            nCount = qry.Count();

                                            if (nCount > 0)
                                            {
                                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                                {
                                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                                }

                                                if ((limit == -1) || allQuery)
                                                {
                                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                                }
                                                else
                                                {
                                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                                }
                                            }

                                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                                        }
                                        break;
                                    case "02":
                                        {

                                            var qry = (from q in db.LG_PLHs
                                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg
                                                       where SqlMethods.DateDiffMonth(q.d_pldate, date) == 1
                                                       && (q.l_wpppic == false || q.l_wpppic == null)
                                                       select new
                                                       {
                                                           q1.v_gdgdesc,
                                                           q.c_gdg,
                                                           c_notrans = q.c_plno,
                                                           q.c_type,
                                                           q.d_entry,
                                                           q.d_pldate,
                                                           l_new = true,
                                                       }).AsQueryable();

                                            if ((parameters != null) && (parameters.Count > 0))
                                            {
                                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                                {
                                                    if (kvp.Value.IsCondition)
                                                    {
                                                        if (kvp.Value.IsLike)
                                                        {
                                                            paternLike = kvp.Value.Value.ToString();
                                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                                        }
                                                        else
                                                        {
                                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                                        }
                                                    }
                                                }
                                            }

                                            Logger.WriteLine(qry.Provider.ToString());

                                            nCount = qry.Count();

                                            if (nCount > 0)
                                            {
                                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                                {
                                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                                }

                                                if ((limit == -1) || allQuery)
                                                {
                                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                                }
                                                else
                                                {
                                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                                }
                                            }

                                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                                        }
                                        break;
                                    default:
                                        {
                                            var qry = (from q in db.LG_PLHs
                                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg
                                                       where SqlMethods.DateDiffMonth(q.d_pldate, date) > 1
                                                       && (q.l_wpppic == false || q.l_wpppic == null)
                                                       select new
                                                       {
                                                           q1.v_gdgdesc,
                                                           q.c_gdg,
                                                           c_notrans = q.c_plno,
                                                           q.c_type,
                                                           q.d_entry,
                                                           q.d_pldate,
                                                           l_new = true,
                                                       }).AsQueryable();

                                            if ((parameters != null) && (parameters.Count > 0))
                                            {
                                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                                {
                                                    if (kvp.Value.IsCondition)
                                                    {
                                                        if (kvp.Value.IsLike)
                                                        {
                                                            paternLike = kvp.Value.Value.ToString();
                                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                                        }
                                                        else
                                                        {
                                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                                        }
                                                    }
                                                }
                                            }

                                            Logger.WriteLine(qry.Provider.ToString());

                                            nCount = qry.Count();

                                            if (nCount > 0)
                                            {
                                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                                {
                                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                                }

                                                if ((limit == -1) || allQuery)
                                                {
                                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                                }
                                                else
                                                {
                                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                                }
                                            }

                                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                                        }
                                        break;
                                }

                                #endregion
                            }
                            else if (sTipe.Equals("02"))
                            {
                                #region 02

                                switch (sModeDay)
                                {
                                    case "01":
                                        {

                                            var qry = (from q in db.LG_DOHs
                                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg
                                                       where SqlMethods.DateDiffMonth(q.d_dodate, date) <= 0
                                                       && (q.l_wpdc == false || q.l_wpdc == null)
                                                       select new
                                                       {
                                                           q1.v_gdgdesc,
                                                           q.c_gdg,
                                                           c_notrans = q.c_dono,
                                                           q.c_type,
                                                           q.d_entry,
                                                           d_pldate = q.d_dodate,
                                                           l_new = true,
                                                       }).AsQueryable();

                                            if ((parameters != null) && (parameters.Count > 0))
                                            {
                                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                                {
                                                    if (kvp.Value.IsCondition)
                                                    {
                                                        if (kvp.Value.IsLike)
                                                        {
                                                            paternLike = kvp.Value.Value.ToString();
                                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                                        }
                                                        else
                                                        {
                                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                                        }
                                                    }
                                                }
                                            }

                                            Logger.WriteLine(qry.Provider.ToString());

                                            nCount = qry.Count();

                                            if (nCount > 0)
                                            {
                                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                                {
                                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                                }

                                                if ((limit == -1) || allQuery)
                                                {
                                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                                }
                                                else
                                                {
                                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                                }
                                            }

                                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                                        }
                                        break;
                                    case "02":
                                        {

                                            var qry = (from q in db.LG_DOHs
                                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg
                                                       where SqlMethods.DateDiffMonth(q.d_dodate, date) == 1
                                                       && (q.l_wpdc == false || q.l_wpdc == null)
                                                       select new
                                                       {
                                                           q1.v_gdgdesc,
                                                           q.c_gdg,
                                                           c_notrans = q.c_dono,
                                                           q.c_type,
                                                           q.d_entry,
                                                           d_pldate = q.d_dodate,
                                                           l_new = true,
                                                       }).AsQueryable();

                                            if ((parameters != null) && (parameters.Count > 0))
                                            {
                                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                                {
                                                    if (kvp.Value.IsCondition)
                                                    {
                                                        if (kvp.Value.IsLike)
                                                        {
                                                            paternLike = kvp.Value.Value.ToString();
                                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                                        }
                                                        else
                                                        {
                                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                                        }
                                                    }
                                                }
                                            }

                                            Logger.WriteLine(qry.Provider.ToString());

                                            nCount = qry.Count();

                                            if (nCount > 0)
                                            {
                                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                                {
                                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                                }

                                                if ((limit == -1) || allQuery)
                                                {
                                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                                }
                                                else
                                                {
                                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                                }
                                            }

                                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                                        }
                                        break;
                                    default:
                                        {
                                            var qry = (from q in db.LG_DOHs
                                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg
                                                       where SqlMethods.DateDiffMonth(q.d_dodate, date) > 1
                                                       && (q.l_wpdc == false || q.l_wpdc == null)
                                                       select new
                                                       {
                                                           q1.v_gdgdesc,
                                                           q.c_gdg,
                                                           c_notrans = q.c_dono,
                                                           q.c_type,
                                                           q.d_entry,
                                                           d_pldate = q.d_dodate,
                                                           l_new = true,
                                                       }).AsQueryable();

                                            if ((parameters != null) && (parameters.Count > 0))
                                            {
                                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                                {
                                                    if (kvp.Value.IsCondition)
                                                    {
                                                        if (kvp.Value.IsLike)
                                                        {
                                                            paternLike = kvp.Value.Value.ToString();
                                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                                        }
                                                        else
                                                        {
                                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                                        }
                                                    }
                                                }
                                            }

                                            Logger.WriteLine(qry.Provider.ToString());

                                            nCount = qry.Count();

                                            if (nCount > 0)
                                            {
                                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                                {
                                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                                }

                                                if ((limit == -1) || allQuery)
                                                {
                                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                                }
                                                else
                                                {
                                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                                }
                                            }

                                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                                        }
                                        break;
                                }

                                #endregion
                            }
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_WP_LOGISTIK_GRID

                    case Constant.MODEL_QUERY_WP_LOGISTIK_GRID:
                        {
                            string sTipe = (parameters.ContainsKey("c_type") ? (string)((Functionals.ParameterParser)parameters["c_type"]).Value : string.Empty);
                            char gdg = (parameters.ContainsKey("c_gdg") ? (char)((Functionals.ParameterParser)parameters["c_gdg"]).Value : '?');

                            var qry = (from q in db.LG_WPLogistiks
                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg
                                       where q.c_gdg == gdg && q.c_type == sTipe
                                       select new
                                       {
                                           q1.v_gdgdesc,
                                           q.c_gdg,
                                           c_notrans = q.c_notrans,
                                           q.c_type,
                                           q.d_entry,
                                           l_new = true,
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_WP_SERAHTERIMA

                    case Constant.MODEL_QUERY_WP_SERAHTERIMA:
                        {
                            //string sTipe = (parameters.ContainsKey("c_type") ? (char)((Functionals.ParameterParser)parameters["c_type"]).Value : string.Empty);
                            //char gdg = (parameters.ContainsKey("c_gdg") ? (char)((Functionals.ParameterParser)parameters["c_gdg"]).Value : '?');

                            var qry = (from q in db.SCMS_STHs
                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg
                                       //join q2 in db.SCMS_STDs on q.c_nodoc equals q2.c_nodoc
                                       //join q3 in db.LG_CusmasCabs on q2.c_cusno equals q3.c_cusno
                                       select new
                                       {
                                           q1.v_gdgdesc,
                                           q.c_gdg,
                                           q.c_nodoc,
                                           q.c_type,
                                           q.d_date,
                                           q.d_entry,
                                           q.c_entry,
                                           q.v_entry,
                                           q.c_give,
                                           q.v_give,
                                           q.n_koli,
                                           q.n_receh,
                                           q.n_kolireceh,
                                           q.n_berat,
                                           q.n_vol,
                                           q.c_resi,
                                           l_new = true,
                                           //q3.v_cunam,
                                           //q3.c_cusno
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_WP_SERAHTERIMA_DETAIL

                    case Constant.MODEL_QUERY_WP_SERAHTERIMA_DETAIL:
                        {
                            //string sTipe = (parameters.ContainsKey("c_type") ? (char)((Functionals.ParameterParser)parameters["c_type"]).Value : string.Empty);
                            //char gdg = (parameters.ContainsKey("c_gdg") ? (char)((Functionals.ParameterParser)parameters["c_gdg"]).Value : '?');

                            var qry = (from q in db.SCMS_STDs
                                       select new
                                       {
                                           q.c_nodoc,
                                           q.c_no,
                                           //q.n_koli,
                                           //q.n_berat,
                                           l_new = false,
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_WP_SERAHTERIMA_TRANSPORTASI_DO

                    case Constant.MODEL_QUERY_WP_SERAHTERIMA_TRANSPORTASI_DO:
                        {
                            var qry = (from q in db.LG_DOHs
                                       select new
                                       {
                                           q.c_dono,
                                           q.n_karton,
                                           q.n_receh
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_WP_SERAHTERIMA_TRANSPORTASI_SJ

                    case Constant.MODEL_QUERY_WP_SERAHTERIMA_TRANSPORTASI_SJ:
                        {
                            var qry = (from q in db.LG_SJHs
                                       select new
                                       {
                                           q.c_sjno,
                                           q.n_karton,
                                           q.n_receh
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_WP_SERAHTERIMA_TRANSPORTASI_GRIDDETAIL

                    case Constant.MODEL_QUERY_WP_SERAHTERIMA_TRANSPORTASI_GRIDDETAIL:
                        {
                            //string sTipe = (parameters.ContainsKey("c_type") ? (char)((Functionals.ParameterParser)parameters["c_type"]).Value : string.Empty);
                            //char gdg = (parameters.ContainsKey("c_gdg") ? (char)((Functionals.ParameterParser)parameters["c_gdg"]).Value : '?');

                            //Indra Monitoring Process 20180523FM
                            string sTipe = (parameters.ContainsKey("Tipe") ? (string)((Functionals.ParameterParser)parameters["Tipe"]).Value : "0");

                            var qrydo = (from q in db.SCMS_STDs
                                         join q1 in db.LG_DOHs on q.c_no equals q1.c_dono
                                         join q2 in db.MsTransDs on new { c_portal = '3', c_notrans = "66", c_type = q1.c_editkoli } equals new { q2.c_portal, q2.c_notrans, q2.c_type } into q_2
                                         from q2_1 in q_2.DefaultIfEmpty()
                                         //Indra Monitoring Process 20180523FM
                                         join q3 in db.LG_PLD1s on q1.c_plno equals q3.c_plno
                                         join q4 in db.LG_SPHs on q3.c_spno equals q4.c_spno
                                         select new
                                         {
                                             q.c_nodoc,
                                             q.c_no,
                                             q1.n_karton,
                                             q1.n_receh,
                                             n_hiddenkarton = q1.n_karton,
                                             n_hiddenreceh = q1.n_receh,
                                             c_type_editkoli = q1.c_editkoli,
                                             v_ket_editkoli = q2_1.v_ket,
                                             //q.n_koli,
                                             //q.n_berat,
                                             l_new = false,
                                             c_sp       = sTipe == "1" ? q4.c_sp : "",   //Indra Monitoring Process 20180523FM
                                             c_spno     = sTipe == "1" ? q4.c_spno : "", //Indra Monitoring Process 20180523FM
                                             d_entry    = sTipe == "1" ? q4.d_entry : DateTime.Now//Indra Monitoring Process 20180523FM
                                         }).AsQueryable();

                            var qrysj = (from q in db.SCMS_STDs
                                         join q1 in db.LG_SJHs on q.c_no equals q1.c_sjno
                                         join q2 in db.MsTransDs on new { c_portal = '3', c_notrans = "66", c_type = q1.c_editkoli } equals new { q2.c_portal, q2.c_notrans, q2.c_type } into q_2
                                         from q2_1 in q_2.DefaultIfEmpty()
                                         //Indra Monitoring Process 20180523FM
                                         join q3 in db.LG_SJD1s on q1.c_sjno equals q3.c_sjno
                                         //Indra 20193018 penambahan SJ ke gudang ulujami
                                         //join q4 in db.LG_SPGHs on q3.c_spgno equals q4.c_spgno
                                         join q_2 in db.LG_SPGHs on q3.c_spgno equals q_2.c_spgno into q5
                                         from q4 in q5.DefaultIfEmpty()
                                         select new
                                         {
                                             q.c_nodoc,
                                             q.c_no,
                                             q1.n_karton,
                                             q1.n_receh,
                                             n_hiddenkarton = q1.n_karton,
                                             n_hiddenreceh = q1.n_receh,
                                             c_type_editkoli = q1.c_editkoli,
                                             v_ket_editkoli = q2_1.v_ket,
                                             //q.n_koli,
                                             //q.n_berat,
                                             l_new = false,
                                             c_sp = "",   //Indra Monitoring Process 20180523FM
                                             c_spno = sTipe == "1" ?  q4.c_spgno : "", //Indra Monitoring Process 20180523FM
                                             d_entry = sTipe == "1" ? q4.d_entry : DateTime.Now //Indra Monitoring Process 20180523FM
                                         }).AsQueryable();

                            //Indra Monitoring Process 20180523FM
                            //var qry = qrydo.Union(qrysj).AsQueryable();
                            var qry = qrydo.Union(qrysj).AsQueryable().Distinct();

                            //var tes = qry.ToList();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_WP_SERAHTERIMA_DETAIL_EKSPEDISI

                    case Constant.MODEL_QUERY_WP_SERAHTERIMA_DETAIL_EKSPEDISI:
                        {
                            string sNo = (parameters.ContainsKey("c_no") ? (String)((Functionals.ParameterParser)parameters["c_no"]).Value : string.Empty);
                            string cusno = (parameters.ContainsKey("cusno") ? (String)((Functionals.ParameterParser)parameters["cusno"]).Value : string.Empty);

                            var qry = (from q in db.SCMS_STDs
                                       join q1 in db.SCMS_STHs on q.c_nodoc equals q1.c_nodoc
                                       where q.c_no == sNo && q1.c_type == "04" && (string.IsNullOrEmpty(cusno) ? true : (q.c_cusno == cusno))
                                       select new
                                       {
                                           c_dono = q.c_no,
                                           n_koli = (q1.n_koli.HasValue ? q1.n_koli.Value : 0) + (q1.n_kolireceh.HasValue ? q1.n_kolireceh : 0),
                                           n_receh = q1.n_receh.HasValue ? q1.n_receh.Value : 0 ,
                                           n_berat = q1.n_berat.HasValue ? q1.n_berat.Value : 0,
                                           n_vol = q1.n_vol.HasValue ? q1.n_vol.Value : 0,
                                           q.c_nodoc
                                       }).AsQueryable();


                            if (sNo.Substring(0, 2) == "WP")
                            {
                                var qryDO = (from q in db.SCMS_STDs
                                       join q1 in db.SCMS_STHs on q.c_nodoc equals q1.c_nodoc
                                       join q2 in db.LG_DOHs on q.c_no equals q2.c_dono 
                                       where q.c_nodoc == sNo && q1.c_type == "04" 
                                       && (string.IsNullOrEmpty(cusno) ? true : (q.c_cusno == cusno))
                                       && q2.l_status == false
                                       select new
                                       {
                                           c_dono = q.c_no,
                                           n_koli = (q1.n_koli.HasValue ? q1.n_koli.Value : 0) + (q1.n_kolireceh.HasValue ? q1.n_kolireceh : 0),
                                           n_receh = q1.n_receh.HasValue ? q1.n_receh.Value : 0,
                                           n_berat = q1.n_berat.HasValue ? q1.n_berat.Value : 0,
                                           n_vol = q1.n_vol.HasValue ? q1.n_vol.Value : 0,
                                           q.c_nodoc,
                                       }).AsQueryable();


                                var qrySJ = (from q in db.SCMS_STDs
                                             join q1 in db.SCMS_STHs on q.c_nodoc equals q1.c_nodoc
                                             join q2 in db.LG_SJHs on q.c_no equals q2.c_sjno
                                             where q.c_nodoc == sNo && q1.c_type == "04"
                                             && (string.IsNullOrEmpty(cusno) ? true : (q.c_cusno == cusno))
                                             && q2.l_confirm == true && q2.l_print == true && q2.l_exp == false
                                             select new
                                             {
                                                 c_dono = q.c_no,
                                                 n_koli = (q1.n_koli.HasValue ? q1.n_koli.Value : 0) + (q1.n_kolireceh.HasValue ? q1.n_kolireceh : 0),
                                                 n_receh = q1.n_receh.HasValue ? q1.n_receh.Value : 0,
                                                 n_berat = q1.n_berat.HasValue ? q1.n_berat.Value : 0,
                                                 n_vol = q1.n_vol.HasValue ? q1.n_vol.Value : 0,
                                                 q.c_nodoc,
                                             }).AsQueryable();

                                qry = qryDO.Union(qrySJ).AsQueryable();
                            }

                            //var earq = qry.ToList();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_WP_SERAHTERIMA_SEARCH

                    case Constant.MODEL_QUERY_WP_SERAHTERIMA_SEARCH:
                        {
                            string dono = (parameters.ContainsKey("c_no") ? (String)((Functionals.ParameterParser)parameters["c_no"]).Value : string.Empty);
                            string plno = (parameters.ContainsKey("c_plno") ? (String)((Functionals.ParameterParser)parameters["c_plno"]).Value : string.Empty);
                            string stno = (parameters.ContainsKey("c_nodoc") ? (String)((Functionals.ParameterParser)parameters["c_nodoc"]).Value : string.Empty);

                            var qryDO = (from q in db.SCMS_STDs
                                         join q1 in db.SCMS_STHs on q.c_nodoc equals q1.c_nodoc
                                         join q2 in db.LG_Cusmas on q.c_cusno equals q2.c_cusno
                                         join q4 in db.LG_DOHs on q.c_no equals q4.c_dono
                                         join q5 in
                                             (from sq in db.SCMS_STHs
                                              join sq1 in db.SCMS_STDs on sq.c_nodoc equals sq1.c_nodoc
                                              where sq.c_type == "02"
                                              select new
                                              {
                                                  sq1.c_no,
                                                  c_picker = sq.c_give,
                                                  v_picker = sq.v_give
                                              }) on q4.c_plno equals q5.c_no
                                         join q6 in
                                             (from sq in db.SCMS_STHs
                                              join sq1 in db.SCMS_STDs on sq.c_nodoc equals sq1.c_nodoc
                                              where sq.c_type == "03"
                                              select new
                                              {
                                                  sq1.c_no,
                                                  c_checker = sq.c_give,
                                                  v_checker = sq.v_give
                                              }) on q4.c_plno equals q6.c_no
                                         where q1.c_type == "04"
                                          && (dono.Length > 0 ? q4.c_dono.Contains(dono) : true)
                                          && (plno.Length > 0 ? q4.c_plno.Contains(plno) : true)
                                          && (stno.Length > 0 ? q1.c_nodoc.Contains(stno) : true)
                                          && (SqlMethods.DateDiffMonth(q1.d_date, DateTime.Now.Date) < 7)
                                         select new SearchingST
                                         {
                                             c_gdg = q1.c_gdg,
                                             c_no = q.c_no,
                                             c_plno = q4.c_plno,
                                             c_nodoc = q.c_nodoc,
                                             d_entry = q1.d_entry.HasValue ? q1.d_entry.Value : DateTime.Today.Date,
                                             c_cusno = q.c_cusno,
                                             v_cunam = q2.v_cunam,
                                             c_picker = q5.c_picker,
                                             v_picker = q5.v_picker,
                                             c_checker = q6.c_checker,
                                             v_checker = q6.v_checker,
                                             c_packer = q1.c_give,
                                             v_packer = q1.v_give
                                         }).AsQueryable();

                            var qrySJ = (from q in db.SCMS_STDs
                                         join q1 in db.SCMS_STHs on q.c_nodoc equals q1.c_nodoc
                                         join q4 in db.LG_SJHs on q.c_no equals q4.c_sjno
                                         join q2 in db.LG_MsGudangs on q4.c_gdg2 equals q2.c_gdg
                                         join q5 in
                                             (from sq in db.SCMS_STHs
                                              join sq1 in db.SCMS_STDs on sq.c_nodoc equals sq1.c_nodoc
                                              where sq.c_type == "02"
                                              select new
                                              {
                                                  sq1.c_no,
                                                  c_picker = sq.c_give,
                                                  v_picker = sq.v_give
                                              }) on q4.c_sjno equals q5.c_no
                                         join q6 in
                                             (from sq in db.SCMS_STHs
                                              join sq1 in db.SCMS_STDs on sq.c_nodoc equals sq1.c_nodoc
                                              where sq.c_type == "03"
                                              select new
                                              {
                                                  sq1.c_no,
                                                  c_checker = sq.c_give,
                                                  v_checker = sq.v_give
                                              }) on q4.c_sjno equals q6.c_no
                                         where q1.c_type == "04"
                                          && (dono.Length > 0 ? q4.c_sjno.Contains(dono) : true)
                                          && (plno.Length > 0 ? q4.c_sjno.Contains(plno) : true)
                                          && (stno.Length > 0 ? q1.c_nodoc.Contains(stno) : true)
                                          && (SqlMethods.DateDiffMonth(q1.d_date, DateTime.Now.Date) < 7)
                                         select new SearchingST
                                         {
                                             c_gdg = q1.c_gdg,
                                             c_no = q.c_no,
                                             c_plno = q4.c_sjno,
                                             c_nodoc = q.c_nodoc,
                                             d_entry = q1.d_entry.HasValue ? q1.d_entry.Value : DateTime.Today.Date,
                                             c_cusno = q.c_cusno,
                                             v_cunam = q2.v_gdgdesc,
                                             c_picker = q5.c_picker,
                                             v_picker = q5.v_picker,
                                             c_checker = q6.c_checker,
                                             v_checker = q6.v_checker,
                                             c_packer = q1.c_give,
                                             v_packer = q1.v_give
                                         }).AsQueryable();

                            var qry = qryDO.Union(qrySJ).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_CALC_BIAYA_EKSPEDISI

                    case Constant.MODEL_QUERY_CALC_BIAYA_EKSPEDISI:   //calc totalbiaya utk ekspedisi gudang-cabang & antar gudang
                        {
                            string exp = (parameters.ContainsKey("exp") ? (String)((Functionals.ParameterParser)parameters["exp"]).Value : string.Empty);
                            string cusno = (parameters.ContainsKey("cusno") ? (String)((Functionals.ParameterParser)parameters["cusno"]).Value : string.Empty);
                            string tipebiaya = (parameters.ContainsKey("tipebiaya") ? (String)((Functionals.ParameterParser)parameters["tipebiaya"]).Value : string.Empty);
                            string via = (parameters.ContainsKey("via") ? (String)((Functionals.ParameterParser)parameters["via"]).Value : string.Empty);
                            char gdg = (parameters.ContainsKey("gdg") ? (char)((Functionals.ParameterParser)parameters["gdg"]).Value : '?');
                            string datestr = (parameters.ContainsKey("date") ? (String)((Functionals.ParameterParser)parameters["date"]).Value : string.Empty);
                            string[] date = datestr.Split('/',' ');
                            DateTime dt = Convert.ToDateTime(date[2]+"/"+date[0]+"/"+date[1]);
                            string carakirim = (parameters.ContainsKey("carakirim") ? (String)((Functionals.ParameterParser)parameters["carakirim"]).Value : string.Empty);
                            //DateTime dt2 = Convert.ToDateTime(datestr);

                            var defec = (from q in db.LG_MsExpCostEsts
                                         where q.c_exp == exp
                                        && q.c_cusno == cusno
                                        && q.c_type == tipebiaya
                                        && q.c_gdg == gdg
                                        && q.d_effective <= dt
                                        //&& q.d_effective <= datestr
                                        && (q.l_delete == false || q.l_delete == null)
                                         select q.d_effective).Max();

                            if (via == "03" || via == "10")
                            {
                                defec = (from q in db.LG_MsExpCostEsts
                                         where q.c_exp == exp
                                        && q.c_cusno == cusno
                                        && q.c_type == tipebiaya
                                        && q.c_gdg == gdg
                                        && q.d_effective <= dt
                                        //&& q.d_effective <= datestr
                                        && (q.l_delete == false || q.l_delete == null)
                                        && q.n_icepack > 0
                                         select q.d_effective).Max();
                            }

                            DateTime datedefec = Convert.ToDateTime(defec);
                            string defecdate = datedefec.ToString();
                            string[] ddate = defecdate.Split('/',' ');
                            //DateTime ddt = Convert.ToDateTime(ddate[2] + "-" + ddate[1] + "-" + ddate[0]);

                            var qry = (from q in db.LG_MsExpCostEsts
                                       where q.c_exp == exp
                                       && q.c_cusno == cusno
                                       && q.c_type == tipebiaya
                                       && q.d_effective == defec
                                       && q.c_gdg == gdg
                                       && ((via == "01" && q.n_udara > 0)
                                           || (via == "02" && q.n_daratlaut > 0)
                                           || (via == "03" && q.n_icepack > 0)
                                           || (via == "04" && q.n_cdd > 0)
                                           || (via == "05" && q.n_fuso > 0)
                                           || (via == "06" && q.n_tronton > 0)
                                           || (via == "07" && q.n_container > 0)
                                           || (via == "08" && q.n_cde > 0)
                                           || (via == "09" && q.n_l300 > 0)
                                           || (via == "10" && q.n_icepack > 0)
                                           )
                                       select new
                                       {
                                           q.n_udara,
                                           q.n_daratlaut,
                                           q.n_icepack,
                                           q.n_cdd,
                                           q.n_fuso,
                                           q.n_tronton,
                                           q.n_container,
                                           q.n_cde,
                                           q.n_l300,
                                           q.n_expmin
                                       }).AsQueryable();


                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            //if (carakirim == "04")
                            //{
                            //    qry = (from q in db.LG_MS_BIAYA_EKSPEDISIs
                            //           where q.kd_transportasi == exp && q.kd_tujuan == cusno && q.kd_asal == Convert.ToString(gdg)
                            //           select new biayaekspedisi
                            //           {
                            //               n_udara = q.Harga.Value,
                            //               n_daratlaut = q.Harga.Value,
                            //               n_icepack = q.Harga.Value,
                            //               n_cdd = q.Harga.Value,
                            //               n_fuso = q.Harga.Value,
                            //               n_tronton = q.Harga.Value,
                            //               n_container = q.Harga.Value,
                            //               n_cde = q.Harga.Value,
                            //               n_l300 = q.Harga.Value,
                            //               n_expmin = q.Harga.Value
                            //           }).ToList();
                            //}

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_INVOICEEKSPEDISIGRIDEKSTERNAL

                    case Constant.MODEL_QUERY_INVOICEEKSPEDISIGRIDEKSTERNAL:
                        {
                            var qry = (from q in db.LG_IEHs
                                       join q1 in db.LG_MsExps on q.c_exp equals q1.c_exp
                                       join q2 in db.LG_MsGudangs on q.c_gdg equals q2.c_gdg
                                       where q.c_exp != "00"
                                       select new
                                       {
                                           q.c_gdg,
                                           q2.v_gdgdesc,
                                           q.c_exp,
                                           q.c_ieno,
                                           q.c_ie,
                                           q.d_iedate,
                                           q.n_bilva_faktur,
                                           q.n_top,
                                           q.v_ket,
                                           q.n_awalkm,
                                           q.n_akhirkm,
                                           q.n_materai,
                                           q.n_bruto,
                                           q.n_disc,
                                           q.n_tax,
                                           q.n_totaltax,
                                           q.n_totalbiayalain,
                                           q.n_net,
                                           q.n_netvol,
                                           q.c_entry,
                                           q.d_entry,
                                           q.c_update,
                                           q.d_update,
                                           q.l_delete,
                                           v_nama_exp = q1.v_ket,
                                           q.l_solar,
                                           q.n_bbmliter,
                                           q.n_bbmprice,
                                           q.n_tol
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }

                        break;

                    #endregion

                    #region MODEL_QUERY_INVOICEEKSPEDISIGRIDINTERNAL

                    case Constant.MODEL_QUERY_INVOICEEKSPEDISIGRIDINTERNAL:
                        {
                            var qry = (from q in db.LG_IEHs
                                       join q1 in db.LG_MsExps on q.c_exp equals q1.c_exp
                                       join q2 in db.LG_MsGudangs on q.c_gdg equals q2.c_gdg
                                       join q3 in db.MsTransDs on q.c_type equals q3.c_type
                                       where q.c_exp == "00" &&
                                            (q3.c_notrans == "71") && (q3.c_portal == '5')

                                       select new
                                       {
                                           q.c_gdg,
                                           q2.v_gdgdesc,
                                           q.c_exp,
                                           q.c_ieno,
                                           q.c_ie,
                                           q.d_iedate,
                                           q.n_bilva_faktur,
                                           q.n_top,
                                           q.v_ket,
                                           q.n_awalkm,
                                           q.n_akhirkm,
                                           q.n_materai,
                                           q.n_bruto,
                                           q.n_disc,
                                           //q.c_claimno,
                                           q.n_tax,
                                           q.n_totaltax,
                                           q.n_totalbiayalain,
                                           q.n_net,
                                           q.n_netvol,
                                           q.c_entry,
                                           q.d_entry,
                                           q.c_update,
                                           q.d_update,
                                           q.l_delete,
                                           v_nama_exp = q1.v_ket,
                                           q.l_solar,
                                           q.n_bbmliter,
                                           q.n_bbmprice,
                                           q.n_tol,
                                           q.c_type, //Indra 20170426
                                           v_tipe_bbm = q3.v_ket  //Indra 20170426
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }

                        break;

                    #endregion

                    #region MODEL_QUERY_INVOICEEKSPEDISIGRID_DETAIL

                    case Constant.MODEL_QUERY_INVOICEEKSPEDISIGRID_DETAIL:
                        {
                            string ieNo = (parameters.ContainsKey("ieno") ? (string)((Functionals.ParameterParser)parameters["ieno"]).Value : string.Empty);

                            var cabang = (from q in db.LG_Cusmas
                                          where q.l_cabang == true || (q.c_cusno == "0176" || q.c_cusno == "0188")
                                          select new
                                          {
                                              q.c_cusno,
                                              q.v_cunam
                                          }).AsQueryable();
                            var qerygdg = (from qq in db.LG_MsGudangs
                                           where qq.l_aktif == true
                                           select new
                                           {
                                               c_cusno = qq.c_gdg.ToString(),
                                               v_cunam = qq.v_gdgdesc
                                           }
                                           ).AsQueryable();

                            var gdgcab = cabang.Union(qerygdg).AsQueryable();

                            var qry = (from q in db.LG_IED1s
                                       join q1 in gdgcab on q.c_cusno equals q1.c_cusno
                                       join q2 in db.MsTransDs on new { c_portal = '3', c_notrans = "16", c_type = q.c_via } equals new { q2.c_portal, q2.c_notrans, q2.c_type }
                                       join q3 in db.MsTransDs on new { c_portal = '9', c_notrans = "005", c_type = q.c_exptype } equals new { q3.c_portal, q3.c_notrans, q3.c_type }
                                       where q.c_ieno == ieNo
                                       select new
                                       {
                                           q.c_ieno,
                                           q.c_resi,
                                           q.c_expno,
                                           q.c_cusno,
                                           q1.v_cunam,
                                           q.n_koli,
                                           q.n_berat,
                                           q.n_vol,
                                           q.n_tonase,
                                           q.n_biaya,
                                           q.n_expmin,
                                           q.c_exptype,
                                           v_ket_exptype = q3.v_ket,
                                           q.c_via,
                                           v_ket_via = q2.v_ket,
                                           q.n_biayalain,
                                           q.n_totalbiaya,
                                           q.i_urut
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_GRID_RETURN_DO

                    case Constant.MODEL_QUERY_GRID_RETURN_DO:
                        {
                            char gdg = (parameters.ContainsKey("gdg") ? (char)((Functionals.ParameterParser)parameters["gdg"]).Value : '?');

                            var qry = (from q in db.LG_ReturnDOs
                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg
                                       where q.c_gdg == gdg
                                       select new
                                       {
                                           q.c_gdg,
                                           q1.v_gdgdesc,
                                           q.c_dono,
                                           q.d_terima,
                                           q.d_balik
                                       }).Distinct().AsQueryable();

                            var tes = qry.ToList();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_INVOICEEKSPEDISIGRID2_DETAIL

                    case Constant.MODEL_QUERY_INVOICEEKSPEDISIGRID2_DETAIL:
                        {
                            string ieNo = (parameters.ContainsKey("ieno") ? (string)((Functionals.ParameterParser)parameters["ieno"]).Value : string.Empty);

                            var qry = (from q in db.LG_IED3s
                                       where q.c_ieno == ieNo
                                       select new
                                       {
                                           q.c_ieno,
                                           q.c_claimno,
                                           q.n_disc
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_INVOICEEKSPEDISIINTERNALGRID2_DETAIL

                    case Constant.MODEL_QUERY_INVOICEEKSPEDISIINTERNALGRID2_DETAIL:
                        {
                            string ieNo = (parameters.ContainsKey("ieno") ? (string)((Functionals.ParameterParser)parameters["ieno"]).Value : string.Empty);

                            var qry = (from q in db.LG_IED4s
                                       where q.c_ieno == ieNo
                                       select new
                                       {
                                           q.IDX,
                                           q.c_ieno,
                                           q.n_detailtol
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_INVOICE_RESI_EKSPEDISI_ADD_DETAIL_RESI

                    case Constant.MODEL_QUERY_INVOICE_RESI_EKSPEDISI_ADD_DETAIL_RESI:
                        {
                            string exp = (parameters.ContainsKey("c_exp") ? (String)((Functionals.ParameterParser)parameters["c_exp"]).Value : string.Empty);
                            string resi = (parameters.ContainsKey("c_resi") ? (String)((Functionals.ParameterParser)parameters["c_resi"]).Value : string.Empty);
                            char gdg = (parameters.ContainsKey("c_gdg") ? Convert.ToChar(((Functionals.ParameterParser)parameters["c_gdg"]).Value) : '0');

                            var cabang = (from q in db.LG_Cusmas
                                          where q.l_cabang == true || (q.c_cusno == "0176" || q.c_cusno == "0188")
                                          select new
                                            {
                                                q.c_cusno,
                                                q.v_cunam
                                            }).AsQueryable();
                            var qerygdg = (from qq in db.LG_MsGudangs
                                           where qq.l_aktif == true
                                           select new
                                           {
                                               c_cusno = qq.c_gdg.ToString(),
                                               v_cunam = qq.v_gdgdesc
                                           }
                                           ).AsQueryable();

                            var gdgcab = cabang.Union(qerygdg).AsQueryable();

                            var qry = (from q in db.LG_ExpHs
                                       join q1 in gdgcab on q.c_cusno equals q1.c_cusno
                                       join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "16", c_type = q.c_via } equals new { q3.c_portal, q3.c_notrans, q3.c_type }
                                       join q4 in db.MsTransDs on new { c_portal = '9', c_notrans = "005", c_type = q.c_exptype } equals new { q4.c_portal, q4.c_notrans, q4.c_type }
                                       where q.c_exp == exp
                                       && q.c_gdg == gdg
                                       && q.c_resi == resi
                                       && (q.l_delete == false || q.l_delete == null)
                                       select new
                                       {
                                           q.c_resi,
                                           q.c_expno,
                                           q1.v_cunam,
                                           q1.c_cusno,
                                           q.n_koli,
                                           q.n_berat,
                                           n_vol = 0,
                                           n_biayalain = q.n_biayalain.HasValue ? q.n_biayalain : 0,
                                           n_totalbiaya = q.n_totalbiaya.HasValue ? q.n_totalbiaya : 0,
                                           n_biayakg = q.n_biayakg.HasValue ? q.n_biayakg : 0,
                                           n_expmin = q.n_expmin.HasValue ? q.n_expmin : 0,
                                           q.c_via,
                                           q.c_exptype,
                                           v_ket_exptype = q4.v_ket,
                                           v_ket_via = q3.v_ket
                                       }).Distinct().AsQueryable();


                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_INVOICE_RESI_EKSPEDISI_ADD_DETAIL_EXP

                    case Constant.MODEL_QUERY_INVOICE_RESI_EKSPEDISI_ADD_DETAIL_EXP:
                        {
                            string exp = (parameters.ContainsKey("c_exp") ? (String)((Functionals.ParameterParser)parameters["c_exp"]).Value : string.Empty);
                            string expno = (parameters.ContainsKey("c_expno") ? (String)((Functionals.ParameterParser)parameters["c_expno"]).Value : string.Empty);
                            char gdg = (parameters.ContainsKey("c_gdg") ? Convert.ToChar(((Functionals.ParameterParser)parameters["c_gdg"]).Value) : '0');

                            var cabang = (from q in db.LG_Cusmas
                                          where q.l_cabang == true
                                          select new
                                          {
                                              q.c_cusno,
                                              q.v_cunam
                                          }).AsQueryable();
                            var qerygdg = (from qq in db.LG_MsGudangs
                                           where qq.l_aktif == true
                                           select new
                                           {
                                               c_cusno = qq.c_gdg.ToString(),
                                               v_cunam = qq.v_gdgdesc
                                           }
                                           ).AsQueryable();

                            var gdgcab = cabang.Union(qerygdg).AsQueryable();

                            var qry = (from q in db.LG_ExpHs
                                       join q1 in gdgcab on q.c_cusno equals q1.c_cusno
                                       join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "16", c_type = q.c_via } equals new { q3.c_portal, q3.c_notrans, q3.c_type }
                                       join q4 in db.MsTransDs on new { c_portal = '9', c_notrans = "005", c_type = q.c_exptype } equals new { q4.c_portal, q4.c_notrans, q4.c_type }
                                       where q.c_exp == exp
                                       && q.c_gdg == gdg
                                       && q.c_expno == expno
                                       && (q.l_delete == false || q.l_delete == null)
                                       select new
                                       {
                                           q.c_resi,
                                           q.c_expno,
                                           q1.v_cunam,
                                           q1.c_cusno,
                                           q.n_koli,
                                           q.n_berat,
                                           n_vol = 0,
                                           n_biayalain = q.n_biayalain.HasValue ? q.n_biayalain : 0,
                                           n_totalbiaya = q.n_totalbiaya.HasValue ? q.n_totalbiaya : 0,
                                           n_biayakg = q.n_biayakg.HasValue ? q.n_biayakg : 0,
                                           n_expmin = q.n_expmin.HasValue ? q.n_expmin : 0,
                                           q.c_via,
                                           q.c_exptype,
                                           v_ket_exptype = q4.v_ket,
                                           v_ket_via = q3.v_ket
                                       }).Distinct().AsQueryable();

                            //old 11 mei 2015
                            //var qry = (from q in db.LG_ExpHs
                            //           join q1 in gdgcab on q.c_cusno equals q1.c_cusno
                            //           join q2 in db.LG_MsExpCostEsts on new { q.c_exp, q.c_cusno, c_type = q.c_exptype } equals new { q2.c_exp, q2.c_cusno, q2.c_type }
                            //           join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "16", c_type = q.c_via } equals new { q3.c_portal, q3.c_notrans, q3.c_type }
                            //           join q4 in db.MsTransDs on new { c_portal = '9', c_notrans = "005", c_type = q.c_exptype } equals new { q4.c_portal, q4.c_notrans, q4.c_type }
                            //           where q.c_exp == exp
                            //           && q.c_gdg == gdg
                            //           && q.c_expno == expno
                            //           && (q.l_delete == false || q.l_delete == null)
                            //           && (q2.l_delete == false || q2.l_delete == null)
                            //           && ((q.c_via == "01" && q2.n_udara > 0)
                            //               || (q.c_via == "02" && q2.n_daratlaut > 0)
                            //               || (q.c_via == "03" && q2.n_icepack > 0)
                            //               || (q.c_via == "04" && q2.n_cdd > 0)
                            //               || (q.c_via == "05" && q2.n_fuso > 0)
                            //               || (q.c_via == "06" && q2.n_tronton > 0)
                            //               || (q.c_via == "07" && q2.n_container > 0)
                            //               )
                            //           select new
                            //           {
                            //               q.c_resi,
                            //               q.c_expno,
                            //               q1.v_cunam,
                            //               c_cusno = q.c_cusno,
                            //               q.n_koli,
                            //               q.n_berat,
                            //               n_vol = q.n_vol.HasValue ? q.n_vol : 0,
                            //               q.n_biayalain,
                            //               q.n_totalbiaya,
                            //               q2.n_udara,
                            //               q2.n_daratlaut,
                            //               q2.n_icepack,
                            //               q2.n_cdd,
                            //               q2.n_fuso,
                            //               q2.n_tronton,
                            //               q2.n_container,
                            //               q.c_via,
                            //               q.c_exptype,
                            //               q2.n_expmin,
                            //               v_ket_exptype = q4.v_ket,
                            //               v_ket_via = q3.v_ket
                            //           }).Distinct().AsQueryable();


                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_INVOICE_EP_EKSPEDISI_DETAIL

                    case Constant.MODEL_QUERY_INVOICE_EP_EKSPEDISI_DETAIL:
                        {
                            string epno = (parameters.ContainsKey("c_expno") ? (String)((Functionals.ParameterParser)parameters["c_expno"]).Value : string.Empty);
                            char gdg = (parameters.ContainsKey("c_gdg") ? Convert.ToChar(((Functionals.ParameterParser)parameters["c_gdg"]).Value) : '0');


                            var cabang = (from q in db.LG_Cusmas
                                          where q.l_cabang == true
                                          select new
                                          {
                                              q.c_cusno,
                                              q.v_cunam
                                          }).AsQueryable();
                            var qerygdg = (from qq in db.LG_MsGudangs
                                           where qq.l_aktif == true
                                           select new
                                           {
                                               c_cusno = qq.c_gdg.ToString(),
                                               v_cunam = qq.v_gdgdesc
                                           }
                                           ).AsQueryable();

                            var gdgcab = cabang.Union(qerygdg).AsQueryable();

                            var qry = (from q in db.LG_ExpHs
                                       join q1 in gdgcab on q.c_cusno equals q1.c_cusno
                                       join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "16", c_type = q.c_via } equals new { q3.c_portal, q3.c_notrans, q3.c_type }
                                       join q4 in db.MsTransDs on new { c_portal = '9', c_notrans = "005", c_type = q.c_exptype } equals new { q4.c_portal, q4.c_notrans, q4.c_type }
                                       where q.c_exp == "00"
                                       && q.c_gdg == gdg
                                       && q.c_expno == epno
                                       select new
                                       {
                                           q.c_resi,
                                           q.c_expno,
                                           q1.v_cunam,
                                           q1.c_cusno,
                                           q.n_koli,
                                           q.n_berat,
                                           n_vol = q.n_vol.HasValue ? q.n_vol : 0,
                                           q.n_biayalain,
                                           q.c_via,
                                           q.c_exptype,
                                           v_ket_exptype = q4.v_ket,
                                           v_ket_via = q3.v_ket
                                       }).Distinct().AsQueryable();


                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_FAKTUREKSPEDISIGRID

                    case Constant.MODEL_QUERY_FAKTUREKSPEDISIGRID:
                        {

                            var qry = (from q in db.LG_BEHs
                                       join q1 in db.LG_MsExps on q.c_exp equals q1.c_exp
                                       join q2 in db.LG_MsGudangs on q.c_gdg equals q2.c_gdg
                                       select new
                                       {
                                           q2.v_gdgdesc,
                                           q.c_beno,
                                           q.c_exp,
                                           q.d_bedate,
                                           q.n_bilvafaktur,
                                           q.n_net,
                                           q.n_claim,
                                           q.n_pinalty,
                                           q.n_lain,
                                           q.v_alasan,
                                           q.n_selisihbe,
                                           q.n_be,
                                           q.v_ket,
                                           q.c_entry,
                                           q.l_delete,
                                           v_nama_exp = q1.v_ket,
                                           q1.l_npwp,
                                           q.n_pph
                                       }).AsQueryable();


                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }

                        break;

                    #endregion

                    #region MODEL_QUERY_FAKTUR_EKSPEDISI_DETAIL

                    case Constant.MODEL_QUERY_FAKTUR_EKSPEDISI_DETAIL:
                        {
                            //string faktur = (parameters.ContainsKey("c_beno") ? (String)((Functionals.ParameterParser)parameters["c_beno"]).Value : string.Empty);

                            var qry = (from q in db.LG_BED1s
                                       join q1 in db.LG_IEHs on q.c_ieno equals q1.c_ieno
                                       select new
                                       {
                                           q.c_beno,
                                           q.c_ieno,
                                           c_ie = q.c_resi,
                                           n_bilvafaktur = q.n_bilvad,
                                           q.n_bed,
                                           n_bedselisih = q.n_selisihbed,
                                           q1.n_disc
                                       }).Distinct().AsQueryable();


                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_PM

                    case Constant.MODEL_QUERY_PM:
                        {
                            var qry = (from q in db.LG_PMHs
                                       join gud in db.LG_MsGudangs on q.c_gdg equals gud.c_gdg
                                       select new
                                       {
                                           q.c_gdg,
                                           q.c_pmno,
                                           q.d_pmdate,
                                           gud.v_gdgdesc,
                                           q.c_memo,
                                           q.v_ket,
                                           q.l_delete
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);

                        }
                        break;
                    #endregion

                    #region MODEL_QUERY_PM_DETAIL

                    case Constant.MODEL_QUERY_PM_DETAIL:
                        {
                            var qry = (from q1 in db.LG_PMD1s
                                       join q2 in db.LG_MsGudangs on q1.c_gdg equals q2.c_gdg
                                       join q3 in db.FA_MasItms on q1.c_iteno equals q3.c_iteno
                                       select new
                                       {
                                           q1.c_pmno,
                                           q1.c_gdg,
                                           q1.c_iteno,
                                           q1.c_batch,
                                           n_gqty = q1.n_qty,
                                           q2.v_gdgdesc,
                                           q3.v_itnam
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;
                    #endregion

                    #region MODEL_QUERY_WP_SERAHTERIMA_PO
                    case Constant.MODEL_QUERY_WP_SERAHTERIMA_PO:
                        {
                            var qry = (from q in db.SCMS_WPHs
                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg
                                       join q2 in db.LG_DatSups on q.c_nosup equals q2.c_nosup
                                       select new
                                       {
                                           q1.v_gdgdesc,
                                           q.c_gdg,
                                           q.c_nodoc,
                                           q.c_type,
                                           q.d_wpdate,
                                           q.d_entry,
                                           q.c_entry,
                                           q.v_entry,
                                           q.d_scan,
                                           q.c_scan,
                                           q.v_scan,
                                           q.c_nosup,
                                           q2.v_nama,
                                           q.c_urut,
                                           q.c_plat,
                                           q.l_scan,
                                       }).AsQueryable();
                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }
                            Logger.WriteLine(qry.Provider.ToString());
                            nCount = qry.Count();
                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }
                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }
                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);
                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;
                    #endregion

                    #region MODEL_QUERY_WP_SERAHTERIMA_PODETAIL
                    case Constant.MODEL_QUERY_WP_SERAHTERIMA_PODETAIL:
                        {

                            //Indra 20180920FM
                            //SerahTerimaTransportasi
                            //var qry = (from q in db.SCMS_WPDs
                            var PO = (from q in db.SCMS_WPDs
                                       join q1 in db.LG_POHs on q.c_no equals q1.c_pono
                                       select new
                                       {
                                           q.c_nodoc,
                                           q1.c_pono,
                                           q1.d_podate,
                                           l_new = false,
                                       }).AsQueryable();

                            var SJ = (from q in db.SCMS_WPDs
                                      join q1 in db.LG_SJHs on q.c_no equals q1.c_sjno
                                      select new
                                      {
                                          q.c_nodoc,
                                          c_pono = q1.c_sjno,
                                          d_podate = q1.d_sjdate,
                                          l_new = false,
                                      }).AsQueryable();

                            var qry = PO.Union(SJ).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }
                            Logger.WriteLine(qry.Provider.ToString());
                            nCount = qry.Count();
                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }
                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }
                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);
                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;
                    #endregion

                    #region MODEL_QUERY_WP_MONITORING_PO
                    case Constant.MODEL_QUERY_WP_MONITORING_PO:
                        {
                            var qry = (from q in db.LG_vwMonitoringPOs
                                       join q1 in db.LG_DatSups on q.c_nosup equals q1.c_nosup
                                       where (SqlMethods.DateDiffDay(q.d_entry, DateTime.Now.Date) < 7)
                                       select new
                                       {
                                           q.c_nodoc,
                                           q.c_urut,
                                           q.c_nosup,
                                           q.d_entry,
                                           q.d_scan,
                                           q.d_rn,
                                           q.v_timeantri,
                                           q.v_timescan,
                                           q.v_timern,
                                           q.c_status,
                                           q1.v_nama
                                       }).AsQueryable();
                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }
                            Logger.WriteLine(qry.Provider.ToString());
                            nCount = qry.Count();
                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }
                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }
                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);
                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;
                    #endregion

                    #region MODEL_QUERY_WP_MONITORING_PODETAIL
                    case Constant.MODEL_QUERY_WP_MONITORING_PODETAIL:
                        {
                            var qry = (from q in db.SCMS_WPDs
                                       select new
                                       {
                                           q.c_nodoc,
                                           q.c_no,
                                           q.l_rn
                                       }).AsQueryable();
                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }
                            Logger.WriteLine(qry.Provider.ToString());
                            nCount = qry.Count();
                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }
                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }
                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);
                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;
                    #endregion

                    #region MODEL_QUERY_WP_MONITORING_PL Indra Monitoring Process 20180523FM

                    #region Main Form

                    case Constant.MODEL_QUERY_WP_MONITORING_PL:
                        {
                            string Gudang = (parameters.ContainsKey("Gudang = @0") ? Convert.ToString(((Functionals.ParameterParser)parameters["Gudang = @0"]).Value).Trim() : string.Empty);
                            string ETDFILTER = (parameters.ContainsKey("ETDFILTER") ? Convert.ToString(((Functionals.ParameterParser)parameters["ETDFILTER"]).Value).Trim() : "0000");
                            string ETAFILTER = (parameters.ContainsKey("ETAFILTER") ? Convert.ToString(((Functionals.ParameterParser)parameters["ETAFILTER"]).Value).Trim() : "0000");
                            string KodeItem = (parameters.ContainsKey("KodeItem") ? Convert.ToString(((Functionals.ParameterParser)parameters["KodeItem"]).Value).Trim() : "0000");

                            if (Gudang == "")
                            {
                                Gudang = "1";
                            }

                            if (KodeItem == "")
                            {
                                KodeItem = "0000";
                            }

                            var qry = (from q in db.VW_HEADERMONITORING_CSLs
                                       where q.Gudang.ToString() == Gudang &&
                                             ((ETDFILTER == "0000") || q.ETDFILTER.ToString() == ETDFILTER && ETDFILTER != "0000") &&
                                             ((ETAFILTER == "0000") || q.ETAFILTER.ToString() == ETAFILTER && ETAFILTER != "0000") &&
                                             ((KodeItem == "0000") || q.KdItm.ToString() == KodeItem && KodeItem != "0000")
                                       select new
                                       {
                                           q.Gudang,
                                           q.DivAms,
                                           q.Cabang,
                                           q.CabNoSP,
                                           q.NoSP,
                                           q.NoPL,
                                           q.NoDO,
                                           q.NoEP,
                                           q.Status,
                                           q.LastTimeAct,
                                           q.Tipe,
                                           q.SPTIME,
                                           q.ETD,
                                           q.ETDFILTER,
                                           q.ETA,
                                           q.ETAFILTER
                                       }).AsQueryable().Distinct();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }
                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();
                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }
                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }
                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);
                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region Ekspedisi Header

                    case Constant.MODEL_QUERY_WP_MONITORING_PL_EKSPEDISI:
                        {
                            string Gudang = (parameters.ContainsKey("c_gdg = @0") ? Convert.ToString(((Functionals.ParameterParser)parameters["c_gdg = @0"]).Value).Trim() : string.Empty);

                            if (Gudang == "")
                            {
                                Gudang = "1";
                            }

                            var now       = DateTime.Now;
                            var limitdate = now.AddDays(-30);

                            var qry = (from q in db.LG_ExpHs
                                       join qq in db.LG_ExpDs on q.c_expno equals qq.c_expno
                                       join qx in db.LG_DOHs on qq.c_dono equals qx.c_dono into qx_4
                                       from qdo in qx_4.DefaultIfEmpty()
                                       join q1 in db.LG_CusmasCabs on q.c_cusno equals q1.c_cusno  
                                       join q2 in db.LG_MsExps on q.c_exp equals q2.c_exp
                                       join q3 in db.LG_MsGudangs on q.c_gdg equals q3.c_gdg
                                       where q.d_expdate > limitdate &&
                                             q.c_gdg.ToString() == Gudang &&
                                             qdo.c_rnno.ToString() == null
                                             
                                       select new
                                       {    
                                           q.c_gdg,
                                           q.c_expno,
                                           q.d_expdate,
                                           q1.c_cab_dcore,
                                           q.c_resi,
                                           q.d_resi,
                                           q.n_koli,
                                           q.n_berat,
                                           q.n_vol,
                                           q.n_receh,
                                           q2.v_ket,
                                           q3.v_gdgdesc
                                       }).AsQueryable().Distinct();

                            var zzz = qry.ToList();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }
                            Logger.WriteLine(qry.Provider.ToString());
                            nCount = qry.Count();
                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }
                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }
                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);
                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region Ekspedisi Detail

                    case Constant.MODEL_QUERY_WP_MONITORING_PL_EKSPEDISI_DETAIL:
                        {
                            var now = DateTime.Now;
                            var limitdate = now.AddDays(-30);

                            var qry = (from q in db.LG_ExpHs
                                       join q1 in db.LG_ExpDs on q.c_expno equals q1.c_expno
                                       join q2 in db.SCMS_STDs on q1.c_dono equals q2.c_no
                                       join q3 in db.SCMS_STHs on q2.c_nodoc equals q3.c_nodoc
                                       where q.d_expdate > limitdate
                                       select new
                                       {
                                           q.c_expno,
                                           q3.c_nodoc,
                                           q3.n_koli,
                                           q3.n_berat,
                                           q3.n_vol,
                                           q3.n_receh,
                                           q3.n_kolireceh
                                       }).Distinct().AsQueryable();

                            var zzz = qry.ToList();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }
                            Logger.WriteLine(qry.Provider.ToString());
                            nCount = qry.Count();
                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }
                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }
                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);
                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region Ekspedisi Summary

                    case Constant.MODEL_QUERY_WP_MONITORING_PL_SUMMARY_V2:
                        {
                            string Gudang   = (parameters.ContainsKey("Gudang = @0") ? Convert.ToString(((Functionals.ParameterParser)parameters["Gudang = @0"]).Value).Trim() : string.Empty);
                            string DivAMS   = (parameters.ContainsKey("DivAMS") ? Convert.ToString(((Functionals.ParameterParser)parameters["DivAMS"]).Value).Trim() : string.Empty);
                            string Cab      = (parameters.ContainsKey("Cab") ? Convert.ToString(((Functionals.ParameterParser)parameters["Cab"]).Value).Trim() : string.Empty);

                            if (Gudang == "")
                            {
                                Gudang = "1";
                            }

                            #region ALL

                            if (Cab == "" && DivAMS == "")
                            {
                                var qry = (from q in db.VW_REKAPMONITORING_CSL_V5_TRies
                                           where q.Gudang.ToString() == Gudang
                                           select new
                                           {
                                               q.Gudang,
                                               q.Cab,
                                               q.DivAMS,
                                               q.Urut,
                                               q.Satu,
                                               q.Dua,
                                               q.Tiga,
                                               q.Tipe
                                           }).AsQueryable();

                                if ((parameters != null) && (parameters.Count > 0))
                                {
                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }

                                Logger.WriteLine(qry.Provider.ToString());
                                nCount = qry.Count();
                                if (nCount > 0)
                                {
                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }
                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                    }
                                }
                            }

                            #endregion

                            #region Cabang

                            else if (Cab != "" && DivAMS == "")
                            {
                                var qry = (from q in db.VW_REKAPMONITORINGCAB_CSL_V5_TRies
                                           where q.Gudang.ToString() == Gudang &&
                                                 q.Cab == Cab
                                           select new
                                           {
                                               q.Gudang,
                                               q.Cab,
                                               q.DivAMS,
                                               q.Urut,
                                               q.Satu,
                                               q.Dua,
                                               q.Tiga,
                                               q.Tipe
                                           }).AsQueryable();

                                if ((parameters != null) && (parameters.Count > 0))
                                {
                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }

                                Logger.WriteLine(qry.Provider.ToString());
                                nCount = qry.Count();
                                if (nCount > 0)
                                {
                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }
                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                    }
                                }
                            }

                            #endregion

                            #region Div AMS

                            else if (Cab == "" && DivAMS != "")
                            {
                                var qry = (from q in db.VW_REKAPMONITORINGDIV_CSL_V5_TRies
                                           where q.Gudang.ToString() == Gudang &&
                                                 q.DivAMS == DivAMS
                                           select new
                                           {
                                               q.Gudang,
                                               q.Cab,
                                               q.DivAMS,
                                               q.Urut,
                                               q.Satu,
                                               q.Dua,
                                               q.Tiga,
                                               q.Tipe
                                           }).AsQueryable();

                                if ((parameters != null) && (parameters.Count > 0))
                                {
                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }

                                Logger.WriteLine(qry.Provider.ToString());
                                nCount = qry.Count();
                                if (nCount > 0)
                                {
                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }
                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                    }
                                }
                            }

                            #endregion

                            #region Div AMS dan Cabang

                            else if (Cab != "" && DivAMS != "")
                            {
                                var qry = (from q in db.VW_REKAPMONITORINGDIVCAB_CSL_V5_TRies
                                           where q.Gudang.ToString() == Gudang &&
                                                 q.DivAMS == DivAMS &&
                                                 q.Cab == Cab
                                           select new
                                           {
                                               q.Gudang,
                                               q.Cab,
                                               q.DivAMS,
                                               q.Urut,
                                               q.Satu,
                                               q.Dua,
                                               q.Tiga,
                                               q.Tipe
                                           }).AsQueryable();

                                if ((parameters != null) && (parameters.Count > 0))
                                {
                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }

                                Logger.WriteLine(qry.Provider.ToString());
                                nCount = qry.Count();
                                if (nCount > 0)
                                {
                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }
                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                    }
                                }
                            }

                            #endregion

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);
                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region PL Detail

                    case Constant.MODEL_QUERY_WP_MONITORING_PL_DETAIL_PL:
                        {
                            string NoPL = (parameters.ContainsKey("c_plno = @0") ? Convert.ToString(((Functionals.ParameterParser)parameters["c_plno = @0"]).Value).Trim() : string.Empty);
                            
                            var now = DateTime.Now;
                            var limitdate = now.AddDays(-60);

                            #region PL

                            if (NoPL.Substring(0, 2) == "PL")
                            {
                                var qry = (from q in db.LG_PLHs
                                           join q1 in db.LG_PLD1s on q.c_plno equals q1.c_plno
                                           join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno
                                           join q3 in db.LG_DatSups on q2.c_nosup equals q3.c_nosup
                                           where q.d_pldate > limitdate &&
                                                 q.c_plno == NoPL
                                           select new
                                           {
                                               q.c_plno,
                                               q3.v_nama,
                                               q1.c_iteno,
                                               q2.v_itnam,
                                               q1.c_batch,
                                               q1.n_qty
                                           }).Distinct().AsQueryable();

                                Logger.WriteLine(qry.Provider.ToString());
                                nCount = qry.Count();

                                if (nCount > 0)
                                {
                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }
                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                    }
                                }
                            }

                            #endregion

                            #region SJ

                            else if (NoPL.Substring(0, 2) == "SJ")
                            {
                                var qry = (from q in db.LG_SJH1s
                                           join q1 in db.LG_SJD1s on q.c_sjno equals q1.c_sjno
                                           join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno
                                           join q3 in db.LG_DatSups on q2.c_nosup equals q3.c_nosup
                                           where q.d_sjdate > limitdate &&
                                                 q.c_sjno == NoPL
                                           select new
                                           {
                                               c_plno = q.c_sjno,
                                               q3.v_nama,
                                               q1.c_iteno,
                                               q2.v_itnam,
                                               q1.c_batch,
                                               n_qty = q1.n_gqty
                                           }).Distinct().AsQueryable();

                                Logger.WriteLine(qry.Provider.ToString());
                                nCount = qry.Count();

                                if (nCount > 0)
                                {
                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }
                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                    }
                                }
                            }
                            #endregion

                            #region SP/SG
                            else
                            {
                                var SP = (from q in db.LG_SPHs
                                           join q1 in db.LG_SPD1s on q.c_spno equals q1.c_spno
                                           join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno
                                           join q3 in db.LG_Cusmas on q.c_cusno equals q3.c_cusno
                                           where q.d_spdate > limitdate &&
                                                 q.c_spno == NoPL
                                           select new
                                           {
                                               c_plno = q.c_spno,
                                               v_nama = q3.v_cunam,
                                               q1.c_iteno,
                                               q2.v_itnam,
                                               c_batch = "",
                                               n_qty = q1.n_sisa
                                           }).Distinct().AsQueryable();

                                var SG = (from q in db.LG_SPGHs
                                          join q1 in db.LG_SPGD1s on q.c_spgno equals q1.c_spgno
                                          join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno
                                          join q3 in db.LG_DatSups on q2.c_nosup equals q3.c_nosup
                                          where q.d_spgdate > limitdate &&
                                                q.c_spgno == NoPL
                                          select new
                                          {
                                              c_plno = q.c_spgno,
                                              q3.v_nama,
                                              q1.c_iteno,
                                              q2.v_itnam,
                                              c_batch = "",
                                              n_qty = q1.n_sisa
                                          }).Distinct().AsQueryable();

                                var qry = SP.Union(SG).AsQueryable();

                                Logger.WriteLine(qry.Provider.ToString());
                                nCount = qry.Count();

                                if (nCount > 0)
                                {
                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }
                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                    }
                                }
                            }
                            #endregion

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);
                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region Filter Cabang Grid

                    case Constant.MODEL_QUERY_WP_MONITORING_PL_FILTERCABANG:
                        {
                            var qry = (from q in db.VW_GRIDCABANGs
                                       select new
                                       {
                                           q.A_F,
                                           q.AF,
                                           q.G_L,
                                           q.GL,
                                           q.M_R,
                                           q.MR,
                                           q.S_Z,
                                           q.SZ
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }
                            Logger.WriteLine(qry.Provider.ToString());
                            nCount = qry.Count();
                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }
                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }
                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);
                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region Filter Cabang Grid

                    case Constant.MODEL_QUERY_WP_MONITORING_PL_CHART:
                        {
                            string tglawal = (parameters.ContainsKey("tglawal") ? Convert.ToString(((Functionals.ParameterParser)parameters["tglawal"]).Value).Trim() : string.Empty);
                            string tglakhir = (parameters.ContainsKey("tglakhir") ? Convert.ToString(((Functionals.ParameterParser)parameters["tglakhir"]).Value).Trim() : string.Empty);
                            string gudang = (parameters.ContainsKey("gudang") ? Convert.ToString(((Functionals.ParameterParser)parameters["gudang"]).Value).Trim() : string.Empty);
                            string data = (parameters.ContainsKey("data") ? Convert.ToString(((Functionals.ParameterParser)parameters["data"]).Value).Trim() : string.Empty);

                            var qryfirst = (from q in db.VW_MonitoringProcess_Charts
                                            where q.gdgSP == gudang &&
                                                  q.TanggalSP >= Convert.ToDateTime(tglawal) &&
                                                  q.TanggalSP <= Convert.ToDateTime(tglakhir)
                                                  
                                       select new
                                       {
                                           q.DOCSP,
                                           q.JumlahSP,
                                           q.TanggalSP,
                                           q.JamSP,
                                           q.DOCPL,
                                           q.JumlahPL,
                                           q.DOCHO,
                                           q.JumlahHO,
                                           q.DOCPC,
                                           q.JumlahPC,
                                           q.DOCCH,
                                           q.JumlahCH,
                                           q.DOCDO,
                                           q.JumlahDO,
                                           q.DOCPR,
                                           q.JumlahPR,
                                           q.DOCEP,
                                           q.JumlahEP,
                                           q.DOCDP,
                                           q.JumlahDP,
                                           q.DOCAR,
                                           q.JumlahAR
                                       }).AsQueryable();

                        /*
                            from sq in GlobalQuery.ViewStockLite(db, gdg)
                                                group sq by new { sq.c_gdg, sq.c_iteno } into g
                                                select new
                                                {
                                                    g.Key.c_gdg,
                                                    g.Key.c_iteno,
                                                    N_GSISA = g.Sum(x => x.n_gsisa),
                                                    N_BSISA = g.Sum(x => x.n_bsisa)
                                                }
                         */

                            if (data == "MAX")
                            {
                                var qry = (from q in qryfirst
                                           orderby q.TanggalSP ascending
                                           group q by new { q.DOCSP, q.JamSP, q.DOCPL, q.DOCHO, q.DOCPC, q.DOCCH, q.DOCDO, q.DOCPR, q.DOCEP, q.DOCDP, q.DOCAR } into go
                                           select new
                                           {
                                               JamSP = go.Key.JamSP,
                                               DOCSP = go.Key.DOCSP,
                                               JMLSP = go.Max(x => x.JumlahSP),
                                               DOCPL = go.Key.DOCPL,
                                               JMLPL = go.Max(x => x.JumlahPL),
                                               DOCHO = go.Key.DOCHO,
                                               JMLHO = go.Max(x => x.JumlahHO),
                                               DOCPC = go.Key.DOCPC,
                                               JMLPC = go.Max(x => x.JumlahPC),
                                               DOCCH = go.Key.DOCCH,
                                               JMLCH = go.Max(x => x.JumlahCH),
                                               DOCDO = go.Key.DOCDO,
                                               JMLDO = go.Max(x => x.JumlahDO),
                                               DOCPR = go.Key.DOCPR,
                                               JMLPR = go.Max(x => x.JumlahPR),
                                               DOCEP = go.Key.DOCEP,
                                               JMLEP = go.Max(x => x.JumlahEP),
                                               DOCDP = go.Key.DOCDP,
                                               JMLDP = go.Max(x => x.JumlahDP),
                                               DOCAR = go.Key.DOCAR,
                                               JMLAR = go.Max(x => x.JumlahAR)
                                           });

                                qry = qry.OrderBy(x => x.JamSP);

                                if ((parameters != null) && (parameters.Count > 0))
                                {
                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }
                                Logger.WriteLine(qry.Provider.ToString());
                                nCount = qry.Count();

                                if (nCount > 0)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }

                            }
                            else if (data == "MIN")
                            {
                                var qry = (from q in qryfirst
                                           orderby q.TanggalSP ascending
                                           group q by new { q.DOCSP, q.JamSP, q.DOCPL, q.DOCHO, q.DOCPC, q.DOCCH, q.DOCDO, q.DOCPR, q.DOCEP, q.DOCDP, q.DOCAR } into go
                                           select new
                                           {
                                               JamSP = go.Key.JamSP,
                                               DOCSP = go.Key.DOCSP,
                                               JMLSP = go.Min(x => x.JumlahSP),
                                               DOCPL = go.Key.DOCPL,
                                               JMLPL = go.Min(x => x.JumlahPL),
                                               DOCHO = go.Key.DOCHO,
                                               JMLHO = go.Min(x => x.JumlahHO),
                                               DOCPC = go.Key.DOCPC,
                                               JMLPC = go.Min(x => x.JumlahPC),
                                               DOCCH = go.Key.DOCCH,
                                               JMLCH = go.Min(x => x.JumlahCH),
                                               DOCDO = go.Key.DOCDO,
                                               JMLDO = go.Min(x => x.JumlahDO),
                                               DOCPR = go.Key.DOCPR,
                                               JMLPR = go.Min(x => x.JumlahPR),
                                               DOCEP = go.Key.DOCEP,
                                               JMLEP = go.Min(x => x.JumlahEP),
                                               DOCDP = go.Key.DOCDP,
                                               JMLDP = go.Min(x => x.JumlahDP),
                                               DOCAR = go.Key.DOCAR,
                                               JMLAR = go.Min(x => x.JumlahAR)
                                           });

                                qry = qry.OrderBy(x => x.JamSP);

                                if ((parameters != null) && (parameters.Count > 0))
                                {
                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }
                                Logger.WriteLine(qry.Provider.ToString());
                                nCount = qry.Count();

                                if (nCount > 0)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }

                            }
                            else if (data == "AVG")
                            {
                                var qry = (from q in qryfirst
                                           orderby q.TanggalSP ascending
                                           group q by new { q.DOCSP, q.JamSP, q.DOCPL, q.DOCHO, q.DOCPC, q.DOCCH, q.DOCDO, q.DOCPR, q.DOCEP, q.DOCDP, q.DOCAR } into go
                                           select new
                                           {
                                               JamSP = go.Key.JamSP,
                                               DOCSP = go.Key.DOCSP,
                                               JMLSP = go.Average(x => x.JumlahSP),
                                               DOCPL = go.Key.DOCPL,
                                               JMLPL = go.Average(x => x.JumlahPL),
                                               DOCHO = go.Key.DOCHO,
                                               JMLHO = go.Average(x => x.JumlahHO),
                                               DOCPC = go.Key.DOCPC,
                                               JMLPC = go.Average(x => x.JumlahPC),
                                               DOCCH = go.Key.DOCCH,
                                               JMLCH = go.Average(x => x.JumlahCH),
                                               DOCDO = go.Key.DOCDO,
                                               JMLDO = go.Average(x => x.JumlahDO),
                                               DOCPR = go.Key.DOCPR,
                                               JMLPR = go.Average(x => x.JumlahPR),
                                               DOCEP = go.Key.DOCEP,
                                               JMLEP = go.Average(x => x.JumlahEP),
                                               DOCDP = go.Key.DOCDP,
                                               JMLDP = go.Average(x => x.JumlahDP),
                                               DOCAR = go.Key.DOCAR,
                                               JMLAR = go.Average(x => x.JumlahAR)
                                           });

                                qry = qry.OrderBy(x => x.JamSP);

                                if ((parameters != null) && (parameters.Count > 0))
                                {
                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }
                                Logger.WriteLine(qry.Provider.ToString());
                                nCount = qry.Count();

                                if (nCount > 0)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);
                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                            dic.Add(Constant.DEFAULT_NAMING_FIRSTDATE, tglawal);
                            dic.Add(Constant.DEFAULT_NAMING_ENDDATE, tglakhir);
                        }
                        break;

                    #endregion

                    #endregion


                    #region MODEL_QUERY_INV_PENDING_INTEGRITY
                    case Constant.MODEL_QUERY_INV_PENDING_INTEGRITY:
                        {
                            var qry = (from q in db.LG_vwIntegrityDs
                                       select new
                                       {
                                           q.c_gdg,
                                           q.c_iteno,
                                           q.v_itnam,
                                           q.c_no,
                                           q.qtyPicker,
                                           q.qtyChecker,
                                           q.qtyPacker,
                                           q.qtyTransport,
                                       }).AsQueryable();
                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }
                            Logger.WriteLine(qry.Provider.ToString());
                            nCount = qry.Count();
                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }
                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }
                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);
                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;
                    #endregion



                    //#region MODEL_QUERY_INV_PENDING_INTEGRITY
                    //case Constant.MODEL_QUERY_INV_PENDING_INTEGRITY:
                    //    {
                    //        var qry = (from q in db.LG_vwIntegrityDs
                    //                   select new
                    //                   {
                    //                       q.c_gdg,
                    //                       q.c_iteno,
                    //                       q.v_itnam,
                    //                       q.c_no,
                    //                       q.qtyPicker,
                    //                       q.qtyChecker,
                    //                       q.qtyPacker,
                    //                       q.qtyTransport,
                    //                   }).AsQueryable();
                    //        if ((parameters != null) && (parameters.Count > 0))
                    //        {
                    //            foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                    //            {
                    //                if (kvp.Value.IsCondition)
                    //                {
                    //                    if (kvp.Value.IsLike)
                    //                    {
                    //                        paternLike = kvp.Value.Value.ToString();
                    //                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                    //                    }
                    //                    else
                    //                    {
                    //                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                    //                    }
                    //                }
                    //            }
                    //        }
                    //        Logger.WriteLine(qry.Provider.ToString());
                    //        nCount = qry.Count();
                    //        if (nCount > 0)
                    //        {
                    //            if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                    //            {
                    //                qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                    //            }
                    //            if ((limit == -1) || allQuery)
                    //            {
                    //                dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                    //            }
                    //            else
                    //            {
                    //                dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                    //            }
                    //        }
                    //        dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);
                    //        dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                    //    }
                    //    break;
                    //#endregion

                    #region MODEL_QUERY_PO_APOTEKER_GRID

                    case Constant.MODEL_QUERY_PO_APOTEKER_GRID:
                        {
                            string type = (parameters.ContainsKey("type") ? Convert.ToString(((Functionals.ParameterParser)parameters["type"]).Value) : string.Empty);
                                                                            
                            var qry = (from q in db.LG_POHs
                                       join q1 in db.LG_POD1s on q.c_pono equals q1.c_pono
                                       join q2 in db.SCMS_MSITEM_CATs on q1.c_iteno equals q2.c_iteno
                                       join q3 in db.LG_PO_OKTHs on q.c_pono equals q3.c_pono into q3_g
                                       from q3s in q3_g.DefaultIfEmpty()
                                       join q4 in db.LG_DatSups on q.c_nosup equals q4.c_nosup
                                       join q5 in db.LG_MsGudangs on q.c_gdg equals q5.c_gdg
                                       where q.d_podate >= DateTime.Parse("2012-01-01")
                                       && q2.c_type == type     // 07 prekursor, 09 oot
                                       && q.v_ket != "pharmanet"
                                       select new
                                       {
                                           q.c_gdg,
                                           q.c_pono,
                                           q.d_podate,
                                           q.c_nosup,
                                           q.l_revisi,
                                           q.l_print,
                                           q.l_delete,
                                           q3s.c_poktno,
                                           q3s.l_status_pok,
                                           q3s.c_type,
                                           q4.v_nama,
                                           q5.v_gdgdesc
                                       }).Distinct().AsQueryable();

                            //var tes = qry.ToList();

                            if (type == "02")       //okt
                            {
                                qry = (from q in db.LG_POHs
                                       join q1 in db.LG_POD1s on q.c_pono equals q1.c_pono
                                       join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno
                                       join q3 in db.LG_PO_OKTHs on q.c_pono equals q3.c_pono into q3_g
                                       from q3s in q3_g.DefaultIfEmpty()
                                       join q4 in db.LG_DatSups on q.c_nosup equals q4.c_nosup
                                       join q5 in db.LG_MsGudangs on q.c_gdg equals q5.c_gdg
                                       where q.d_podate >= DateTime.Parse("2012-01-01")
                                       && q2.c_type == "02"
                                       && q.v_ket != "pharmanet"
                                       select new
                                       {
                                           q.c_gdg,
                                           q.c_pono,
                                           q.d_podate,
                                           q.c_nosup,
                                           q.l_revisi,
                                           q.l_print,
                                           q.l_delete,
                                           q3s.c_poktno,
                                           q3s.l_status_pok,
                                           q3s.c_type,
                                           q4.v_nama,
                                           q5.v_gdgdesc
                                       }).Distinct().AsQueryable();

                                //var tes2 = qry.ToList();
                            }

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_MEMOBASPB_SJ_GRID

                    case Constant.MODEL_QUERY_MEMOBASPB_SJ_GRID:
                        {
                            //char gdg = (parameters.ContainsKey("gdg") ? (char)((Functionals.ParameterParser)parameters["gdg"]).Value : '?');

                            var qry = (from q in db.SCMS_BASPBHs
                                       join q1 in db.LG_MsGudangs on new { c_from = q.c_cusno.ToString() } equals new { c_from = q1.c_gdg.ToString() }
                                       join q2 in db.LG_MsGudangs on q.c_gdg equals q2.c_gdg
                                       where q.c_gdg == '1'
                                       && q.c_cusno == "2"
                                       && ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
                                       select new
                                       {
                                           q.c_baspbno,
                                           q.c_gdg,
                                           q.c_cusno,
                                           q.d_baspb,
                                           q.c_dono,
                                           q.v_ket,
                                           q.l_delete,
                                           v_gdgdesc_asal = q1.v_gdgdesc,
                                           v_gdgdesc_tujuan = q2.v_gdgdesc
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_MEMOBASPB_SJ_DETAIL

                    case Constant.MODEL_QUERY_MEMOBASPB_SJ_DETAIL:
                        {
                            string baspbno = (parameters.ContainsKey("baspbno") ? (string)((Functionals.ParameterParser)parameters["baspbno"]).Value : string.Empty);

                            var qry = (from q in db.SCMS_BASPBHs
                                       join q1 in db.SCMS_BASPBDs on q.c_baspbno equals q1.c_baspbno
                                       join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno
                                       join qMTD_s in db.MsTransDs on new { c_portal = '3', c_notrans = "63", c_type = q1.c_claimtype.ToString() } equals new { qMTD_s.c_portal, qMTD_s.c_notrans, qMTD_s.c_type } into q_MTD
                                       from qMTD in q_MTD.DefaultIfEmpty()
                                       where q.c_gdg == '1'
                                       && q.c_cusno == "2"
                                       && q.c_baspbno == baspbno
                                       && ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
                                       select new
                                       {
                                           q1.c_iteno,
                                           q2.v_itnam,
                                           q1.n_qtydo,
                                           q1.n_gqty,
                                           q1.n_qtydiff,
                                           q1.c_claimtype,
                                           v_ket_type = qMTD.v_ket
                                       }).AsQueryable();

                            //var qrytes = qry.ToList();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_GRID_LIMIT_PO_ITEM_GRID

                    case Constant.MODEL_QUERY_GRID_LIMIT_PO_ITEM_GRID:
                        {
                            var qry = (from q in db.FA_MsDivPris
                                       join q1 in db.SCMS_LIMITPO_DIVs on q.c_kddivpri equals q1.c_kddivpri
                                       join q2 in db.LG_DatSups on q.c_nosup equals q2.c_nosup
                                       join q3 in db.LG_DatSupServiceHs on new { n_tahun = q1.n_tahun.ToString(), n_bulan = q1.n_bulan.ToString(), q1.c_nosup } equals new { n_tahun = q3.n_tahun.ToString(), n_bulan = q3.n_bulan.ToString(), q3.c_nosup }
                                       select new
                                       {
                                           q1.n_tahun,
                                           q1.n_bulan,
                                           q.v_nmdivpri,
                                           q1.n_percentage,
                                           q1.n_budget,
                                           q1.n_balance,
                                           q.c_nosup,
                                           q2.v_nama,
                                           q.c_kddivpri,
                                           q3.limit,
                                           q3.avaiblelimit,
                                           q.l_aktif
                                       }).AsQueryable();

                            var tes = qry.ToList();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_GRID_LIMIT_PO_ITEM_DETAIL

                    case Constant.MODEL_QUERY_GRID_LIMIT_PO_ITEM_DETAIL:
                        {
                            string kddivpri = (parameters.ContainsKey("kddivpri") ? (string)((Functionals.ParameterParser)parameters["kddivpri"]).Value : string.Empty);
                            decimal tahun = (parameters.ContainsKey("tahun") ? (decimal)((Functionals.ParameterParser)parameters["tahun"]).Value : 0);
                            decimal bulan = (parameters.ContainsKey("bulan") ? (decimal)((Functionals.ParameterParser)parameters["bulan"]).Value : 0);

                            var qry = (from q in db.LG_vwLimitPOItems
                                       join q1 in db.FA_MasItms on q.c_iteno equals q1.c_iteno
                                       join q2 in db.MsTransDs on new { c_portal = '3', c_notrans = "65", c_type = q.c_category } equals new { q2.c_portal, q2.c_notrans, q2.c_type }
                                       where q.c_kddivpri == kddivpri
                                       && q.n_tahun == tahun
                                       && q.n_bulan == bulan
                                       select new
                                       {
                                           q.n_tahun,
                                           q.n_bulan,
                                           q.c_nosup,
                                           q.c_kddivpri,
                                           q.c_iteno,
                                           q1.v_itnam,
                                           q.n_salpri,
                                           q.n_sohreal1,
                                           q.n_sohreal2,
                                           q.n_sohcabreal,
                                           n_sohtotal = q.n_sohreal1 + q.n_sohreal2 + q.n_sohcabreal,
                                           q.n_avgslsqty,
                                           q.n_avgslsval,
                                           q.n_slsqtyreal,
                                           n_slsqtyvalue = q.n_slsqtyreal * q.n_salpri,
                                           q.n_percentage,
                                           v_ket = q2.v_ket,
                                           q.c_category,
                                           q.n_posisaqtyreal,
                                           q.n_pomtdqtyreal,
                                           q.n_forecast,
                                           q.n_budget,
                                           q.n_ponqty,
                                           q.n_availablebudget,
                                           l_modified = false,
                                           l_total = false
                                       }).AsQueryable();

                            //var tes = qry.ToList();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_GRID_LIMIT_PO_DIVPRI_GRID

                    case Constant.MODEL_QUERY_GRID_LIMIT_PO_DIVPRI_GRID:
                        {
                            var qry = (from q in db.LG_vwLimitPOPrincipals
                                       orderby q.n_bulan descending
                                       orderby q.n_tahun descending
                                       select new
                                       {
                                           q.c_nosup,
                                           q.v_nama,
                                           q.n_tahun,
                                           q.n_bulan,
                                           q.limit,
                                           q.avaiblelimit,
                                           d_nextlimit = q.d_nextlimit == null ? 0 : q.d_nextlimit,
                                           q.n_avgslsval,
                                           q.n_salesmtd,
                                           q.n_percentage,
                                           q.n_posisaqtyreal,
                                           q.n_pomtdqtyreal,
                                           n_balance = q.limit - q.n_pomtdqtyreal,
                                           q.l_aktif
                                       }).AsQueryable();

                            //var tes = qry.ToList();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_GRID_LIMIT_PO_DIVPRI_DETAIL

                    case Constant.MODEL_QUERY_GRID_LIMIT_PO_DIVPRI_DETAIL:
                        {
                            string nosup = (parameters.ContainsKey("nosup") ? (string)((Functionals.ParameterParser)parameters["nosup"]).Value : string.Empty);
                            decimal tahun = (parameters.ContainsKey("tahun") ? (decimal)((Functionals.ParameterParser)parameters["tahun"]).Value : 0);
                            decimal bulan = (parameters.ContainsKey("bulan") ? (decimal)((Functionals.ParameterParser)parameters["bulan"]).Value : 0);

                            var qry = (from q in db.LG_vwLimitPODivDetails
                                       join q1 in db.FA_MsDivPris on q.c_kddivpri equals q1.c_kddivpri
                                       where q.c_nosup == nosup
                                       && q.n_tahun == tahun
                                       && q.n_bulan == bulan
                                       select new
                                       {
                                           q.n_tahun,
                                           q.n_bulan,
                                           q.c_kddivpri,
                                           q.c_nosup,
                                           q.n_avgslsval,
                                           q.n_slsval,
                                           q.n_percentage,
                                           q.n_budget,
                                           q.n_forecast,
                                           q.n_posisaval,
                                           q.n_pomtdval,
                                           q.n_balance,
                                           q1.v_nmdivpri,
                                           n_sohtotal = q.n_sohreal + q.n_sohcabreal
                                       }).AsQueryable();

                            //var tes = qry.ToList();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_GRID_LIMIT_PO_PRINCIPAL_GRID

                    case Constant.MODEL_QUERY_GRID_LIMIT_PO_PRINCIPAL_GRID:
                        {
                            string kddivpri = (parameters.ContainsKey("kddivpri") ? (string)((Functionals.ParameterParser)parameters["kddivpri"]).Value : string.Empty);

                            var qry = (from q in db.SCMS_LIMITPOs
                                       join q1 in db.FA_MasItms on q.c_iteno equals q1.c_iteno
                                       //join q2 in db.LG_DatSupServiceHs on new { q.n_tahun, q.n_bulan, q.c_nosup } equals new { q2.n_tahun, q2.n_bulan, q2.c_nosup }
                                       where q.c_kddivpri == kddivpri
                                       select new
                                       {
                                           q.n_tahun,
                                           q.n_bulan,
                                           q.c_nosup,
                                           q.c_kddivpri,
                                           q.c_iteno,
                                           q1.v_itnam,
                                           //q.c_type,
                                           //q.n_avgsales,
                                           //q.n_sales_cab,
                                           //q.n_stock_cab,
                                           //q.n_stock_ho,
                                           //q.n_percentage,
                                           //q.n_salpri,
                                           //q.n_forecast,
                                           //n_valuefc = q.n_forecast * q.n_salpri,
                                           //q.n_posisa,
                                           //q.n_bdp,
                                           //q.n_budget,
                                           //q.n_spsisa,
                                           //q.n_po,
                                           //n_valuepo = q.n_po * q.n_salpri
                                       }).AsQueryable();

                            //var tes = qry.ToList();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_GRID_LIMIT_PO_PRINCIPAL_DETAIL

                    case Constant.MODEL_QUERY_GRID_LIMIT_PO_PRINCIPAL_DETAIL:
                        {
                            string nosup = (parameters.ContainsKey("nosup") ? (string)((Functionals.ParameterParser)parameters["nosup"]).Value : string.Empty);
                            decimal tahun = (parameters.ContainsKey("tahun") ? (decimal)((Functionals.ParameterParser)parameters["tahun"]).Value : 0);
                            decimal bulan = (parameters.ContainsKey("bulan") ? (decimal)((Functionals.ParameterParser)parameters["bulan"]).Value : 0);

                            var qry = (from q in db.LG_vwLimitPOPriDetails
                                       where q.n_tahun == tahun
                                       && q.n_bulan == bulan
                                       select new
                                       {
                                           q.n_tahun,
                                           q.n_bulan,
                                           q.c_nosup,
                                           q.v_nama,
                                           q.n_soh,
                                           q.n_sit,
                                           q.n_sls,
                                           q.n_avgsls,
                                           q.n_slsmtdval,
                                           q.n_idxlastmonth,
                                           q.n_idx3lastmonth,
                                           q.n_percentage,
                                           q.n_besls,
                                           q.n_percentadj,
                                           q.n_bestslsadj,
                                           q.n_qty,
                                           q.n_qtyeom,
                                           q.n_estpurchase,
                                           q.n_posisaqtyval,
                                           q.n_pomtdqtyval,
                                           q.n_forecast,
                                           q.n_budget,
                                           q.n_availablebudget
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_MOVEMENT_STOCK

                    case Constant.MODEL_QUERY_MOVEMENT_STOCK:
                        {
                            var qry = (from q in db.LG_SerahTerimaHs
                                       join q1 in db.HR_MsKries on q.c_entry equals q1.c_nip
                                       join q2 in db.LG_CusmasCabs on q.c_cusno equals q2.c_cusno
                                       select new
                                       {
                                           q.c_gdg,
                                           q.v_stno,
                                           q.d_entry,
                                           q1.v_nama,
                                           q.c_rcno,
                                           q.v_pbbrno,
                                           q2.v_cunam
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_MOVEMENT_STOCK_DETAIL

                    case Constant.MODEL_QUERY_MOVEMENT_STOCK_DETAIL:
                        {
                            var qry = (from q in db.LG_SerahTerimaHs
                                       join q1 in db.LG_SerahTerimaDs on q.v_stno equals q1.v_stno
                                       join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno
                                       join q3 in db.LG_CusmasCabs on q.c_cusno equals q3.c_cusno
                                       select new
                                       {
                                           q.v_stno,
                                           q.c_rcno,
                                           q.v_pbbrno,
                                           q1.c_iteno,
                                           q2.v_itnam,
                                           q1.c_batch,
                                           q1.n_qty,
                                           q3.v_cunam,
                                           q.d_entry,
                                           q1.n_qtyterima,
                                           q1.n_qtyreject
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLine(
                  "ScmsSoaLibrary.Modules.GlobalQuery:ModelGridQuery - Switch {0} - {1}", model, ex.Message);
                Logger.WriteLine(ex.StackTrace);

                dic.Add(Constant.DEFAULT_NAMING_EXCEPTION, ex.Message);

                dic.Add(Constant.DEFAULT_NAMING_SUCCESS, false);
            }

            db.Dispose();

            return dic;
        }

        public static IDictionary<string, object> ModelGridQueryOutgoing(string connectionString, int start, int limit, bool allQuery, string sort, string dir, string model, IDictionary<string, Functionals.ParameterParser> parameters)
        {
            IDictionary<string, object> dic = new Dictionary<string, object>();

            ScmsModel.ORMDataContext db = new ScmsModel.ORMDataContext(connectionString);
            //db.CommandTimeout = 1000;

            int nCount = 0;
            string paternLike = null;

            try
            {
                switch (model)
                {
                    #region MODEL_QUERY_PACKINGLISTGRID

                    case Constant.MODEL_QUERY_PACKINGLISTGRID:
                        {
                            var qry = (from qPLH in db.LG_PLHs
                                       join qSup in db.LG_DatSups on qPLH.c_nosup equals qSup.c_nosup
                                       join qCus in db.LG_Cusmas on qPLH.c_cusno equals qCus.c_cusno
                                       join qGdg in db.LG_MsGudangs on qPLH.c_gdg equals qGdg.c_gdg
                                       join qDOH in db.LG_DOHs on qPLH.c_plno equals qDOH.c_plno into qPLH_DOH
                                       from r_qDOH in qPLH_DOH.Where(x => (x.l_delete.HasValue ? x.l_delete.Value : false) == false).DefaultIfEmpty()
                                       join qMTD_s in db.MsTransDs on new { c_portal = '3', c_notrans = "02", c_type = qPLH.c_via } equals new { qMTD_s.c_portal, qMTD_s.c_notrans, qMTD_s.c_type } into q_MTD
                                       from qMTD in q_MTD.DefaultIfEmpty()
                                       join qMTDKet_s in db.MsTransDs on new { c_portal = '3', c_notrans = "15", c_type = qPLH.c_type } equals new { qMTDKet_s.c_portal, qMTDKet_s.c_notrans, qMTDKet_s.c_type } into q_MTDKet
                                       from qMTDKet in q_MTDKet.DefaultIfEmpty()
                                       join qICAT in db.MsTransDs on new { c_portal = '9', c_notrans = "001", c_type = qPLH.c_type_cat } equals new { qICAT.c_portal, qICAT.c_notrans, qICAT.c_type } into q_ICAT
                                       from qICATKet in q_ICAT.DefaultIfEmpty()
                                       join qILAT in db.MsTransDs on new { c_portal = '9', c_notrans = "003", c_type = qPLH.c_type_lat } equals new { qILAT.c_portal, qILAT.c_notrans, qILAT.c_type } into q_ILAT
                                       from qILATKet in q_ILAT.DefaultIfEmpty()
                                       join q9 in db.SCMS_USERs on qPLH.c_entry equals q9.c_nip into q_9
                                       from qNIP in q_9.DefaultIfEmpty()
                                       join qMsDivPri in db.FA_MsDivPris on qPLH.c_kddivpri equals qMsDivPri.c_kddivpri into q_IDIV
                                       from qIDIVPri in q_IDIV.DefaultIfEmpty()
                                       where (!qPLH.c_plno.StartsWith("PLX"))
                                       && SqlMethods.DateDiffMonth(qPLH.d_pldate, DateTime.Now) <= 9
                                       select new
                                       {
                                           qPLH.c_cusno,
                                           qPLH.c_entry,
                                           qPLH.c_gdg,
                                           qPLH.c_nosup,
                                           qPLH.c_plno,
                                           qPLH.c_type,
                                           qPLH.c_update,
                                           qPLH.c_via,
                                           qPLH.d_entry,
                                           qPLH.d_pldate,
                                           qPLH.d_update,
                                           qPLH.l_confirm,
                                           qPLH.l_print,
                                           qPLH.v_ket,
                                           qPLH.l_delete,
                                           qPLH.c_type_cat,
                                           qPLH.c_type_lat,
                                           qSup.v_nama,
                                           qCus.v_cunam,
                                           qGdg.v_gdgdesc,
                                           v_ket_via = qMTD.v_ket,
                                           v_ket_type = qMTDKet.v_ket,
                                           v_ket_itemcat = qICATKet.v_ket,
                                           v_ket_itemlat = qILATKet.v_ket,
                                           l_do = (r_qDOH.c_dono == null ? false : true),
                                           v_entry = (qNIP == null ? qPLH.c_entry : qNIP.v_username),
                                           qPLH.c_baspbno,
                                           qPLH.c_kddivpri,
                                           qIDIVPri.v_nmdivpri
                                       }).Distinct().AsQueryable();
                            //.OrderBy(string.Format("{0} {1}", sort, dir)).Take(100)

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_PACKINGLISTGRID_GUDANG3

                    case Constant.MODEL_QUERY_PACKINGLISTGRID_GUDANG3:
                        {
                            var qry = (from qPLH in db.LG_PLHs
                                       join qSup in db.LG_DatSups on qPLH.c_nosup equals qSup.c_nosup
                                       join qCus in db.LG_Cusmas on qPLH.c_cusno equals qCus.c_cusno
                                       join qGdg in db.LG_MsGudangs on qPLH.c_gdg equals qGdg.c_gdg
                                       join qDOH in db.LG_DOHs on qPLH.c_plno equals qDOH.c_plno into qPLH_DOH
                                       from r_qDOH in qPLH_DOH.Where(x => (x.l_delete.HasValue ? x.l_delete.Value : false) == false).DefaultIfEmpty()
                                       join qMTD_s in db.MsTransDs on new { c_portal = '3', c_notrans = "02", c_type = qPLH.c_via } equals new { qMTD_s.c_portal, qMTD_s.c_notrans, qMTD_s.c_type } into q_MTD
                                       from qMTD in q_MTD.DefaultIfEmpty()
                                       join qMTDKet_s in db.MsTransDs on new { c_portal = '3', c_notrans = "15", c_type = qPLH.c_type } equals new { qMTDKet_s.c_portal, qMTDKet_s.c_notrans, qMTDKet_s.c_type } into q_MTDKet
                                       from qMTDKet in q_MTDKet.DefaultIfEmpty()
                                       join qICAT in db.MsTransDs on new { c_portal = '9', c_notrans = "001", c_type = qPLH.c_type_cat } equals new { qICAT.c_portal, qICAT.c_notrans, qICAT.c_type } into q_ICAT
                                       from qICATKet in q_ICAT.DefaultIfEmpty()
                                       join qILAT in db.MsTransDs on new { c_portal = '9', c_notrans = "003", c_type = qPLH.c_type_lat } equals new { qILAT.c_portal, qILAT.c_notrans, qILAT.c_type } into q_ILAT
                                       from qILATKet in q_ILAT.DefaultIfEmpty()
                                       join q9 in db.SCMS_USERs on qPLH.c_entry equals q9.c_nip into q_9
                                       from qNIP in q_9.DefaultIfEmpty()
                                       join qMsDivPri in db.FA_MsDivPris on qPLH.c_kddivpri equals qMsDivPri.c_kddivpri into q_IDIV
                                       from qIDIVPri in q_IDIV.DefaultIfEmpty()
                                       where (!qPLH.c_plno.StartsWith("PLX"))
                                       && SqlMethods.DateDiffMonth(qPLH.d_pldate, DateTime.Now) <= 9 //&& qPLH.c_gdg == '6'
                                       select new
                                       {
                                           qPLH.c_cusno,
                                           qPLH.c_entry,
                                           qPLH.c_gdg,
                                           qPLH.c_nosup,
                                           qPLH.c_plno,
                                           qPLH.c_type,
                                           qPLH.c_update,
                                           qPLH.c_via,
                                           qPLH.d_entry,
                                           qPLH.d_pldate,
                                           qPLH.d_update,
                                           qPLH.l_confirm,
                                           qPLH.l_print,
                                           qPLH.v_ket,
                                           qPLH.l_delete,
                                           qPLH.c_type_cat,
                                           qPLH.c_type_lat,
                                           qSup.v_nama,
                                           qCus.v_cunam,
                                           qGdg.v_gdgdesc,
                                           v_ket_via = qMTD.v_ket,
                                           v_ket_type = qMTDKet.v_ket,
                                           v_ket_itemcat = qICATKet.v_ket,
                                           v_ket_itemlat = qILATKet.v_ket,
                                           l_do = (r_qDOH.c_dono == null ? false : true),
                                           v_entry = (qNIP == null ? qPLH.c_entry : qNIP.v_username),
                                           qPLH.c_baspbno,
                                           qPLH.c_kddivpri,
                                           qIDIVPri.v_nmdivpri
                                       }).Distinct().AsQueryable();
                            //.OrderBy(string.Format("{0} {1}", sort, dir)).Take(100)

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_PACKINGLISTGRID_UNPRINT

                    case Constant.MODEL_QUERY_PACKINGLISTGRID_UNPRINT:
                        {
                            var qry = (from qPLH in db.LG_PLHs
                                       join qSup in db.LG_DatSups on qPLH.c_nosup equals qSup.c_nosup
                                       join qCus in db.LG_Cusmas on qPLH.c_cusno equals qCus.c_cusno
                                       join qGdg in db.LG_MsGudangs on qPLH.c_gdg equals qGdg.c_gdg
                                       join qDOH in db.LG_DOHs on qPLH.c_plno equals qDOH.c_plno into qPLH_DOH
                                       from r_qDOH in qPLH_DOH.Where(x => (x.l_delete.HasValue ? x.l_delete.Value : false) == false).DefaultIfEmpty()
                                       join qMTD_s in db.MsTransDs on new { c_portal = '3', c_notrans = "02", c_type = qPLH.c_via } equals new { qMTD_s.c_portal, qMTD_s.c_notrans, qMTD_s.c_type } into q_MTD
                                       from qMTD in q_MTD.DefaultIfEmpty()
                                       join qMTDKet_s in db.MsTransDs on new { c_portal = '3', c_notrans = "15", c_type = qPLH.c_type } equals new { qMTDKet_s.c_portal, qMTDKet_s.c_notrans, qMTDKet_s.c_type } into q_MTDKet
                                       from qMTDKet in q_MTDKet.DefaultIfEmpty()
                                       join qICAT in db.MsTransDs on new { c_portal = '9', c_notrans = "001", c_type = qPLH.c_type_cat } equals new { qICAT.c_portal, qICAT.c_notrans, qICAT.c_type } into q_ICAT
                                       from qICATKet in q_ICAT.DefaultIfEmpty()
                                       join qILAT in db.MsTransDs on new { c_portal = '9', c_notrans = "003", c_type = qPLH.c_type_lat } equals new { qILAT.c_portal, qILAT.c_notrans, qILAT.c_type } into q_ILAT
                                       from qILATKet in q_ILAT.DefaultIfEmpty()
                                       join q9 in db.SCMS_USERs on qPLH.c_entry equals q9.c_nip into q_9
                                       from qNIP in q_9.DefaultIfEmpty()
                                       join qMsDivPri in db.FA_MsDivPris on qPLH.c_kddivpri equals qMsDivPri.c_kddivpri into q_IDIV
                                       from qIDIVPri in q_IDIV.DefaultIfEmpty()
                                       where (!qPLH.c_plno.StartsWith("PLX")) && (qPLH.l_print == false || qPLH.l_print == null || qPLH.l_confirm == false || qPLH.l_confirm == null)
                                       && SqlMethods.DateDiffMonth(qPLH.d_pldate, DateTime.Now) <= 9 //&& qPLH.c_gdg == '6'
                                       select new
                                       {
                                           qPLH.c_cusno,
                                           qPLH.c_entry,
                                           qPLH.c_gdg,
                                           qPLH.c_nosup,
                                           qPLH.c_plno,
                                           qPLH.c_type,
                                           qPLH.c_update,
                                           qPLH.c_via,
                                           qPLH.d_entry,
                                           qPLH.d_pldate,
                                           qPLH.d_update,
                                           qPLH.l_confirm,
                                           qPLH.l_print,
                                           qPLH.v_ket,
                                           qPLH.l_delete,
                                           qPLH.c_type_cat,
                                           qPLH.c_type_lat,
                                           qSup.v_nama,
                                           qCus.v_cunam,
                                           qGdg.v_gdgdesc,
                                           v_ket_via = qMTD.v_ket,
                                           v_ket_type = qMTDKet.v_ket,
                                           v_ket_itemcat = qICATKet.v_ket,
                                           v_ket_itemlat = qILATKet.v_ket,
                                           l_do = (r_qDOH.c_dono == null ? false : true),
                                           v_entry = (qNIP == null ? qPLH.c_entry : qNIP.v_username),
                                           qPLH.c_baspbno,
                                           qPLH.c_kddivpri,
                                           qIDIVPri.v_nmdivpri
                                       }).Distinct().AsQueryable();
                            //.OrderBy(string.Format("{0} {1}", sort, dir)).Take(100)

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_PACKINGLISTGRID_DETAIL

                    case Constant.MODEL_QUERY_PACKINGLISTGRID_DETAIL:
                        {
                            var qry = (from qPLD1 in db.LG_PLD1s
                                       join q1 in db.FA_MasItms on qPLD1.c_iteno equals q1.c_iteno
                                       join q2 in db.LG_SPHs on qPLD1.c_spno equals q2.c_spno into q_2
                                       from qSph in q_2.DefaultIfEmpty()
                                       join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "06", qPLD1.c_type } equals new { q3.c_portal, q3.c_notrans, q3.c_type } into q_3
                                       from qMTD in q_3.DefaultIfEmpty()
                                       join q4 in db.MsTransDs on new { c_portal = '3', c_notrans = "60", c_type = qPLD1.c_type_dc } equals new { q4.c_portal, q4.c_notrans, q4.c_type } into q_4
                                       from qMTD_1 in q_4.DefaultIfEmpty()
                                       join q5 in db.LG_MsBatches on new { qPLD1.c_iteno, qPLD1.c_batch } equals new { q5.c_iteno, q5.c_batch }
                                       select new
                                       {
                                           qPLD1.c_plno,
                                           qPLD1.c_iteno,
                                           v_itemdesc = q1.v_itnam,
                                           c_sp = qPLD1.c_spno,
                                           c_spc = qSph.c_sp,
                                           qPLD1.c_type,
                                           v_typedesc = qMTD.v_ket,
                                           qPLD1.c_batch,
                                           qPLD1.n_booked,
                                           n_QtyRequest = qPLD1.n_qty,
                                           qPLD1.n_sisa,
                                           qPLD1.c_type_dc,
                                           v_ket_type_dc = qMTD_1.v_ket,
                                           q1.v_undes,
                                           q5.d_expired,
                                           qPLD1.l_expired,
                                           qPLD1.v_ket_ed,
                                           qPLD1.c_acc_ed,
                                           qSph.d_spdate,
                                           qSph.d_etdsp, //Indra 20181115FM ETD First
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_DOGRID_GLOBAL

                    case Constant.MODEL_QUERY_DOGRID_GLOBAL:
                        {
                            var qry = (from doh in db.LG_DOHs
                                       join cus in db.LG_Cusmas on doh.c_cusno equals cus.c_cusno
                                       join gud in db.LG_MsGudangs on doh.c_gdg equals gud.c_gdg
                                       join trn in db.MsTransDs on new { c_portal = '3', c_notrans = "02", c_type = doh.c_via } equals new { trn.c_portal, trn.c_notrans, trn.c_type }
                                       where (!doh.c_dono.Contains(@"DOXX")) && (doh.c_type == "01")
                                        && ((doh.l_delete.HasValue ? doh.l_delete.Value : false) == false)
                                       select new
                                       {
                                           doh.c_dono,
                                           doh.d_dodate,
                                           c_gdg = doh.c_gdg,
                                           v_gdgdesc = gud.v_gdgdesc == null ? "" : gud.v_gdgdesc,
                                           v_cunam = cus.v_cunam == null ? "" : cus.v_cunam,
                                           c_cusno = doh.c_cusno == null ? "" : doh.c_cusno,
                                           v_ketdo = doh.v_ket,
                                           v_ket = trn.v_ket == null ? "" : trn.v_ket,
                                           c_type = trn.c_type == null ? "" : trn.c_type,
                                           c_plno = doh.c_plno == null ? "" : doh.c_plno,
                                           c_pin = doh.c_pin == null ? "" : doh.c_pin,
                                           l_send = (doh.l_send.HasValue ? doh.l_send.Value : false),
                                           l_delete = (doh.l_delete.HasValue ? doh.l_delete.Value : false),
                                           cus.c_cab,
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsIn)
                                        {
                                            #region In Clause

                                            //((string[])kvp.Value.Value).Contains(
                                            qry = qry.In(kvp.Key, (object[])kvp.Value.Value).AsQueryable();

                                            #endregion
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {
                                            //qry = qry.Between(x => kvp.Key, (object[])kvp.Value.Value).AsQueryable();
                                            qry = qry.Between(kvp.Key, kvp.Value.Value, kvp.Value.Value_Next).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_DOGRID

                    case Constant.MODEL_QUERY_DOGRID_PL:
                        {
                            #region Old Coded

                            //var qry = (from doh in db.LG_DOHs
                            //           join cus in db.LG_Cusmas on doh.c_cusno equals cus.c_cusno into dos
                            //           from cus in dos.DefaultIfEmpty()
                            //           join gud in db.LG_MsGudangs on doh.c_gdg equals gud.c_gdg into guds
                            //           from gud in guds.DefaultIfEmpty()
                            //           join trn in db.MsTransDs on doh.c_via equals trn.c_type into trns
                            //           from trn in trns.DefaultIfEmpty()
                            //           join fjd3 in db.LG_FJD3s on doh.c_dono equals fjd3.c_dono into fjd3s
                            //           from fjd3 in fjd3s.DefaultIfEmpty()
                            //           join expd in db.LG_ExpDs on doh.c_dono equals expd.c_dono into expds
                            //           from expd in expds.DefaultIfEmpty()
                            //           where !(doh.c_dono.Contains(@"DOXX")) && (doh.c_type == "01") &&
                            //                   (trn.c_portal == '3') && (trn.c_notrans == "02") && (doh.l_delete != true || doh.l_delete == null)
                            //           select new
                            //           {
                            //             doh.c_dono,
                            //             doh.d_dodate,
                            //             c_gdg = doh.c_gdg,
                            //             v_gdgdesc = gud.v_gdgdesc == null ? "" : gud.v_gdgdesc,
                            //             v_cunam = cus.v_cunam == null ? "" : cus.v_cunam,
                            //             c_cusno = doh.c_cusno == null ? "" : doh.c_cusno,
                            //             v_ketdo = doh.v_ket,
                            //             v_ket = trn.v_ket == null ? "" : trn.v_ket,
                            //             c_type = trn.c_type == null ? "" : trn.c_type,
                            //             c_plno = doh.c_plno == null ? "" : doh.c_plno,
                            //             c_pin = doh.c_pin == null ? "" : doh.c_pin,
                            //             c_expno = expd.c_expno == null ? "" : expd.c_expno,
                            //             l_confirm = fjd3.c_fjno == null ? 0 : 1,
                            //             l_send = (doh.l_send.HasValue ? doh.l_send.Value : false),
                            //             l_delete = (doh.l_delete.HasValue ? doh.l_delete.Value : false),
                            //             cus.c_cab
                            //           }).AsQueryable();

                            #endregion

                            var qry = (from doh in db.LG_DOHs
                                       join cus in db.LG_Cusmas on doh.c_cusno equals cus.c_cusno
                                       join gud in db.LG_MsGudangs on doh.c_gdg equals gud.c_gdg
                                       join trn in db.MsTransDs on new { c_portal = '3', c_notrans = "02", c_type = doh.c_via } equals new { trn.c_portal, trn.c_notrans, trn.c_type }
                                       //join q5 in
                                       //  (from sq in db.LG_ExpHs
                                       //   join sq1 in db.LG_ExpDs on sq.c_expno equals sq1.c_expno
                                       //   where ((sq.l_delete.HasValue ? sq.l_delete.Value : false) == false)
                                       //   select new
                                       //   {
                                       //     sq.c_cusno,
                                       //     sq.c_expno,
                                       //     sq1.c_dono,
                                       //   }).AsQueryable() on new { doh.c_cusno, doh.c_dono } equals new { q5.c_cusno, q5.c_dono } into q_5
                                       //from qExp in q_5.DefaultIfEmpty()
                                       join q5 in db.LG_ExpDs on doh.c_dono equals q5.c_dono into q_5
                                       from qExp in q_5.DefaultIfEmpty()
                                       //Indra 20190312FM Tambah kolom ETD di Grid
                                       join q6 in db.VW_MAXETDDOs on doh.c_plno equals q6.C_PLNO into q_6
                                       from qETD in q_6.DefaultIfEmpty()
                                       //join q6 in db.LG_ExpHs on new { doh.c_cusno, qExp.c_expno } equals new { q6.c_cusno, q6.c_expno } into q_6
                                       //from qExpH in q_6.DefaultIfEmpty()
                                       where (!doh.c_dono.Contains(@"DOXX")) && (doh.c_type == "01")
                                           //&& ((from sq in db.LG_ExpHs
                                           //     where (sq.c_cusno == doh.c_cusno)
                                           //       && ((sq.l_delete.HasValue ? sq.l_delete.Value : false) == false)
                                           //     select sq.c_expno).Contains(qExp.c_expno))
                                        && ((doh.l_delete.HasValue ? doh.l_delete.Value : false) == false)
                                       select new
                                       {
                                           doh.c_dono,
                                           doh.d_dodate,
                                           c_gdg = doh.c_gdg,
                                           v_gdgdesc = gud.v_gdgdesc == null ? "" : gud.v_gdgdesc,
                                           v_cunam = cus.v_cunam == null ? "" : cus.v_cunam,
                                           c_cusno = doh.c_cusno == null ? "" : doh.c_cusno,
                                           v_ketdo = doh.v_ket,
                                           v_ket = trn.v_ket == null ? "" : trn.v_ket,
                                           c_type = trn.c_type == null ? "" : trn.c_type,
                                           c_plno = doh.c_plno == null ? "" : doh.c_plno,
                                           c_pin = doh.c_pin == null ? "" : doh.c_pin,
                                           l_print = (doh.l_print.HasValue ? doh.l_print.Value : false),
                                           l_sent = (doh.l_sent.HasValue ? doh.l_sent.Value : false),
                                           l_delete = (doh.l_delete.HasValue ? doh.l_delete.Value : false),
                                           cus.c_cab,
                                           c_expno = (qExp == null ? string.Empty : (qExp.c_expno == null ? string.Empty : qExp.c_expno.Trim())),
                                           doh.c_entry,
                                           qETD.ETDPL //Indra 20190312FM Tambah kolom ETD di Grid
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsIn)
                                        {
                                            #region In Clause

                                            //((string[])kvp.Value.Value).Contains(
                                            qry = qry.In(kvp.Key, (object[])kvp.Value.Value).AsQueryable();

                                            #endregion
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {
                                            //qry = qry.Between(x => kvp.Key, (object[])kvp.Value.Value).AsQueryable();
                                            qry = qry.Between(kvp.Key, kvp.Value.Value, kvp.Value.Value_Next).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {

                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_DOGRID_SEND

                    case Constant.MODEL_QUERY_DOGRID_PL_SEND:
                        {
                            var qry = (from doh in db.LG_DOHs
                                       join cus in db.LG_Cusmas on doh.c_cusno equals cus.c_cusno
                                       join gud in db.LG_MsGudangs on doh.c_gdg equals gud.c_gdg
                                       where (!doh.c_dono.Contains(@"DOXX")) //&& (doh.c_type == "01")
                                        && ((doh.l_delete.HasValue ? doh.l_delete.Value : false) == false)
                                           //&& (doh.l_send.Value == false)
                                        && (doh.l_sent.Value == true)
                                        //&& (doh.c_plphar != "" && doh.c_rnno == null && doh.c_cusno == "0059")
                                        //&& (doh.d_dodate >= DateTime.Now.AddDays(-5))
                                       select new
                                       {
                                           doh.c_dono,
                                           doh.d_dodate,
                                           c_gdg = doh.c_gdg,
                                           v_gdgdesc = gud.v_gdgdesc == null ? "" : gud.v_gdgdesc,
                                           v_cunam = cus.v_cunam == null ? "" : cus.v_cunam,
                                           c_cusno = doh.c_cusno == null ? "" : doh.c_cusno,
                                           v_ketdo = doh.v_ket,
                                           c_plno = doh.c_plno == null ? "" : doh.c_plno,
                                           //c_pin = doh.c_pin == null ? "" : doh.c_pin,
                                           l_send = (doh.l_send.HasValue ? doh.l_send.Value : false),
                                           l_sent = (doh.l_sent.HasValue ? doh.l_sent.Value : false),
                                           l_delete = (doh.l_delete.HasValue ? doh.l_delete.Value : false),
                                           cus.c_cab
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_DOGRID_PL_DISCORE

                    case Constant.MODEL_QUERY_DOGRID_PL_DISCORE:
                        {
                            var qry = (from doh in db.LG_DOHs
                                       join cus in db.LG_Cusmas on doh.c_cusno equals cus.c_cusno into dos
                                       from cus in dos.DefaultIfEmpty()
                                       join gud in db.LG_MsGudangs on doh.c_gdg equals gud.c_gdg into guds
                                       from gud in guds.DefaultIfEmpty()
                                       join trn in db.MsTransDs on doh.c_via equals trn.c_type into trns
                                       from trn in trns.DefaultIfEmpty()
                                       join fjd3 in db.LG_FJD3s on doh.c_dono equals fjd3.c_dono into fjd3s
                                       from fjd3 in fjd3s.DefaultIfEmpty()
                                       join expd in db.LG_ExpDs on doh.c_dono equals expd.c_dono into expds
                                       from expd in expds.DefaultIfEmpty()
                                       where (!doh.c_dono.StartsWith("DOXX")) && (doh.c_type == "01")
                                        && (trn.c_portal == '3') && (trn.c_notrans == "02")
                                        && (doh.l_delete != true || doh.l_delete == null)
                                        && (doh.l_send == true)
                                       select new
                                       {
                                           doh.c_dono,
                                           doh.d_dodate,
                                           c_gdg = doh.c_gdg,
                                           v_gdgdesc = gud.v_gdgdesc == null ? "" : gud.v_gdgdesc,
                                           v_cunam = cus.v_cunam == null ? "" : cus.v_cunam,
                                           c_cusno = doh.c_cusno == null ? "" : doh.c_cusno,
                                           v_ketdo = doh.v_ket,
                                           v_ket = trn.v_ket == null ? "" : trn.v_ket,
                                           c_type = trn.c_type == null ? "" : trn.c_type,
                                           c_plno = doh.c_plno == null ? "" : doh.c_plno,
                                           c_pin = doh.c_pin == null ? "" : doh.c_pin,
                                           c_expno = expd.c_expno == null ? "" : expd.c_expno,
                                           l_confirm = fjd3.c_fjno == null ? 0 : 1,
                                           l_send = (doh.l_send.HasValue ? doh.l_send.Value : false),
                                           l_delete = (doh.l_delete.HasValue ? doh.l_delete.Value : false),
                                           cus.c_cab
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsIn)
                                        {
                                            #region In Clause

                                            //((string[])kvp.Value.Value).Contains(
                                            qry = qry.In(kvp.Key, (object[])kvp.Value.Value).AsQueryable();

                                            #endregion
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {
                                            //qry = qry.Between(x => kvp.Key, (object[])kvp.Value.Value).AsQueryable();
                                            qry = qry.Between(kvp.Key, kvp.Value.Value, kvp.Value.Value_Next).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_DOGRID_STT

                    case Constant.MODEL_QUERY_DOGRID_STT:
                        {
                            var qry = from doh in db.LG_DOHs
                                      join cus in db.LG_Cusmas on doh.c_cusno equals cus.c_cusno
                                      join gud in db.LG_MsGudangs on doh.c_gdg equals gud.c_gdg
                                      join trn in db.MsTransDs on new { c_portal = '3', c_notrans = "02", c_type = doh.c_via } equals new { trn.c_portal, trn.c_notrans, trn.c_type }
                                      //join fjd3 in db.LG_FJD3s on doh.c_dono equals fjd3.c_dono into fjd3s
                                      //from fjd3 in fjd3s.DefaultIfEmpty()
                                      //join q5 in
                                      //  (from sq in db.LG_ExpHs
                                      //   join sq1 in db.LG_ExpDs on sq.c_expno equals sq1.c_expno
                                      //   where ((sq.l_delete.HasValue ? sq.l_delete.Value : false) == false)
                                      //   select new
                                      //   {
                                      //     sq.c_cusno,
                                      //     sq.c_expno,
                                      //     sq1.c_dono,
                                      //   }).AsQueryable() on new { doh.c_cusno, doh.c_dono } equals new { q5.c_cusno, q5.c_dono } into q_5
                                      //from qExp in q_5.DefaultIfEmpty()
                                      join q5 in db.LG_ExpDs on doh.c_dono equals q5.c_dono into q_5
                                      from qExp in q_5.DefaultIfEmpty()
                                      //join q6 in db.LG_ExpHs on new { doh.c_cusno, qExp.c_expno } equals new { q6.c_cusno, q6.c_expno } into q_6
                                      //from qExpH in q_6.DefaultIfEmpty()
                                      where !(doh.c_dono.Contains(@"DOXX")) && (doh.c_type == "02")
                                        && (doh.l_delete != true || doh.l_delete == null)
                                      select new
                                      {
                                          doh.c_dono,
                                          doh.d_dodate,
                                          c_gdg = doh.c_gdg,
                                          v_gdgdesc = gud.v_gdgdesc == null ? "" : gud.v_gdgdesc,
                                          v_cunam = cus.v_cunam == null ? "" : cus.v_cunam,
                                          c_cusno = doh.c_cusno == null ? "" : doh.c_cusno,
                                          v_ketdo = doh.v_ket,
                                          v_ket = trn.v_ket == null ? "" : trn.v_ket,
                                          c_type = trn.c_type == null ? "" : trn.c_type,
                                          c_plno = doh.c_plno == null ? "" : doh.c_plno,
                                          c_pin = doh.c_pin == null ? "" : doh.c_pin,
                                          //l_confirm = fjd3.c_fjno == null ? 0 : 1,
                                          l_print = (doh.l_print.HasValue ? doh.l_print.Value : false),
                                          l_sent = (doh.l_sent.HasValue ? doh.l_sent.Value : false),
                                          l_delete = (doh.l_delete.HasValue ? doh.l_delete.Value : false),
                                          c_expno = (qExp == null ? string.Empty : (qExp.c_expno == null ? string.Empty : qExp.c_expno.Trim())),
                                          doh.c_entry
                                      };

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {

                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;
                    #endregion

                    #region MODEL_QUERY_DOGRID_DETAIL_PL

                    case Constant.MODEL_QUERY_DOGRID_DETAIL_PL:
                        {
                            //string c_plno = (parameters.ContainsKey("c_plno") ? (string)((Functionals.ParameterParser)parameters["c_plno"]).Value : string.Empty);

                            var qry = (from dod1 in db.LG_DOD1s
                                       //where pl1.c_plno == c_plno
                                       join itm in db.FA_MasItms on dod1.c_iteno equals itm.c_iteno
                                       join doh in db.LG_DOHs on dod1.c_dono equals doh.c_dono
                                       group dod1 by new { doh.c_dono, doh.c_plno, dod1.c_iteno, itm.v_itnam, itm.n_box } into dod1
                                       select new
                                       {
                                           c_dono = dod1.Key.c_dono,
                                           c_plno = dod1.Key.c_plno,
                                           c_iteno = dod1.Key.c_iteno,
                                           v_itemdesc = dod1.Key.v_itnam,
                                           n_sisa = dod1.Sum(x => x.n_qty),
                                           n_box = dod1.Key.n_box
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_DOGRID_DETAIL_PL_NO

                    case Constant.MODEL_QUERY_DOGRID_DETAIL_PL_NO:
                        {
                            var qry = (from q in db.LG_PLHs
                                       join pld1 in db.LG_PLD1s on q.c_plno equals pld1.c_plno
                                       join itm in db.FA_MasItms on pld1.c_iteno equals itm.c_iteno
                                       where (pld1.n_qty > 0) && (pld1.n_sisa > 0)
                                        && ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
                                       group pld1 by new { q.c_gdg, pld1.c_plno, pld1.c_iteno, itm.v_itnam, itm.n_box } into g
                                       select new
                                       {
                                           c_gdg = g.Key.c_gdg,
                                           c_plno = g.Key.c_plno,
                                           c_iteno = g.Key.c_iteno,
                                           v_itemdesc = g.Key.v_itnam,
                                           n_sisa = g.Sum(x => (x.n_qty.HasValue ? x.n_qty.Value : 0)),
                                           n_box = g.Key.n_box,
                                           l_new = true,
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);

                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_DOGRID_DETAIL_PL_WBATCH

                    case Constant.MODEL_QUERY_DOGRID_DETAIL_PL_WBATCH:
                        {
                            var qry = (from q in db.LG_DOHs
                                       join q1 in db.LG_DOD2s on q.c_dono equals q1.c_dono
                                       join q2 in db.LG_MsBatches on new { q1.c_iteno, q1.c_batch } equals new { q2.c_iteno, q2.c_batch } into q_2
                                       from qBat in q_2.DefaultIfEmpty()
                                       join q3 in db.LG_PLD2s on new { q.c_plno, q1.c_iteno, q1.c_batch } equals new { q3.c_plno, q3.c_iteno, q3.c_batch } into q_3
                                       from qPLD2 in q_3.DefaultIfEmpty()
                                       join q4 in db.LG_SPHs on qPLD2.c_spno equals q4.c_spno into q_4
                                       from qSP in q_4.DefaultIfEmpty()
                                       join q5 in db.FA_MasItms on q1.c_iteno equals q5.c_iteno
                                       select new
                                       {
                                           q.c_dono,
                                           q1.c_iteno,
                                           q1.c_batch,
                                           q1.n_qty,
                                           n_qty_rcv = q1.n_qty,
                                           n_qty_good = q1.n_qty,
                                           qBat.d_expired,
                                           qSP.c_sp,
                                           q5.v_itnam,
                                           q5.c_nosup
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_DOGRID_DETAIL_STT_NO

                    case Constant.MODEL_QUERY_DOGRID_DETAIL_STT_NO:
                        {
                            string noStt = (parameters.ContainsKey("noStt") ? (string)((Functionals.ParameterParser)parameters["noStt"]).Value : string.Empty);

                            var qry = (from q in db.LG_STHs
                                       join q1 in db.LG_STD1s on new { q.c_gdg, q.c_stno } equals new { q1.c_gdg, q1.c_stno }
                                       join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno
                                       where (q.c_stno == noStt)
                                       group new { q, q1, q2 } by new { q.c_gdg, q.c_mtno, q.c_stno, q1.c_iteno, q2.v_itnam } into g
                                       select new
                                       {
                                           g.Key.c_gdg,
                                           g.Key.c_mtno,
                                           g.Key.c_stno,
                                           g.Key.c_iteno,
                                           g.Key.v_itnam,
                                           l_new = true,
                                           n_qty = g.Sum(x => x.q1.n_sisa)
                                       }).Distinct().AsQueryable();


                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;
                    #endregion

                    #region MODEL_QUERY_DOGRID_DETAIL_STT

                    case Constant.MODEL_QUERY_DOGRID_DETAIL_STT:
                        {
                            var qry = (from q in db.LG_DOHs
                                       join q1 in db.LG_DOD1s on q.c_dono equals q1.c_dono
                                       join q2 in db.LG_MsGudangs on q.c_gdg equals q2.c_gdg
                                       join q3 in db.LG_Cusmas on q.c_cusno equals q3.c_cusno
                                       join q4 in db.MsTransDs on new { c_portal = '3', c_notrans = "02", c_type = q.c_via } equals new { q4.c_portal, q4.c_notrans, q4.c_type }
                                       join q5 in db.LG_STHs on q.c_plno equals q5.c_stno
                                       join q6 in db.FA_MasItms on q1.c_iteno equals q6.c_iteno
                                       where q.c_type == "02"
                                       select new
                                       {
                                           q.c_dono,
                                           q.c_gdg,
                                           q2.v_gdgdesc,
                                           q.c_cusno,
                                           q3.v_cunam,
                                           c_stno = q.c_plno,
                                           q5.c_mtno,
                                           q.c_via,
                                           trans = q4.v_ket,
                                           q.v_ket,
                                           q1.c_iteno,
                                           q6.v_itnam,
                                           q1.n_qty
                                       }).Distinct().AsQueryable();


                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_TRANSFERGUDANGGRID_GLOBAL

                    case Constant.MODEL_QUERY_TRANSFERGUDANGGRID_GLOBAL:
                        {

                            var qry = (from sjh in db.LG_SJHs
                                       join msgud1 in db.LG_MsGudangs on sjh.c_gdg equals msgud1.c_gdg
                                       join msgud2 in db.LG_MsGudangs on sjh.c_gdg2 equals msgud2.c_gdg
                                       join sup in db.LG_DatSups on sjh.c_nosup equals sup.c_nosup into supl
                                       from sup1 in supl.DefaultIfEmpty()
                                       join msexpd in db.LG_ExpDs on sjh.c_sjno equals msexpd.c_dono into ExpD1
                                       from msexpd in ExpD1.DefaultIfEmpty()
                                       join qICAT in db.MsTransDs on new { c_portal = '9', c_notrans = "001", c_type = sjh.c_type_cat } equals new { qICAT.c_portal, qICAT.c_notrans, qICAT.c_type } into q_ICAT
                                       from qICATKet in q_ICAT.DefaultIfEmpty()
                                       where (sjh.l_delete == null || sjh.l_delete == false)
                                       orderby sjh.c_sjno descending
                                       select new
                                       {
                                           c_gdg = sjh.c_gdg,
                                           c_gdg2 = sjh.c_gdg2,
                                           v_from = msgud1.v_gdgdesc == null ? "" : msgud1.v_gdgdesc,
                                           c_sjno = sjh.c_sjno,
                                           d_sjdate = sjh.d_sjdate,
                                           v_to = msgud2.v_gdgdesc == null ? "" : msgud2.v_gdgdesc,
                                           v_ket = sjh.v_ket,
                                           l_print = sjh.l_print,
                                           l_status = sjh.l_status,
                                           l_confirm = sjh.l_confirm,
                                           c_expno = msexpd.c_expno == null ? "" : msexpd.c_expno,
                                           c_nosup = sjh.c_nosup == null ? "" : sjh.c_nosup,
                                           v_nama = sup1.v_nama == null ? "" : sup1.v_nama,
                                           sjh.c_pin,
                                           sjh.c_type,
                                           sjh.c_type_cat,
                                           v_ket_itemcat = qICATKet.v_ket,
                                           sjh.c_type_sj
                                       }).Distinct();
                            
                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_TRANSFERGUDANGGRID

                    case Constant.MODEL_QUERY_TRANSFERGUDANGGRID:
                        {
                            var listgdg = new char[] { '1', '2' , '6'};

                            var qry = (from sjh in db.LG_SJHs
                                       join msgud1 in db.LG_MsGudangs on sjh.c_gdg equals msgud1.c_gdg
                                       join msgud2 in db.LG_MsGudangs on sjh.c_gdg2 equals msgud2.c_gdg
                                       join msexpd in db.LG_ExpDs on sjh.c_sjno equals msexpd.c_dono into ExpD1
                                       from msexpd in ExpD1.DefaultIfEmpty()
                                       join sup in db.LG_DatSups on sjh.c_nosup equals sup.c_nosup into supl
                                       from sup1 in supl.DefaultIfEmpty()
                                       join qICAT in db.MsTransDs on new { c_portal = '9', c_notrans = "001", c_type = sjh.c_type_cat } equals new { qICAT.c_portal, qICAT.c_notrans, qICAT.c_type } into q_ICAT
                                       from qICATKet in q_ICAT.DefaultIfEmpty()
                                       join qTypeSJ in db.MsTransDs on new { c_portal = '9', c_notrans = "006", c_type = sjh.c_type_sj } equals new { qTypeSJ.c_portal, qTypeSJ.c_notrans, qTypeSJ.c_type } into qTypeSJ
                                       from qTypeSJKet in qTypeSJ.DefaultIfEmpty()
                                       join qTypeLat in db.MsTransDs on new { c_portal = '9', c_notrans = "003", c_type = sjh.c_type_lat } equals new { qTypeLat.c_portal, qTypeLat.c_notrans, qTypeLat.c_type } into qTypeLat
                                       from qTypeLatKet in qTypeLat.DefaultIfEmpty()
                                       where (sjh.l_delete == null || sjh.l_delete == false)
                                       && listgdg.Contains(msgud1.c_gdg)
                                       && listgdg.Contains(msgud2.c_gdg)
                                       orderby sjh.c_sjno descending
                                       select new
                                       {
                                           c_gdg = sjh.c_gdg,
                                           c_gdg2 = sjh.c_gdg2,
                                           v_from = msgud1.v_gdgdesc == null ? "" : msgud1.v_gdgdesc,
                                           c_sjno = sjh.c_sjno,
                                           d_sjdate = sjh.d_sjdate,
                                           v_to = msgud2.v_gdgdesc == null ? "" : msgud2.v_gdgdesc,
                                           v_ket = sjh.v_ket,
                                           l_print = sjh.l_print,
                                           l_status = sjh.l_status,
                                           l_confirm = sjh.l_confirm,
                                           c_expno = msexpd.c_expno == null ? "" : msexpd.c_expno,
                                           c_nosup = sjh.c_nosup == null ? "" : sjh.c_nosup,
                                           v_nama = sup1.v_nama == null ? "" : sup1.v_nama,
                                           //sjh.c_pin,
                                           sjh.c_type,
                                           sjh.c_type_lat,
                                           sjh.c_type_cat,
                                           sjh.c_type_sj,
                                           v_ket_lat = qTypeLatKet.v_ket,
                                           v_ket_itemcat = qICATKet.v_ket,
                                           v_ket_sj = qTypeSJKet.v_ket,
                                           sjh.c_entry //20180228 Indra
                                       }).Distinct();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_TRANSFERGUDANGGRID_DETAIL

                    case Constant.MODEL_QUERY_TRANSFERGUDANGGRID_DETAIL:
                        {
                            var qry = (from sjd1 in db.LG_SJD1s
                                       join itm in db.FA_MasItms on sjd1.c_iteno equals itm.c_iteno into item
                                       from itm1 in item.DefaultIfEmpty()
                                       join trans in db.MsTransDs on new { c_portal = '3', c_notrans = "60", c_type = sjd1.c_type_dc } equals new { trans.c_portal, trans.c_notrans, trans.c_type } into transG
                                       from LTrans in transG.DefaultIfEmpty()
                                       join msbatch in db.LG_MsBatches on new { sjd1.c_iteno, sjd1.c_batch } equals new { msbatch.c_iteno, msbatch.c_batch }
                                       select new
                                       {
                                           sjd1.c_sjno,
                                           c_iteno = sjd1.c_iteno == null ? "" : sjd1.c_iteno,
                                           v_itnam = itm1.v_itnam == null ? "" : itm1.v_itnam,
                                           v_undes = itm1.v_undes == null ? "" : itm1.v_undes,
                                           c_spgno = sjd1.c_spgno,
                                           c_batch = sjd1.c_batch,
                                           n_gqty = sjd1.n_gqty,
                                           n_bqty = sjd1.n_bqty,
                                           n_booked = sjd1.n_booked.HasValue ? sjd1.n_booked.Value : 0,
                                           n_booked_bad = sjd1.n_booked_bad.HasValue ? sjd1.n_booked_bad.Value : 0,
                                           n_QtyRequest = sjd1.n_gqty,
                                           n_QtyRequestBad = sjd1.n_bqty,
                                           v_ket_type_dc = LTrans.v_ket == null ? "" : LTrans.v_ket,
                                           msbatch.d_expired,
                                           sjd1.l_expired,
                                           sjd1.v_ket_ed,
                                           sjd1.c_acc_ed
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;
                    #endregion

                    #region MODEL_QUERY_PACKINGLISTGRID_DETAIL_AUTOGEN

                    case Constant.MODEL_QUERY_PACKINGLISTGRID_DETAIL_AUTOGEN:
                        {
                            string fjNo = (parameters.ContainsKey("nip") ? (string)((Functionals.ParameterParser)parameters["nip"]).Value : string.Empty);
                            string noSup = (parameters.ContainsKey("nosup") ? (string)((Functionals.ParameterParser)parameters["nosup"]).Value : string.Empty);
                            char gdg = (parameters.ContainsKey("gdg") ? (char)((Functionals.ParameterParser)parameters["gdg"]).Value : '?');

                            var qry = (from qPLD1 in db.LG_PLD1s
                                       join qPLH in db.LG_PLHs on qPLD1.c_plno equals qPLH.c_plno
                                       join q1 in db.FA_MasItms on qPLD1.c_iteno equals q1.c_iteno
                                       join qSup in db.LG_DatSups on qPLH.c_nosup equals qSup.c_nosup
                                       join q2 in db.LG_SPHs on qPLD1.c_spno equals q2.c_spno into q_2
                                       from qSph in q_2.DefaultIfEmpty()
                                       join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "06", qPLD1.c_type } equals new { q3.c_portal, q3.c_notrans, q3.c_type } into q_3
                                       from qMTD in q_3.DefaultIfEmpty()
                                       join q4 in db.MsTransDs on new { c_portal = '3', c_notrans = "60", c_type = qPLD1.c_type_dc } equals new { q4.c_portal, q4.c_notrans, q4.c_type } into q_4
                                       from qMTD_1 in q_4.DefaultIfEmpty()
                                       join qICAT in db.MsTransDs on new { c_portal = '9', c_notrans = "001", c_type = qPLH.c_type_cat } equals new { qICAT.c_portal, qICAT.c_notrans, qICAT.c_type } into q_ICAT
                                       from qICATKet in q_ICAT.DefaultIfEmpty()
                                       join qILAT in db.MsTransDs on new { c_portal = '9', c_notrans = "003", c_type = qPLH.c_type_lat } equals new { qILAT.c_portal, qILAT.c_notrans, qILAT.c_type } into q_ILAT
                                       from qILATKet in q_ILAT.DefaultIfEmpty()
                                       join qMTD_s in db.MsTransDs on new { c_portal = '3', c_notrans = "02", c_type = qPLH.c_via } equals new { qMTD_s.c_portal, qMTD_s.c_notrans, qMTD_s.c_type } into q_MTD
                                       from qMTDVia in q_MTD.DefaultIfEmpty()
                                       where qPLH.c_entry == fjNo && qPLH.c_gdg == gdg && qPLH.l_print == false
                                       select new
                                       {
                                           v_ketDet = string.Concat(qPLD1.c_plno, " - ", qSup.v_nama, " - ", qICATKet.v_ket, " - ", qILATKet.v_ket, " - ", (qMTDVia == null ? "Kosong" : qMTDVia.v_ket), " - ", (qPLH.l_box.HasValue ? qPLH.l_box.Value : false) == false ? "Receh" : "Master Box"),
                                           qPLD1.c_plno,
                                           qPLD1.c_iteno,
                                           v_itemdesc = q1.v_itnam,
                                           c_sp = qPLD1.c_spno,
                                           c_spc = qSph.c_sp,
                                           qPLD1.c_type,
                                           v_typedesc = qMTD.v_ket,
                                           qPLD1.c_batch,
                                           qPLD1.n_booked,
                                           n_QtyRequest = qPLD1.n_qty,
                                           qPLD1.n_sisa,
                                           qPLD1.c_type_dc,
                                           v_ket_type_dc = qMTD_1.v_ket,
                                           q1.v_undes,
                                           v_ket_Cat = qICATKet.v_ket,
                                           v_ket_Lat = qILATKet.v_ket,
                                       }).AsQueryable();

                            if (noSup == "00019")
                            {
                                qry = (from qPLD1 in db.LG_PLD1s
                                       join qPLH in db.LG_PLHs on qPLD1.c_plno equals qPLH.c_plno
                                       join q1 in db.FA_MasItms on qPLD1.c_iteno equals q1.c_iteno
                                       join qSup in db.LG_DatSups on qPLH.c_nosup equals qSup.c_nosup
                                       join q2 in db.LG_SPHs on qPLD1.c_spno equals q2.c_spno into q_2
                                       from qSph in q_2.DefaultIfEmpty()
                                       join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "06", qPLD1.c_type } equals new { q3.c_portal, q3.c_notrans, q3.c_type } into q_3
                                       from qMTD in q_3.DefaultIfEmpty()
                                       join q4 in db.MsTransDs on new { c_portal = '3', c_notrans = "60", c_type = qPLD1.c_type_dc } equals new { q4.c_portal, q4.c_notrans, q4.c_type } into q_4
                                       from qMTD_1 in q_4.DefaultIfEmpty()
                                       join qICAT in db.MsTransDs on new { c_portal = '9', c_notrans = "001", c_type = qPLH.c_type_cat } equals new { qICAT.c_portal, qICAT.c_notrans, qICAT.c_type } into q_ICAT
                                       from qICATKet in q_ICAT.DefaultIfEmpty()
                                       join qILAT in db.MsTransDs on new { c_portal = '9', c_notrans = "003", c_type = qPLH.c_type_lat } equals new { qILAT.c_portal, qILAT.c_notrans, qILAT.c_type } into q_ILAT
                                       from qILATKet in q_ILAT.DefaultIfEmpty()
                                       join qMTD_s in db.MsTransDs on new { c_portal = '3', c_notrans = "02", c_type = qPLH.c_via } equals new { qMTD_s.c_portal, qMTD_s.c_notrans, qMTD_s.c_type } into q_MTD
                                       from qMTDVia in q_MTD.DefaultIfEmpty()
                                       join qDiv in db.FA_Divpris on qPLD1.c_iteno equals qDiv.c_iteno
                                       join qMsDiv in db.FA_MsDivPris on qDiv.c_kddivpri equals qMsDiv.c_kddivpri
                                       where qPLH.c_entry == fjNo && qPLH.c_gdg == gdg && qPLH.l_print == false
                                       select new
                                       {
                                           v_ketDet = string.Concat(qPLD1.c_plno, " - ", qSup.v_nama, " - ", qMsDiv.v_nmdivpri, " - ", qICATKet.v_ket, " - ", qILATKet.v_ket, " - ", (qMTDVia == null ? "Kosong" : qMTDVia.v_ket), " - ", (qPLH.l_box.HasValue ? qPLH.l_box.Value : false) == false ? "Receh" : "Master Box"),
                                           qPLD1.c_plno,
                                           qPLD1.c_iteno,
                                           v_itemdesc = q1.v_itnam,
                                           c_sp = qPLD1.c_spno,
                                           c_spc = qSph.c_sp,
                                           qPLD1.c_type,
                                           v_typedesc = qMTD.v_ket,
                                           qPLD1.c_batch,
                                           qPLD1.n_booked,
                                           n_QtyRequest = qPLD1.n_qty,
                                           qPLD1.n_sisa,
                                           qPLD1.c_type_dc,
                                           v_ket_type_dc = qMTD_1.v_ket,
                                           q1.v_undes,
                                           v_ket_Cat = qICATKet.v_ket,
                                           v_ket_Lat = qILATKet.v_ket,
                                       }).AsQueryable();
                            }

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_TRANSFERGUDANGGRID_KARANTINA

                    case Constant.MODEL_QUERY_TRANSFERGUDANGGRID_KARANTINA:
                        {
                            var listgdg = new char[] { '1', '4' };

                            var qry = (from sjh in db.LG_SJHs
                                       join msgud1 in db.LG_MsGudangs on sjh.c_gdg equals msgud1.c_gdg
                                       join msgud2 in db.LG_MsGudangs on sjh.c_gdg2 equals msgud2.c_gdg
                                       join msexpd in db.LG_ExpDs on sjh.c_sjno equals msexpd.c_dono into ExpD1
                                       from msexpd in ExpD1.DefaultIfEmpty()
                                       join sup in db.LG_DatSups on sjh.c_nosup equals sup.c_nosup into supl
                                       from sup1 in supl.DefaultIfEmpty()
                                       join qICAT in db.MsTransDs on new { c_portal = '9', c_notrans = "001", c_type = sjh.c_type_cat } equals new { qICAT.c_portal, qICAT.c_notrans, qICAT.c_type } into q_ICAT
                                       from qICATKet in q_ICAT.DefaultIfEmpty()
                                       join qTypeSJ in db.MsTransDs on new { c_portal = '9', c_notrans = "006", c_type = sjh.c_type_sj } equals new { qTypeSJ.c_portal, qTypeSJ.c_notrans, qTypeSJ.c_type } into qTypeSJ
                                       from qTypeSJKet in qTypeSJ.DefaultIfEmpty()
                                       join qTypeLat in db.MsTransDs on new { c_portal = '9', c_notrans = "003", c_type = sjh.c_type_lat } equals new { qTypeLat.c_portal, qTypeLat.c_notrans, qTypeLat.c_type } into qTypeLat
                                       from qTypeLatKet in qTypeLat.DefaultIfEmpty()
                                       where (sjh.l_delete == null || sjh.l_delete == false)
                                       && listgdg.Contains(msgud1.c_gdg)
                                       && listgdg.Contains(msgud2.c_gdg)
                                       orderby sjh.c_sjno descending
                                       select new
                                       {
                                           c_gdg = sjh.c_gdg,
                                           c_gdg2 = sjh.c_gdg2,
                                           v_from = msgud1.v_gdgdesc == null ? "" : msgud1.v_gdgdesc,
                                           c_sjno = sjh.c_sjno,
                                           d_sjdate = sjh.d_sjdate,
                                           v_to = msgud2.v_gdgdesc == null ? "" : msgud2.v_gdgdesc,
                                           v_ket = sjh.v_ket,
                                           l_print = sjh.l_print,
                                           l_status = sjh.l_status,
                                           l_confirm = sjh.l_confirm,
                                           c_expno = msexpd.c_expno == null ? "" : msexpd.c_expno,
                                           c_nosup = sjh.c_nosup == null ? "" : sjh.c_nosup,
                                           v_nama = sup1.v_nama == null ? "" : sup1.v_nama,
                                           //sjh.c_pin,
                                           sjh.c_type,
                                           sjh.c_type_lat,
                                           sjh.c_type_cat,
                                           sjh.c_type_sj,
                                           v_ket_lat = qTypeLatKet.v_ket,
                                           v_ket_itemcat = qICATKet.v_ket,
                                           v_ket_sj = qTypeSJKet.v_ket
                                       }).Distinct();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_TRANSFERGUDANGGRID_PEMUSNAHAN

                    case Constant.MODEL_QUERY_TRANSFERGUDANGGRID_PEMUSNAHAN:
                        {
                            var qry = (from sjh in db.LG_SJHs
                                       join msgud1 in db.LG_MsGudangs on sjh.c_gdg equals msgud1.c_gdg
                                       join msgud2 in db.LG_MsGudangs on sjh.c_gdg2 equals msgud2.c_gdg
                                       join msexpd in db.LG_ExpDs on sjh.c_sjno equals msexpd.c_dono into ExpD1
                                       from msexpd in ExpD1.DefaultIfEmpty()
                                       join sup in db.LG_DatSups on sjh.c_nosup equals sup.c_nosup into supl
                                       from sup1 in supl.DefaultIfEmpty()
                                       join qICAT in db.MsTransDs on new { c_portal = '9', c_notrans = "001", c_type = sjh.c_type_cat } equals new { qICAT.c_portal, qICAT.c_notrans, qICAT.c_type } into q_ICAT
                                       from qICATKet in q_ICAT.DefaultIfEmpty()
                                       join qTypeSJ in db.MsTransDs on new { c_portal = '9', c_notrans = "006", c_type = sjh.c_type_sj } equals new { qTypeSJ.c_portal, qTypeSJ.c_notrans, qTypeSJ.c_type } into qTypeSJ
                                       from qTypeSJKet in qTypeSJ.DefaultIfEmpty()
                                       join qTypeLat in db.MsTransDs on new { c_portal = '9', c_notrans = "003", c_type = sjh.c_type_lat } equals new { qTypeLat.c_portal, qTypeLat.c_notrans, qTypeLat.c_type } into qTypeLat
                                       from qTypeLatKet in qTypeLat.DefaultIfEmpty()
                                       join qProductOrigin in db.MsTransDs on new { c_portal = '3', c_notrans = "62", c_type = sjh.c_product_origin } equals new { qProductOrigin.c_portal, qProductOrigin.c_notrans, qProductOrigin.c_type } into qProductOrigin
                                       from qProductOriginKet in qProductOrigin.DefaultIfEmpty()
                                       join qMemo in db.MK_MPDs on sjh.c_mpno equals qMemo.c_mpno into q_memo
                                       from qMemoKet in q_memo.DefaultIfEmpty()
                                       where (sjh.l_delete == null || sjh.l_delete == false)
                                       && sjh.c_gdg2 == '5'
                                       orderby sjh.c_sjno descending
                                       select new
                                       {
                                           c_gdg = sjh.c_gdg,
                                           c_gdg2 = sjh.c_gdg2,
                                           v_from = msgud1.v_gdgdesc == null ? "" : msgud1.v_gdgdesc,
                                           c_sjno = sjh.c_sjno,
                                           d_sjdate = sjh.d_sjdate,
                                           v_to = msgud2.v_gdgdesc == null ? "" : msgud2.v_gdgdesc,
                                           v_ket = sjh.v_ket,
                                           l_print = sjh.l_print,
                                           l_status = sjh.l_status,
                                           l_confirm = sjh.l_confirm,
                                           c_expno = msexpd.c_expno == null ? "" : msexpd.c_expno,
                                           c_nosup = sjh.c_nosup == null ? "" : sjh.c_nosup,
                                           v_nama = sup1.v_nama == null ? "" : sup1.v_nama,
                                           //sjh.c_pin,
                                           sjh.c_type,
                                           sjh.c_type_lat,
                                           sjh.c_type_cat,
                                           sjh.c_type_sj,
                                           v_ket_lat = qTypeLatKet.v_ket,
                                           v_ket_itemcat = qICATKet.v_ket,
                                           v_ket_sj = qTypeSJKet.v_ket,
                                           c_product_origin = sjh.c_product_origin == null ? "" : sjh.c_product_origin,
                                           v_ket_product_origin = qProductOriginKet.v_ket == null ? "" : qProductOriginKet.v_ket,
                                           sjh.v_nodok,
                                           sjh.v_product_origin,
                                           c_mpno = qMemoKet.c_mpno
                                       }).Distinct();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion    

                }
            }
            catch (Exception ex)
            {
                Logger.WriteLine(
                  "ScmsSoaLibrary.Modules.GlobalQuery:ModelGridQueryOutgoing - Switch {0} - {1}", model, ex.Message);
                Logger.WriteLine(ex.StackTrace);

                dic.Add(Constant.DEFAULT_NAMING_EXCEPTION, ex.Message);

                dic.Add(Constant.DEFAULT_NAMING_SUCCESS, false);
            }

            db.Dispose();

            return dic;
        }

        public static IDictionary<string, object> ModelGridQueryFinance(string connectionString, int start, int limit, bool allQuery, string sort, string dir, string model, IDictionary<string, Functionals.ParameterParser> parameters)
        {
            IDictionary<string, object> dic = new Dictionary<string, object>();

            ScmsModel.ORMDataContext db = new ScmsModel.ORMDataContext(connectionString);
            //db.CommandTimeout = 1000;

            int nCount = 0;
            string paternLike = null;

            try
            {
                switch (model)
                {
                    #region Pembayaran

                    #region Debit

                    #region MODEL_QUERY_PEMBAYARAN_HUTANGVC

                    case Constant.MODEL_QUERY_PEMBAYARAN_HUTANGVC:
                        {
                            var qry = (from q in db.LG_DNHs
                                       join q1 in db.LG_VDNHs on q.c_vdno equals q1.c_vdno into q_1
                                       from qVD in q_1.DefaultIfEmpty()
                                       join q2 in db.LG_DatSups on q.c_nosup equals q2.c_nosup
                                       select new
                                       {
                                           q.c_noteno,
                                           q.d_notedate,
                                           q.n_bilva,
                                           c_vcno = (q.c_vdno ?? ""),
                                           c_refcode = q.c_nosup,
                                           n_sisa = (qVD.n_sisa.HasValue ? qVD.n_sisa.Value : 0),
                                           v_refcode_desc = q2.v_nama,
                                           q.l_delete,
                                           q.v_ket
                                       }).AsQueryable();

                            #region Old Coded

                            //var qry = (from q in db.LG_VDNHs
                            //           join q1 in db.LG_DatSups on q.c_nosup equals q1.c_nosup
                            //           select new
                            //           {
                            //             c_vcno = q.c_vdno,
                            //             d_vcdate = q.d_vddate,
                            //             c_refcode = q.c_nosup,
                            //             v_refcode_desc = q1.v_nama,
                            //             q.n_bilva,
                            //             q.n_sisa,
                            //             q.l_delete
                            //           }).AsQueryable();

                            #endregion

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_PEMBAYARAN_HUTANGVCDETIL

                    case Constant.MODEL_QUERY_PEMBAYARAN_HUTANGVCDETIL:
                        {
                            var qry = (from _q in db.LG_DNHs
                                       join q in db.LG_DNDs on _q.c_noteno equals q.c_noteno
                                       join q1 in db.MsTransDs on new { c_portal = '0', c_notrans = "42", q.c_type } equals new { q1.c_portal, q1.c_notrans, q1.c_type } into q_1
                                       from qMTD in q_1.DefaultIfEmpty()
                                       join q2 in db.LG_FBHs on q.c_fbno equals q2.c_fbno into q_2
                                       from qFB in q_2.DefaultIfEmpty()
                                       select new
                                       {
                                           _q.c_noteno,
                                           Kurs = _q.c_kurs,
                                           SuplierID = _q.c_nosup,
                                           Faktur = q.c_fbno,
                                           q.c_trans,
                                           Tipe = q.c_type,
                                           c_vdno = (q.c_vdno ?? ""),
                                           SisaTagihan = q.n_value,
                                           Pembayaran = q.n_value,
                                           v_ket_notedtl = qMTD.v_ket,
                                           FakturBeli = qFB.c_fb,
                                           FakturDate = qFB.d_fbdate,
                                           Value = qFB.n_bilva,
                                           l_bayar = true,
                                           l_new = false
                                       });

                            #region Old Code

                            //var qry = (from q in db.LG_VDNHs
                            //           join q1 in db.LG_DatSups on q.c_nosup equals q1.c_nosup
                            //           join q2 in db.MsTransDs on new { q.c_type, c_portal = '0', c_notrans = "48" } equals new { q2.c_type, q2.c_portal, q2.c_notrans } into q_2
                            //           from qMTD in q_2.DefaultIfEmpty()
                            //           join q3 in db.FA_MsBanks on new { q.c_bank, c_cab1 = "X9" } equals new { q3.c_bank, q3.c_cab1 } into q_3
                            //           from qBank in q_3.DefaultIfEmpty()
                            //           join q4 in db.FA_Kurs on q.c_kurs equals q4.c_kurs into q_4
                            //           from qKurs in q_4.DefaultIfEmpty()
                            //           select new
                            //           {
                            //             c_vcno = q.c_vdno,
                            //             d_vcdate = q.d_vddate,
                            //             q.c_nosup,
                            //             v_nama_sup = q1.v_nama,
                            //             q.c_type,
                            //             v_type_dsc = qMTD.v_ket,
                            //             q.c_rekNo,
                            //             qBank.c_bank,
                            //             qBank.v_bank,
                            //             v_giro = q.v_no,
                            //             d_tempogiro = q.d_tempo,
                            //             q.c_kurs,
                            //             qKurs.v_desc,
                            //             q.n_kurs,
                            //             q.n_admin,
                            //             q.n_bilva,
                            //             q.n_sisa,
                            //             q.l_um,
                            //             q.v_ket
                            //           }).AsQueryable();

                            #endregion

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);

                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_PEMBAYARAN_HUTANGVCHEADER

                    case Constant.MODEL_QUERY_PEMBAYARAN_HUTANGVCHEADER:
                        {
                            var qry = (from q in db.LG_DNHs
                                       join q1 in db.LG_VDNHs on q.c_vdno equals q1.c_vdno into q_1
                                       from qVD in q_1.DefaultIfEmpty()
                                       join q2 in db.LG_DatSups on q.c_nosup equals q2.c_nosup
                                       join q3 in db.MsTransDs on new { c_portal = '0', c_notrans = "48", q.c_type } equals new { q3.c_portal, q3.c_notrans, q3.c_type }
                                       join q4 in db.FA_Kurs on q.c_kurs equals q4.c_kurs
                                       join q5 in db.MsTransDs on new { c_portal = '3', c_notrans = "49", q.c_type } equals new { q5.c_portal, q5.c_notrans, q5.c_type }
                                       join q6 in db.FA_MsBanks on qVD.c_bank equals q6.c_bank into q_6
                                       from qBank in q_6.DefaultIfEmpty()
                                       select new
                                       {
                                           q.c_noteno,
                                           q.d_notedate,
                                           q.c_kurs,
                                           q.c_nosup,
                                           q.c_type,
                                           q.l_print,
                                           q.n_bilva,
                                           q.n_kurs,
                                           q.v_ket,
                                           q.l_delete,
                                           c_type_note = q.c_type,
                                           l_print_note = q.l_print,
                                           c_vdno = (q.c_vdno ?? ""),
                                           qVD.c_bank,
                                           qVD.c_rekNo,
                                           qVD.d_tempo,
                                           qVD.d_vddate,
                                           qVD.l_um,
                                           qVD.n_admin,
                                           qVD.n_sisa,
                                           qVD.v_no,
                                           v_nama_suplier = q2.v_nama,
                                           v_ket_jenis_bayar = q3.v_ket,
                                           v_desc_kurs = q4.v_desc,
                                           v_ket_tipe_bayar = q5.v_ket,
                                           qBank.v_bank
                                       }).Distinct().AsQueryable();

                            #region Old Coded

                            //var qry = (from q in db.LG_VDNHs
                            //           join q1 in db.LG_DNHs on q.c_vdno equals q1.c_vdno
                            //           join q2 in db.LG_DatSups on q.c_nosup equals q2.c_nosup
                            //           join q3 in db.MsTransDs on new { c_portal = '0', c_notrans = "48", q.c_type } equals new { q3.c_portal, q3.c_notrans, q3.c_type } into q_3
                            //           from qMTD1 in q_3.DefaultIfEmpty()
                            //           join q4 in db.FA_Kurs on q.c_kurs equals q4.c_kurs
                            //           join q5 in db.MsTransDs on new { c_portal = '3', c_notrans = "49", q.c_type } equals new { q5.c_portal, q5.c_notrans, q5.c_type } into q_5
                            //           from qMTD2 in q_5.DefaultIfEmpty()
                            //           join q6 in db.FA_MsBanks on q.c_bank equals q6.c_bank
                            //           where (q.l_delete == null || q.l_delete == false) &&
                            //             (q1.l_delete == null || q1.l_delete == false)
                            //           select new
                            //           {
                            //             q.c_vdno,
                            //             q.c_bank,
                            //             q.c_kurs,
                            //             q.c_nosup,
                            //             q.c_rekNo,
                            //             q.c_type,
                            //             q.d_tempo,
                            //             q.d_vddate,
                            //             q.l_print,
                            //             q.l_um,
                            //             q.n_admin,
                            //             q.n_bilva,
                            //             q.n_kurs,
                            //             q.n_sisa,
                            //             q.v_ket,
                            //             q.v_no,
                            //             q1.c_noteno,
                            //             c_type_note = q1.c_type,
                            //             l_print_note = q1.l_print,
                            //             v_nama_suplier = q2.v_nama,
                            //             v_ket_jenis_bayar = qMTD1.v_ket,
                            //             v_desc_kurs = q4.v_desc,
                            //             v_ket_tipe_bayar = qMTD2.v_ket,
                            //             q6.v_bank
                            //           }).Distinct().AsQueryable();

                            #endregion

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #region Credit

                    #region MODEL_QUERY_PEMBAYARAN_PIUTANGVC

                    case Constant.MODEL_QUERY_PEMBAYARAN_PIUTANGVC:
                        {
                            var qry = (from q in db.LG_CNHs
                                       join q1 in db.LG_VCNHs on q.c_vcno equals q1.c_vcno into q_1
                                       from qVD in q_1.DefaultIfEmpty()
                                       join q2 in db.LG_Cusmas on q.c_cusno equals q2.c_cusno
                                       select new
                                       {
                                           q.c_noteno,
                                           q.d_notedate,
                                           q.n_bilva,
                                           c_vcno = (q.c_vcno ?? ""),
                                           c_refcode = q.c_cusno,
                                           n_sisa = (qVD.n_sisa.HasValue ? qVD.n_sisa.Value : 0),
                                           v_refcode_desc = q2.v_cunam,
                                           q.l_delete,
                                           q.v_ket
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_PEMBAYARAN_PIUTANGVCDETIL

                    case Constant.MODEL_QUERY_PEMBAYARAN_PIUTANGVCDETIL:
                        {
                            var qry = (from _q in db.LG_CNHs
                                       join q in db.LG_CNDs on _q.c_noteno equals q.c_noteno
                                       join q1 in db.MsTransDs on new { c_portal = '0', c_notrans = "42", q.c_type } equals new { q1.c_portal, q1.c_notrans, q1.c_type } into q_1
                                       from qMTD in q_1.DefaultIfEmpty()
                                       join q2 in db.LG_FJHs on q.c_fjno equals q2.c_fjno into q_2
                                       from qFJ in q_2.DefaultIfEmpty()
                                       select new
                                       {
                                           _q.c_noteno,
                                           Kurs = _q.c_kurs,
                                           CustomerID = _q.c_cusno,
                                           Faktur = q.c_fjno,
                                           Tipe = q.c_type,
                                           q.c_vcno,
                                           SisaTagihan = q.n_value,
                                           Pembayaran = q.n_value,
                                           v_ket_notedtl = qMTD.v_ket,
                                           FakturEx = "-",
                                           FakturDate = qFJ.d_fjdate,
                                           Value = qFJ.n_net,
                                           l_bayar = true,
                                           l_new = false
                                       });

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);

                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_PEMBAYARAN_PIUTANGVCHEADER

                    case Constant.MODEL_QUERY_PEMBAYARAN_PIUTANGVCHEADER:
                        {
                            var qry = (from q in db.LG_CNHs
                                       join q1 in db.LG_VCNHs on q.c_vcno equals q1.c_vcno into q_1
                                       from qVD in q_1.DefaultIfEmpty()
                                       join q2 in db.LG_Cusmas on q.c_cusno equals q2.c_cusno
                                       join q3 in db.MsTransDs on new { c_portal = '0', c_notrans = "48", q.c_type } equals new { q3.c_portal, q3.c_notrans, q3.c_type }
                                       join q4 in db.FA_Kurs on q.c_kurs equals q4.c_kurs
                                       join q5 in db.MsTransDs on new { c_portal = '3', c_notrans = "49", q.c_type } equals new { q5.c_portal, q5.c_notrans, q5.c_type }
                                       join q6 in db.FA_MsBanks on qVD.c_bank equals q6.c_bank into q_6
                                       from qBank in q_6.DefaultIfEmpty()
                                       select new
                                       {
                                           q.c_noteno,
                                           q.d_notedate,
                                           q.c_kurs,
                                           q.c_cusno,
                                           q.c_type,
                                           q.l_print,
                                           q.n_bilva,
                                           q.n_kurs,
                                           q.v_ket,
                                           q.l_delete,
                                           c_type_note = q.c_type,
                                           l_print_note = q.l_print,
                                           c_vcno = (q.c_vcno ?? ""),
                                           qVD.c_bank,
                                           qVD.c_rekno,
                                           qVD.d_tempo,
                                           qVD.d_vcdate,
                                           qVD.n_sisa,
                                           qVD.v_no,
                                           v_nama_customer = q2.v_cunam,
                                           v_ket_jenis_bayar = q3.v_ket,
                                           v_desc_kurs = q4.v_desc,
                                           v_ket_tipe_bayar = q5.v_ket,
                                           qBank.v_bank
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #endregion

                    #region Faktur

                    #region Jual

                    #region MODEL_QUERY_FAKTURJUALGRID

                    case Constant.MODEL_QUERY_FAKTURJUALGRID:
                        {
                            var qry = (from q in db.LG_FJHs
                                       join q1 in db.LG_FJD3s on q.c_fjno equals q1.c_fjno into q_1
                                       from qFJD1 in q_1.DefaultIfEmpty()
                                       join q2 in db.LG_Cusmas on q.c_cusno equals q2.c_cusno
                                       join q3 in db.FA_Kurs on q.c_kurs equals q3.c_kurs into q_3
                                       from qKURS in q_3.DefaultIfEmpty() 
                                       select new
                                       {
                                           q.c_fjno,
                                           q.d_fjdate,
                                           q.c_cusno,
                                           q2.v_cunam,
                                           q.c_kurs,
                                           v_desc_kurs = qKURS.v_desc,
                                           q.c_taxno,
                                           q.d_taxdate,
                                           q.d_top,
                                           q.d_toppjg,
                                           q.l_cabang,
                                           q.l_delete,
                                           q.l_print,
                                           q.n_disc,
                                           q.n_gross,
                                           q.n_kurs,
                                           q.n_net,
                                           q.n_sisa,
                                           q.n_tax,
                                           q.n_top,
                                           q.n_toppjg,
                                           q.v_ket,
                                           qFJD1.c_dono,
                                           subdis = q.l_cabang == true ? false : true
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_FAKTURJUALGRID_DETAIL

                    case Constant.MODEL_QUERY_FAKTURJUALGRID_DETAIL:
                        {
                            string fjNo = (parameters.ContainsKey("fakturNo") ? (string)((Functionals.ParameterParser)parameters["fakturNo"]).Value : string.Empty);

                            var qry = (from q in db.LG_FJD1s
                                       join q1 in db.LG_FJD2s on new { q.c_fjno, q.c_iteno } equals new { q1.c_fjno, q1.c_iteno } into q_1
                                       from qFJD2 in q_1.DefaultIfEmpty()
                                       join q2 in db.FA_MasItms on q.c_iteno equals q2.c_iteno
                                       where q.c_fjno == fjNo
                                       select new
                                       {
                                           //q.c_fjno,
                                           q.c_iteno,
                                           q2.v_itnam,
                                           q.n_qty,
                                           q.n_salpri,
                                           q.n_disc,
                                           qFJD2.c_type,
                                           qFJD2.n_discon,
                                           qFJD2.n_discoff
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #region Beli

                    #region MODEL_QUERY_FAKTURBELIGRID

                    case Constant.MODEL_QUERY_FAKTURBELIGRID:
                        {
                            //Indra 20181219FM
                            string GetData = (parameters.ContainsKey("GetData") ? Convert.ToString(((Functionals.ParameterParser)parameters["GetData"]).Value).Trim() : "0");

                            if (GetData == "1")
                            {
                                #region Header

                                var qryBeli = (from q in db.LG_FBHs
                                               join q1 in db.LG_FBD2s on q.c_fbno equals q1.c_fbno
                                               join q2 in db.LG_DatSups on q.c_nosup equals q2.c_nosup
                                               join q3 in db.FA_Kurs on q.c_kurs equals q3.c_kurs into q_3
                                               from qKURS in q_3.DefaultIfEmpty()
                                               //join q4 in db.LG_RNHs on new { q.c_nosup, q1.c_rnno } equals new { c_nosup = q4.c_from, q4.c_rnno } into q_4
                                               //from qRN in q_4.DefaultIfEmpty()
                                               from qRN in db.LG_RNHs
                                                  .Where(rn => rn.c_from == q.c_nosup && rn.c_rnno == q1.c_rnno)
                                                  .DefaultIfEmpty()
                                               where qRN.c_type == "01"
                                               select new
                                               {
                                                   q.c_fb,
                                                   q.c_fbno,
                                                   q.d_fbdate,
                                                   q.c_kurs,
                                                   v_desc_kurs = qKURS.v_desc,
                                                   q.c_nosup,
                                                   v_nama_supl = q2.v_nama,
                                                   q.c_taxno,
                                                   q.d_taxdate,
                                                   q.d_top,
                                                   q.d_toppjg,
                                                   q.l_bea,
                                                   q.l_delete,
                                                   q.l_ppn,
                                                   q.l_print,
                                                   q.n_bea,
                                                   q.n_bilva,
                                                   q.n_bruto,
                                                   q.n_disc,
                                                   q.n_kurs,
                                                   q.n_pdisc,
                                                   q.n_ppn,
                                                   q.n_sisa,
                                                   q.n_top,
                                                   q.n_toppjg,
                                                   q.n_xdisc,
                                                   q.v_ket,
                                                   q.n_bilva_faktur,
                                                   q1.c_rnno,
                                                   c_dono = qRN.c_dono,
                                                   //c_dono = (q1.c_rnno.Trim().ToUpper().Equals("RNFLOATING") ? q1.c_rnno : qRN.c_dono),
                                                   //c_gdg = (qRN == null ? char.MinValue : qRN.c_gdg),
                                                   n_xpph = q.n_xpph.HasValue ? q.n_xpph.Value : 0,
                                                   n_ppph = q.n_ppph.HasValue ? q.n_ppph.Value : 0
                                               }).Distinct().AsQueryable();

                                var qryFloating = (from q in db.LG_FBHs
                                                   join q1 in db.LG_FBD2s on q.c_fbno equals q1.c_fbno
                                                   join q2 in db.LG_DatSups on q.c_nosup equals q2.c_nosup
                                                   join q3 in db.FA_Kurs on q.c_kurs equals q3.c_kurs into q_3
                                                   from qKURS in q_3.DefaultIfEmpty()
                                                   where q1.c_rnno == "RNFLOATING"
                                                   select new
                                                   {
                                                       q.c_fb,
                                                       q.c_fbno,
                                                       q.d_fbdate,
                                                       q.c_kurs,
                                                       v_desc_kurs = qKURS.v_desc,
                                                       q.c_nosup,
                                                       v_nama_supl = q2.v_nama,
                                                       q.c_taxno,
                                                       q.d_taxdate,
                                                       q.d_top,
                                                       q.d_toppjg,
                                                       q.l_bea,
                                                       q.l_delete,
                                                       q.l_ppn,
                                                       q.l_print,
                                                       q.n_bea,
                                                       q.n_bilva,
                                                       q.n_bruto,
                                                       q.n_disc,
                                                       q.n_kurs,
                                                       q.n_pdisc,
                                                       q.n_ppn,
                                                       q.n_sisa,
                                                       q.n_top,
                                                       q.n_toppjg,
                                                       q.n_xdisc,
                                                       q.v_ket,
                                                       q.n_bilva_faktur,
                                                       q1.c_rnno,
                                                       c_dono = "RNFLOATING",
                                                       //c_gdg = (qRN == null ? char.MinValue : qRN.c_gdg),
                                                       n_xpph = q.n_xpph.HasValue ? q.n_xpph.Value : 0,
                                                       n_ppph = q.n_ppph.HasValue ? q.n_ppph.Value : 0
                                                   }).Distinct().AsQueryable();

                                var qry = qryBeli.Union(qryFloating).Distinct().AsQueryable();

                                if ((parameters != null) && (parameters.Count > 0))
                                {
                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else if (kvp.Value.IsBetween)
                                            {

                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }

                                Logger.WriteLine(qry.Provider.ToString());

                                nCount = qry.Count();

                                if (nCount > 0)
                                {
                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }

                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                    }
                                }

                                #endregion
                            }
                            else
                            {
                                #region Detail

                                var qryBeli = (from q in db.LG_FBHs
                                               join q1 in db.LG_FBD2s on q.c_fbno equals q1.c_fbno
                                               join q2 in db.LG_DatSups on q.c_nosup equals q2.c_nosup
                                               join q3 in db.FA_Kurs on q.c_kurs equals q3.c_kurs into q_3
                                               from qKURS in q_3.DefaultIfEmpty()
                                               //join q4 in db.LG_RNHs on new { q.c_nosup, q1.c_rnno } equals new { c_nosup = q4.c_from, q4.c_rnno } into q_4
                                               //from qRN in q_4.DefaultIfEmpty()
                                               from qRN in db.LG_RNHs
                                                  .Where(rn => rn.c_from == q.c_nosup && rn.c_rnno == q1.c_rnno)
                                                  .DefaultIfEmpty()
                                               where qRN.c_type == "01"
                                               select new
                                               {
                                                   q.c_fb,
                                                   q.c_fbno,
                                                   q.d_fbdate,                                                   
                                                   q.c_nosup,
                                                   v_nama_supl = q2.v_nama,                                                   
                                                   q.n_bilva,
                                                   q.n_sisa,
                                                   q.v_ket,
                                                   q1.c_rnno,
                                                   q.l_delete,
                                                   c_dono = qRN.c_dono
                                               }).Distinct().AsQueryable();

                                var qryFloating = (from q in db.LG_FBHs
                                                   join q1 in db.LG_FBD2s on q.c_fbno equals q1.c_fbno
                                                   join q2 in db.LG_DatSups on q.c_nosup equals q2.c_nosup
                                                   join q3 in db.FA_Kurs on q.c_kurs equals q3.c_kurs into q_3
                                                   from qKURS in q_3.DefaultIfEmpty()
                                                   where q1.c_rnno == "RNFLOATING"
                                                   select new
                                                   {
                                                       q.c_fb,
                                                       q.c_fbno,
                                                       q.d_fbdate,                                                       
                                                       q.c_nosup,
                                                       v_nama_supl = q2.v_nama,
                                                       q.n_bilva,                                                       
                                                       q.n_sisa,
                                                       q.v_ket,
                                                       q1.c_rnno,
                                                       q.l_delete,
                                                       c_dono = "RNFLOATING"
                                                   }).Distinct().AsQueryable();

                                var qry = qryBeli.Union(qryFloating).Distinct().AsQueryable();

                                if ((parameters != null) && (parameters.Count > 0))
                                {
                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else if (kvp.Value.IsBetween)
                                            {

                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }

                                Logger.WriteLine(qry.Provider.ToString());

                                nCount = qry.Count();

                                if (nCount > 0)
                                {
                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }

                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                    }
                                }

                                #endregion
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_FAKTURBELIGRID_DETAIL

                    case Constant.MODEL_QUERY_FAKTURBELIGRID_DETAIL:
                        {
                            string fbNo = (parameters.ContainsKey("fakturNo") ? (string)((Functionals.ParameterParser)parameters["fakturNo"]).Value : string.Empty);

                            var qry = (from q in db.LG_FBD1s
                                       join q1 in db.FA_MasItms on q.c_iteno equals q1.c_iteno
                                       join q3 in db.MsTransDs on new { q.c_type, c_portal = '3', c_notrans = "06" } equals new { q3.c_type, q3.c_portal, q3.c_notrans } into q_3
                                       from qTypFBD in q_3.DefaultIfEmpty()
                                       where q.c_fbno == fbNo
                                       select new
                                       {
                                           q.c_iteno,
                                           q1.v_itnam,
                                           q.c_type,
                                           v_type_desc = qTypFBD.v_ket,
                                           q.n_bea,
                                           q.n_disc,
                                           q.n_qty,
                                           q.n_salpri,
                                           q.l_pph,
                                           n_ppph = q.n_ppph.HasValue ? q.n_ppph.Value : 0
                                           //,
                                           //n_discextra = q.n_discextra
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_FAKTURBELIGRID_DETAIL_BEA

                    case Constant.MODEL_QUERY_FAKTURBELIGRID_DETAIL_BEA:
                        {
                            string fbNo = (parameters.ContainsKey("fakturNo") ? (string)((Functionals.ParameterParser)parameters["fakturNo"]).Value : string.Empty);

                            var qry = (from q in db.LG_FBD3s
                                       join q1 in db.MsTransDs on new { q.c_type, c_portal = '3', c_notrans = "53" } equals new { q1.c_type, q1.c_portal, q1.c_notrans } into q_1
                                       from qBbnFBD in q_1.DefaultIfEmpty()
                                       join q2 in db.LG_MsExps on q.c_exp equals q2.c_exp into q_2
                                       from qExp in q_2.DefaultIfEmpty()
                                       where q.c_fbno == fbNo
                                       select new
                                       {
                                           q.c_type,
                                           v_type_desc = qBbnFBD.v_ket,
                                           q.c_exp,
                                           v_exp_desc = qExp.v_ket,
                                           q.d_top,
                                           q.l_delete,
                                           q.n_sisa,
                                           q.n_value,
                                           l_new = false
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #region Jual Retur

                    #region MODEL_QUERY_FAKTURJUALRETURGRID

                    case Constant.MODEL_QUERY_FAKTURJUALRETURGRID:
                        {
                            var qry = (from q in db.LG_FJRHs
                                       join q1 in db.LG_FJRD3s on q.c_fjno equals q1.c_fjno into q_1
                                       from qFJRD3 in q_1.DefaultIfEmpty()
                                       join q2 in db.LG_Cusmas on q.c_cusno equals q2.c_cusno into q_2
                                       from qCus in q_2.DefaultIfEmpty()
                                       join q3 in db.FA_Kurs on q.c_kurs equals q3.c_kurs into q_3
                                       from qKURS in q_3.DefaultIfEmpty()
                                       select new
                                       {
                                           q.c_fjno,
                                           q.d_fjdate,
                                           q.c_cusno,
                                           qCus.v_cunam,
                                           q.c_exno,
                                           q.c_taxno,
                                           q.d_taxdate,
                                           q.c_kurs,
                                           v_desc_kurs = qKURS.v_desc,
                                           q.n_kurs,
                                           q.n_gross,
                                           q.n_disc,
                                           q.n_tax,
                                           q.n_net,
                                           q.n_sisa,
                                           qFJRD3.c_dono,
                                           qFJRD3.c_rcno,
                                           qCus.l_cabang,
                                           q.l_delete
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_FAKTURJUALRETURGRID_DETAIL

                    case Constant.MODEL_QUERY_FAKTURJUALRETURGRID_DETAIL:
                        {
                            string fjrNo = (parameters.ContainsKey("fakturNo") ? (string)((Functionals.ParameterParser)parameters["fakturNo"]).Value : string.Empty);

                            var qry = (from q in db.LG_FJRD1s
                                       join q1 in db.LG_FJRD2s on new { q.c_fjno, q.c_iteno } equals new { q1.c_fjno, q1.c_iteno } into q_1
                                       from qFJD2 in q_1.DefaultIfEmpty()
                                       join q2 in db.FA_MasItms on q.c_iteno equals q2.c_iteno
                                       where q.c_fjno == fjrNo
                                       select new
                                       {
                                           q.c_fjno,
                                           q.c_iteno,
                                           q2.v_itnam,
                                           q.n_qty,
                                           q.n_salpri,
                                           qFJD2.c_type,
                                           qFJD2.n_discon,
                                           qFJD2.n_discoff
                                       });

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #region Beli Retur

                    #region MODEL_QUERY_FAKTURBELIRETURGRID

                    case Constant.MODEL_QUERY_FAKTURBELIRETURGRID:
                        {
                            var qry = (from q in db.LG_FBRHs
                                       join q1 in db.LG_FBRD2s on q.c_fbno equals q1.c_fbno into q_1
                                       from qFBRD2 in q_1.DefaultIfEmpty()
                                       join q2 in db.LG_DatSups on q.c_nosup equals q2.c_nosup
                                       join q3 in db.MsTransDs on new { q.c_type, c_portal = '3', c_notrans = "43" } equals new { q3.c_type, q3.c_portal, q3.c_notrans } into q_3
                                       from qTRD in q_3.DefaultIfEmpty()
                                       join q4 in db.FA_Kurs on q.c_kurs equals q4.c_kurs into q_4
                                       from qKURS in q_4.DefaultIfEmpty()
                                       select new
                                       {
                                           q.c_fbno,
                                           q.c_exno,
                                           q.c_kurs,
                                           v_kurs_desc = qKURS.v_desc,
                                           q.c_nosup,
                                           v_nama_supl = q2.v_nama,
                                           q.c_type,
                                           v_type_desc = qTRD.v_ket,
                                           q.d_fbdate,
                                           q.d_taxdate,
                                           q.l_import,
                                           q.l_print,
                                           q.n_bea,
                                           q.n_bilva,
                                           q.n_bruto,
                                           q.n_disc,
                                           q.n_kurs,
                                           q.n_pdisc,
                                           q.n_ppn,
                                           q.n_sisa,
                                           q.n_xdisc,
                                           q.v_ket,
                                           q.l_delete,
                                           qFBRD2.c_rsno,
                                           qFBRD2.c_rnno
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_FAKTURBELIRETURGRID_DETAIL

                    case Constant.MODEL_QUERY_FAKTURBELIRETURGRID_DETAIL:
                        {
                            string fbrNo = (parameters.ContainsKey("fakturNo") ? (string)((Functionals.ParameterParser)parameters["fakturNo"]).Value : string.Empty);

                            var qry = (from q in db.LG_FBRD1s
                                       join q1 in db.FA_MasItms on q.c_iteno equals q1.c_iteno
                                       where q.c_fbno == fbrNo
                                       select new
                                       {
                                           q.c_iteno,
                                           q.n_bea,
                                           q.n_disc,
                                           q.n_bqty,
                                           q.n_gqty,
                                           n_qty = (q.n_bqty + q.n_gqty),
                                           q.n_salpri,
                                           q1.v_itnam
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #region MODEL_QUERY_FAKTURMANUAL_GRID

                    case Constant.MODEL_QUERY_FAKTURMANUAL_GRID:
                        {
                            var qry = (from q in db.LG_FMs
                                       join q1 in
                                           ((from qq in db.LG_DatSups
                                            select new
                                            {
                                                c_nosup = qq.c_nosup,
                                                v_nama = qq.v_nama
                                            }).Union
                                            (from qq2 in db.LG_NonDatsups
                                                 select new
                                                 {
                                                    c_nosup = qq2.c_pkpno,
                                                    v_nama = qq2.v_nama
                                                 }).AsQueryable()) on q.c_nosup equals q1.c_nosup
                                       select new
                                       {
                                           q.c_fmno,
                                           q.c_nosup,
                                           q.c_taxno,
                                           q.d_taxdate,
                                           q.n_dpp,
                                           q.n_ppn,
                                           q.n_total,
                                           q.v_ket,
                                           q.v_ref,
                                           q1.v_nama
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLine(
                  "ScmsSoaLibrary.Modules.GlobalQuery:ModelGridQueryFinancial - Switch {0} - {1}", model, ex.Message);
                Logger.WriteLine(ex.StackTrace);

                dic.Add(Constant.DEFAULT_NAMING_EXCEPTION, ex.Message);

                dic.Add(Constant.DEFAULT_NAMING_SUCCESS, false);
            }

            db.Dispose();

            return dic;
        }

        public static IDictionary<string, object> ModelGridQueryAdjusment(string connectionString, int start, int limit, bool allQuery, string sort, string dir, string model, IDictionary<string, Functionals.ParameterParser> parameters)
        {
            IDictionary<string, object> dic = new Dictionary<string, object>();

            ScmsModel.ORMDataContext db = new ScmsModel.ORMDataContext(connectionString);
            //db.CommandTimeout = 1000;

            int nCount = 0;

            try
            {
                switch (model)
                {
                    #region MODEL_QUERY_ADJUSTMENT_TRANS

                    case Constant.MODEL_QUERY_ADJUSTMENT_TRANS:
                        {
                            var qry = (from q in db.LG_AdjPOHs
                                       join q1 in db.LG_MsGudangs on q.c_gdg equals q1.c_gdg
                                       where (q.l_delete == false || q.l_delete == null)
                                       select new
                                       {
                                           q.c_adjno,
                                           q.c_gdg,
                                           q.d_adjdate,
                                           q1.v_gdgdesc,
                                           q.v_ket,
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                string paternLike = null;

                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_ADJUSTMENT_TRANS_DETIL

                    case Constant.MODEL_QUERY_ADJUSTMENT_TRANS_DETIL:
                        {
                            var qry = (from q in db.LG_adjustTransHes
                                       join q1 in db.LG_AdjustTransDs on new { q.c_gdg, q.c_adjno } equals new { q1.c_gdg, q1.c_adjno }
                                       join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno
                                       where (q.l_delete == false || q.l_delete == null)
                                       && (q.c_type == "08")
                                       select new
                                       {
                                           q1.c_adjno,
                                           q1.c_gdg,
                                           q1.c_iteno,
                                           q2.v_itnam,
                                           q1.c_noref,
                                           q1.n_qty
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                string paternLike = null;

                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_ADJUSTMENT_TRANS_FAKTUR

                    case Constant.MODEL_QUERY_ADJUSTMENT_TRANS_FAKTUR:
                        {

                            string Type = (parameters.ContainsKey("Type") ? (string)((Functionals.ParameterParser)parameters["Type"]).Value : string.Empty);

                            if (Type == "05")
                            {
                                var qry = (from q in db.LG_adjustTransHes
                                           join q1 in db.MsTransDs on q.c_subtype equals q1.c_type
                                           join q2 in db.LG_Cusmas on q.c_beban equals q2.c_cusno
                                           where (q.l_delete == false || q.l_delete == null)
                                           && q1.c_notrans == "56" && q1.c_portal == '3'
                                           select new
                                           {
                                               q.c_adjno,
                                               q.d_adjdate,
                                               q.c_beban,
                                               q2.v_cunam,
                                               v_ketTran = q1.v_ket,
                                               q.v_ket,
                                               q.c_type,
                                               q.c_subtype
                                           }).Distinct().AsQueryable();

                                if ((parameters != null) && (parameters.Count > 0))
                                {
                                    string paternLike = null;

                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else if (kvp.Value.IsBetween)
                                            {

                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }

                                Logger.WriteLine(qry.Provider.ToString());

                                nCount = qry.Count();

                                if (nCount > 0)
                                {
                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }

                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                    }
                                }

                                dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                            }
                            else
                            {
                                var qry = (from q in db.LG_adjustTransHes
                                           join q1 in db.MsTransDs on q.c_subtype equals q1.c_type
                                           join q2 in db.LG_DatSups on q.c_beban equals q2.c_nosup
                                           where (q.l_delete == false || q.l_delete == null)
                                           && q1.c_notrans == "57" && q1.c_portal == '3'
                                           select new
                                           {
                                               q.c_adjno,
                                               q.d_adjdate,
                                               q.c_beban,
                                               v_cunam = q2.v_nama,
                                               v_ketTran = q1.v_ket,
                                               q.v_ket,
                                               q.c_type,
                                               q.c_subtype
                                           }).Distinct().AsQueryable();

                                if ((parameters != null) && (parameters.Count > 0))
                                {
                                    string paternLike = null;

                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else if (kvp.Value.IsBetween)
                                            {

                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }

                                Logger.WriteLine(qry.Provider.ToString());

                                nCount = qry.Count();

                                if (nCount > 0)
                                {
                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }

                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                    }
                                }

                                dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                            }
                        }
                        break;
                    #endregion

                    #region MODEL_QUERY_ADJUSTMENT_TRANS_FAKTUR_DETIL

                    case Constant.MODEL_QUERY_ADJUSTMENT_TRANS_FAKTUR_DETIL:
                        {
                            var qry = (from q in db.LG_AdjustTransDs
                                       join q1 in db.LG_adjustTransHes on q.c_adjno equals q1.c_adjno
                                       select new
                                       {
                                           q.c_adjno,
                                           q.c_noref,
                                           v_ketTran = q.v_ket,
                                           q.n_value,
                                           q1.c_type,
                                           q1.c_subtype,
                                           q.v_ket
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                string paternLike = null;

                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_ADJUSTMENT_TRANS_VOUCHER

                    case Constant.MODEL_QUERY_ADJUSTMENT_TRANS_VOUCHER:
                        {

                            var qry = (from q in db.LG_adjustTransHes
                                       join q1 in db.MsTransDs on q.c_type equals q1.c_type
                                       where (q.l_delete == false || q.l_delete == null)
                                       && q1.c_notrans == "55" && q1.c_portal == '3'
                                       select new
                                       {
                                           q.c_adjno,
                                           q.d_adjdate,
                                           v_ketTran = q1.v_ket,
                                           q.v_ket,
                                           q.c_type
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                string paternLike = null;

                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);

                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_ADJUSTMENT_TRANS_VOUCHER_CREDIT_DETIL

                    case Constant.MODEL_QUERY_ADJUSTMENT_TRANS_VOUCHER_CREDIT_DETIL:
                        {
                            var qry = (from q in db.LG_adjustTransHes
                                       join q2 in db.LG_AdjustTransDs on q.c_adjno equals q2.c_adjno
                                       join q1 in db.MsTransDs on q2.c_type equals q1.c_type
                                       join q3 in db.LG_VCNHs on q2.c_noref equals q3.c_vcno
                                       where (q.l_delete == false || q.l_delete == null)
                                       && q1.c_notrans == "54" && q1.c_portal == '3'
                                       select new
                                       {
                                           q.c_adjno,
                                           q.d_adjdate,
                                           v_ketTran = q1.v_ket,
                                           q2.c_type,
                                           q2.n_value,
                                           q2.c_noref,
                                           q2.v_ket,
                                           q3.n_sisa
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                string paternLike = null;

                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_ADJUSTMENT_TRANS_VOUCHER_DEBIT_DETIL

                    case Constant.MODEL_QUERY_ADJUSTMENT_TRANS_VOUCHER_DEBIT_DETIL:
                        {
                            var qry = (from q in db.LG_adjustTransHes
                                       join q2 in db.LG_AdjustTransDs on q.c_adjno equals q2.c_adjno
                                       join q1 in db.MsTransDs on q2.c_type equals q1.c_type
                                       join q3 in db.LG_VDNHs on q2.c_noref equals q3.c_vdno
                                       where (q.l_delete == false || q.l_delete == null)
                                       && q1.c_notrans == "54" && q1.c_portal == '3'
                                       select new
                                       {
                                           q.c_adjno,
                                           q.d_adjdate,
                                           v_ketTran = q1.v_ket,
                                           q2.c_type,
                                           q2.n_value,
                                           q2.c_noref,
                                           q2.v_ket,
                                           q3.n_sisa
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                string paternLike = null;

                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_ADJUSTMENT_TRANS_VOUCHER_DEBIT

                    case Constant.MODEL_QUERY_ADJUSTMENT_TRANS_VOUCHER_DEBIT:
                        {

                            var qry = (from q in db.LG_VDNHs
                                       where q.n_sisa > 0 &&
                                       (q.l_delete == false || q.l_delete == null)
                                       select new
                                       {
                                           c_noref = q.c_vdno,
                                           q.n_sisa,
                                           q.d_vddate
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                string paternLike = null;

                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;
                    #endregion

                    #region MODEL_QUERY_ADJUSTMENT_TRANS_VOUCHER_CREDIT

                    case Constant.MODEL_QUERY_ADJUSTMENT_TRANS_VOUCHER_CREDIT:
                        {
                            var qry = (from q in db.LG_VCNHs
                                       where q.n_sisa > 0 &&
                                       (q.l_delete == false || q.l_delete == null)
                                       select new
                                       {
                                           c_noref = q.c_vcno,
                                           q.n_sisa,
                                           q.d_vcdate
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                string paternLike = null;

                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_ADJUSTMENT_TRANS_MEMO

                    case Constant.MODEL_QUERY_ADJUSTMENT_TRANS_MEMO:
                        {
                            var qry = (from q in db.LG_VCNHs
                                       where q.n_sisa > 0 &&
                                       (q.l_delete == false || q.l_delete == null)
                                       select new
                                       {
                                           c_noref = q.c_vcno,
                                           q.n_sisa,
                                           q.d_vcdate
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                string paternLike = null;

                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_ADJUSTMENT_TRANS_STT

                    case Constant.MODEL_QUERY_ADJUSTMENT_TRANS_STT:
                        {
                            var qry1 = (from q in db.LG_AdjSTHs
                                        join q1 in db.MsTransDs on q.c_beban equals q1.c_type
                                        where (q.l_delete == false || q.l_delete == null)
                                        && q1.c_notrans == "50" && q1.c_portal == '3'
                                        select new
                                        {
                                            q.c_adjno,
                                            q.d_adjdate,
                                            q.c_beban,
                                            q.c_gdg,
                                            q.v_ket,
                                            v_ketTrans = q1.v_ket,
                                            q.c_type
                                        }).Distinct().AsQueryable();

                            var qry = (from q in qry1
                                       join q2 in db.LG_MsGudangs on q.c_gdg equals q2.c_gdg
                                       select new
                                       {
                                           q.c_adjno,
                                           q.c_beban,
                                           q.c_type,
                                           q2.v_gdgdesc,
                                           q.c_gdg,
                                           q.d_adjdate,
                                           q.v_ket,
                                           v_jenis = q.v_ketTrans,
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                string paternLike = null;

                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_ADJUSTMENT_TRANS_STT_DETIL

                    case Constant.MODEL_QUERY_ADJUSTMENT_TRANS_STT_DETIL:
                        {
                            var qry = (from q in db.LG_AdjSTDs
                                       join q1 in db.LG_AdjSTHs on q.c_adjno equals q1.c_adjno
                                       join q2 in db.FA_MasItms on q.c_iteno equals q2.c_iteno
                                       select new
                                       {
                                           q.c_adjno,
                                           c_noref = q.c_stno,
                                           q2.v_itnam,
                                           q.c_iteno,
                                           q.c_batch,
                                           q.n_qty,
                                           q1.c_type,
                                           q.c_gdg
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                string paternLike = null;

                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_ADJUSTMENT_TRANS_STT_NO

                    case Constant.MODEL_QUERY_ADJUSTMENT_TRANS_STT_NO:
                        {
                            char gdg = (parameters.ContainsKey("c_gdg") ? (char)((Functionals.ParameterParser)parameters["c_gdg"]).Value : '?');
                            string type = (parameters.ContainsKey("c_type") ? (string)((Functionals.ParameterParser)parameters["c_type"]).Value : string.Empty);

                            var qry = (from q in db.LG_STHs
                                       join q1 in db.LG_STD1s on new { q.c_gdg, q.c_stno } equals new { q1.c_gdg, q1.c_stno }
                                       where (q.l_delete == false || q.l_delete == null)
                                       && q1.n_sisa > 0 && q.c_gdg == gdg && q.c_type == type
                                       select new
                                       {
                                           q.c_gdg,
                                           q.c_type,
                                           c_noref = q.c_stno,
                                           q.d_stdate
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                string paternLike = null;

                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_COMMON_QUERY_MULTIPLE_ADJ_NO_FAKTUR

                    case Constant.MODEL_COMMON_QUERY_MULTIPLE_ADJ_NO_FAKTUR:
                        {
                            string Type = (parameters.ContainsKey("Type") ? (string)((Functionals.ParameterParser)parameters["Type"]).Value : string.Empty);
                            string cusno = (parameters.ContainsKey("cusno") ? (string)((Functionals.ParameterParser)parameters["cusno"]).Value : string.Empty);

                            if (Type == "02")
                            {
                                var qry = (from q in db.LG_FJRHs
                                           where q.c_cusno == cusno
                                           && q.n_sisa > 0
                                           select new
                                           {
                                               c_noref = q.c_fjno,
                                               q.d_fjdate,
                                               q.n_sisa
                                           }).Distinct().AsQueryable();

                                if ((parameters != null) && (parameters.Count > 0))
                                {
                                    string paternLike = null;

                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else if (kvp.Value.IsBetween)
                                            {

                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }

                                Logger.WriteLine(qry.Provider.ToString());

                                nCount = qry.Count();

                                if (nCount > 0)
                                {
                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }

                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                    }
                                }

                                dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                            }
                            else
                            {
                                var qry = (from q in db.LG_FJHs
                                           where q.c_cusno == cusno
                                           && q.n_sisa > 0
                                           select new
                                           {
                                               c_noref = q.c_fjno,
                                               q.d_fjdate,
                                               q.n_sisa
                                           }).Distinct().AsQueryable();

                                if ((parameters != null) && (parameters.Count > 0))
                                {
                                    string paternLike = null;

                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else if (kvp.Value.IsBetween)
                                            {

                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }

                                Logger.WriteLine(qry.Provider.ToString());

                                nCount = qry.Count();

                                if (nCount > 0)
                                {
                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }

                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                    }
                                }

                                dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                            }
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_ADJUSTMENT_TRANS_STT_BATCH

                    case Constant.MODEL_QUERY_ADJUSTMENT_TRANS_STT_BATCH:
                        {
                            string stno = (parameters.ContainsKey("c_stno") ? (string)((Functionals.ParameterParser)parameters["c_stno"]).Value : string.Empty);
                            string item = (parameters.ContainsKey("item") ? (string)((Functionals.ParameterParser)parameters["item"]).Value : string.Empty);

                            var qry = (from q in db.LG_STHs
                                       join q1 in db.LG_STD1s on new { q.c_gdg, q.c_stno } equals new { q1.c_gdg, q1.c_stno }
                                       join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno
                                       where (q.l_delete == false || q.l_delete == null)
                                       && q1.n_sisa > 0 && q.c_stno == stno && q1.c_iteno == item
                                       select new
                                       {
                                           q.c_gdg,
                                           c_noref = q.c_stno,
                                           q.d_stdate,
                                           q2.v_itnam,
                                           q2.c_iteno,
                                           q2.l_aktif,
                                           q2.l_hide,
                                           q1.c_batch,
                                           q1.n_sisa
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                string paternLike = null;

                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_ADJUSTMENT_TRANS_STT_ITEM

                    case Constant.MODEL_QUERY_ADJUSTMENT_TRANS_STT_ITEM:
                        {
                            string stno = (parameters.ContainsKey("c_stno") ? (string)((Functionals.ParameterParser)parameters["c_stno"]).Value : string.Empty);

                            var qry = (from q in db.LG_STHs
                                       join q1 in db.LG_STD1s on new { q.c_gdg, q.c_stno } equals new { q1.c_gdg, q1.c_stno }
                                       join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno
                                       where (q.l_delete == false || q.l_delete == null)
                                       && q1.n_sisa > 0 && q.c_stno == stno
                                       select new
                                       {
                                           c_noref = q.c_stno,
                                           q.d_stdate,
                                           q2.v_itnam,
                                           q2.c_iteno,
                                           q2.l_aktif,
                                           q2.l_hide,
                                           q1.c_batch,
                                           q1.n_sisa
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                string paternLike = null;

                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_COMMON_QUERY_MULTIPLE_ADJ_NO_FAKTUR_FB

                    case Constant.MODEL_COMMON_QUERY_MULTIPLE_ADJ_NO_FAKTUR_FB:
                        {
                            string Type = (parameters.ContainsKey("Type") ? (string)((Functionals.ParameterParser)parameters["Type"]).Value : string.Empty);
                            string Supplier = (parameters.ContainsKey("Supplier") ? (string)((Functionals.ParameterParser)parameters["Supplier"]).Value : string.Empty);

                            if (Type == "02")
                            {
                                var qry = (from q in db.LG_FBRHs
                                           where q.c_nosup == Supplier
                                           && q.n_sisa > 0
                                           select new
                                           {
                                               c_noref = q.c_fbno,
                                               q.d_fbdate,
                                               q.n_sisa
                                           }).Distinct().AsQueryable();

                                if ((parameters != null) && (parameters.Count > 0))
                                {
                                    string paternLike = null;

                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else if (kvp.Value.IsBetween)
                                            {

                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }

                                Logger.WriteLine(qry.Provider.ToString());

                                nCount = qry.Count();

                                if (nCount > 0)
                                {
                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }

                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                    }
                                }

                                dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                            }
                            else
                            {
                                var qry = (from q in db.LG_FBHs
                                           where q.c_nosup == Supplier
                                           && q.n_sisa > 0
                                           select new
                                           {
                                               c_noref = q.c_fbno,
                                               q.d_fbdate,
                                               q.n_sisa
                                           }).Distinct().AsQueryable();

                                if ((parameters != null) && (parameters.Count > 0))
                                {
                                    string paternLike = null;

                                    foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                    {
                                        if (kvp.Value.IsCondition)
                                        {
                                            if (kvp.Value.IsLike)
                                            {
                                                paternLike = kvp.Value.Value.ToString();
                                                qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                            }
                                            else if (kvp.Value.IsBetween)
                                            {

                                            }
                                            else
                                            {
                                                qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                            }
                                        }
                                    }
                                }

                                Logger.WriteLine(qry.Provider.ToString());

                                nCount = qry.Count();

                                if (nCount > 0)
                                {
                                    if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                    {
                                        qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                    }

                                    if ((limit == -1) || allQuery)
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                    }
                                    else
                                    {
                                        dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                    }
                                }

                                dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                                dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                            }
                        }
                        break;

                    #endregion

                    #region PO Adj

                    case Constant.MODEL_COMMON_QUERY_MULTIPLE_ADJ_NO_PO:
                        {
                            var qry = (from q1 in db.LG_POHs
                                       join q2 in db.LG_POD1s on q1.c_pono equals q2.c_pono
                                       where (q1.l_delete == false || q1.l_delete == null)
                                       && q2.n_sisa > 0 && (SqlMethods.DateDiffMonth(q1.d_podate, DateTime.Today) < 2)
                                       select new
                                       {
                                           q1.c_pono,
                                           q1.d_podate,
                                           q1.c_gdg
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                string paternLike = null;

                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);

                        }
                        break;

                    #endregion

                    #region PO Adj ITEM

                    case Constant.MODEL_COMMON_QUERY_MULTIPLE_ADJ_NO_PO_ITEM:
                        {
                            char gdg = (parameters.ContainsKey("gdg") ? (char)((Functionals.ParameterParser)parameters["gdg"]).Value : '?');
                            string pono = (parameters.ContainsKey("pono") ? (string)((Functionals.ParameterParser)parameters["pono"]).Value : string.Empty);

                            var qry = (from q in db.LG_POD1s
                                       join q2 in db.LG_POHs on q.c_pono equals q2.c_pono
                                       join q1 in db.FA_MasItms on q.c_iteno equals q1.c_iteno
                                       where (q.c_gdg == gdg) && (q.c_pono == pono)
                                       && (q.n_sisa > 0)
                                       select new
                                       {
                                           q.c_iteno,
                                           q1.v_itnam,
                                           q.n_sisa,
                                           q.c_pono,
                                           q2.c_gdg
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                string paternLike = null;

                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLine(
                  "ScmsSoaLibrary.Modules.CommonQuery:ModelGridQueryAdjusment <-> Switch {0} - {1}", model, ex.Message);
                Logger.WriteLine(ex.StackTrace);

                dic.Add(Constant.DEFAULT_NAMING_SUCCESS, false);
            }

            db.Dispose();

            return dic;

        }

        public static IDictionary<string, object> ModelGridQueryMaster(string connectionString, int start, int limit, bool allQuery, string sort, string dir, string model, IDictionary<string, Functionals.ParameterParser> parameters)
        {
            IDictionary<string, object> dic = new Dictionary<string, object>();

            ScmsModel.ORMDataContext db = new ScmsModel.ORMDataContext(connectionString);
            //db.CommandTimeout = 1000;

            int nCount = 0;
            string paternLike = null;

            try
            {
                switch (model)
                {
                    #region Discount

                    #region MODEL_QUERY_DISCOUNTGRID

                    case Constant.MODEL_QUERY_MASTER_DISCOUNTGRID:
                        {
                            string tipeDisc = (parameters.ContainsKey("typeDiscount") ? (string)((Functionals.ParameterParser)parameters["typeDiscount"]).Value : string.Empty);

                            DateTime date = DateTime.Now;

                            var qry = (from q in db.FA_DiscHes
                                       join q1 in db.FA_DiscDs on q.c_nodisc equals q1.c_nodisc
                                       join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno into q_2
                                       from qItm in q_2.DefaultIfEmpty()
                                       where q.c_type == tipeDisc
                                           //&& ((q1.d_start >= date) && (q1.d_finish <= date))
                                        && (qItm.l_aktif == true)
                                       select new
                                       {
                                           q.c_nodisc,
                                           q1.c_iteno,
                                           qItm.v_itnam,
                                           l_aktif = (q1.l_aktif.HasValue ? q1.l_aktif.Value : false),
                                           l_status = (q1.l_status.HasValue ? q1.l_status.Value : false),
                                           n_discon = (q1.l_aktif.Value && q1.l_status.Value ? q1.n_discon : 0),
                                           n_discoff = (q1.l_aktif.Value && q1.l_status.Value ? q1.n_discoff : 0),
                                           d_start = (q1.l_aktif.Value && q1.l_status.Value ? q1.d_start : Functionals.StandardSqlDateTime),
                                           d_finish = (q1.l_aktif.Value && q1.l_status.Value ? q1.d_finish : Functionals.StandardSqlDateTime)
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_DISCOUNTGRID_DETAIL

                    case Constant.MODEL_QUERY_MASTER_DISCOUNTGRID_DETAIL:
                        {
                            string discNo = (parameters.ContainsKey("noDiscount") ? (string)((Functionals.ParameterParser)parameters["noDiscount"]).Value : string.Empty);
                            string itemNo = (parameters.ContainsKey("noItem") ? (string)((Functionals.ParameterParser)parameters["noItem"]).Value : string.Empty);

                            DateTime date = DateTime.Now;

                            var qry = (from q1 in db.FA_DiscDs
                                       join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno into q_2
                                       from qItm in q_2.DefaultIfEmpty()
                                       where q1.c_nodisc == discNo && q1.c_iteno == itemNo
                                       select new
                                       {
                                           q1.c_nodisc,
                                           q1.c_iteno,
                                           qItm.v_itnam,
                                           l_aktif = (q1.l_aktif.HasValue ? q1.l_aktif.Value : false),
                                           l_status = (q1.l_status.HasValue ? q1.l_status.Value : false),
                                           n_discon = (q1.l_aktif.Value && q1.l_status.Value ? q1.n_discon : 0),
                                           n_discoff = (q1.l_aktif.Value && q1.l_status.Value ? q1.n_discoff : 0),
                                           d_start = (q1.l_aktif.Value && q1.l_status.Value ? q1.d_start : Functionals.StandardSqlDateTime),
                                           d_finish = (q1.l_aktif.Value && q1.l_status.Value ? q1.d_finish : Functionals.StandardSqlDateTime)
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_DISCOUNTGRID_DETAIL_SPESIFIK

                    case Constant.MODEL_QUERY_MASTER_DISCOUNTGRID_DETAIL_SPESIFIK:
                        {
                            string discNo = (parameters.ContainsKey("noDiscount") ? (string)((Functionals.ParameterParser)parameters["noDiscount"]).Value : string.Empty);
                            string itemNo = (parameters.ContainsKey("noItem") ? (string)((Functionals.ParameterParser)parameters["noItem"]).Value : string.Empty);

                            DateTime date = DateTime.Now;

                            var qry = (from q in db.FA_DiscD1s
                                       where q.c_nodisc == discNo && q.c_iteno == itemNo
                                       select new
                                       {
                                           q.c_iteno,
                                           q.c_nodisc,
                                           q.d_finish,
                                           q.d_start,
                                           q.IDX,
                                           q.l_aktif,
                                           q.l_delete,
                                           q.l_status,
                                           q.n_discoff,
                                           q.n_discon
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #region MODEL_QUERY_MASTER_ITEM

                    case Constant.MODEL_QUERY_MASTER_ITEM:
                        {
                            var qry = (from q in db.FA_MasItms
                                       join q1 in db.LG_DatSups on q.c_nosup equals q1.c_nosup
                                       join q2 in db.MsTransDs on new { c_portal = '3', c_notrans = "11", q.c_type } equals new { q2.c_portal, q2.c_notrans, q2.c_type } into q_2
                                       from qJenis in q_2.DefaultIfEmpty()
                                       join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "02", c_type = q.c_via } equals new { q3.c_portal, q3.c_notrans, q3.c_type } into q_3
                                       from qVia in q_3.DefaultIfEmpty()
                                       join q4 in db.MsTransDs on new { c_portal = '3', c_notrans = "61", c_type = q.c_golongan } equals new { q4.c_portal, q4.c_notrans, q4.c_type } into q_4

                                       join q5 in db.FA_DivAMs on q.c_iteno equals q5.c_iteno into q_5
                                       from qDivAMS in q_5.DefaultIfEmpty()
                                       join q6 in db.FA_MsDivAMs on qDivAMS.c_kddivams equals q6.c_kddivams

                                       join q7 in db.FA_Divpris on q.c_iteno equals q7.c_iteno into q_6
                                       from qDivPri in q_6.DefaultIfEmpty()
                                       join q8 in db.FA_MsDivPris on qDivPri.c_kddivpri equals q8.c_kddivpri

                                       from qGol in q_4.DefaultIfEmpty()
                                       select new
                                       {
                                           q.c_nosup,
                                           q1.v_nama,
                                           q.c_alkes,
                                           q.c_iteno,
                                           q.c_itenopri,
                                           q.c_type,
                                           Jenis = qJenis.v_ket,
                                           q.c_via,
                                           Via = qVia.v_ket,
                                           q.v_itnam,
                                           q.v_acronim,
                                           q.v_undes,
                                           q.n_salpri,
                                           q.n_qtykons,
                                           q.n_qminord,
                                           q.n_pminord,
                                           q.n_PBF,
                                           q.n_estimasi,
                                           q.n_disc,
                                           q.n_box,
                                           q.n_bonus,
                                           q.n_beli,
                                           q.l_import,
                                           q.l_delete,
                                           q.l_aktif,
                                           q.l_berat,
                                           q.l_dinkes,
                                           q.l_combo,
                                           q.l_opname,
                                           q.l_hide,
                                           q.c_nie,
                                           q.d_nie,
                                           q.v_komposisi,
                                           q.c_golongan,
                                           v_golongan = qGol.v_ket,

                                           qDivAMS.c_kddivams,
                                           q6.v_nmdivams,

                                           qDivPri.c_kddivpri,
                                           q8.v_nmdivpri


                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region Batch

                    #region MODEL_QUERY_MASTER_BATCH

                    case Constant.MODEL_QUERY_MASTER_BATCH:
                        {
                            var qry = (from q in db.FA_MasItms
                                       where ((q.l_aktif.HasValue ? q.l_aktif.Value : true) == true)
                                        && ((q.l_hide.HasValue ? q.l_hide.Value : false) == false)
                                       select new
                                       {
                                           q.c_iteno,
                                           q.c_itenopri,
                                           q.v_itnam,
                                           q.v_acronim,
                                           q.v_undes,
                                           q.l_delete,
                                           q.v_ket_mark
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_MASTER_BATCH_DETAIL

                    case Constant.MODEL_QUERY_MASTER_BATCH_DETAIL:
                        {
                            string itemNo = (parameters.ContainsKey("noItem") ? (string)((Functionals.ParameterParser)parameters["noItem"]).Value : string.Empty);

                            var qry = (from q in db.LG_MsBatches
                                       where (q.c_iteno == itemNo)
                                       select new
                                       {
                                           q.c_batch,
                                           q.d_expired,
                                           q.c_entry,
                                           q.d_entry,
                                           q.c_update,
                                           q.d_update
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #region MODEL_QUERY_MASTER_PRISIPAL
                    //Indra 20171231FM
                    case Constant.MODEL_QUERY_MASTER_PRISIPAL:
                        {

                            var qry = (from q in db.LG_DatSups
                                       join q1 in db.Lg_Datsup_Approvals on q.c_noda equals q1.c_noda into q_1
                                       from qItm in q_1.DefaultIfEmpty()
                                       join q2 in db.HR_MsKries on qItm.c_requestor equals q2.c_nip into q_2
                                       from qItm2 in q_2.DefaultIfEmpty()
                                       join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "68", c_type = qItm.c_status } equals new { q3.c_portal, q3.c_notrans, q3.c_type } into q_3
                                       from qItm3 in q_3.DefaultIfEmpty()
                                       join q4 in db.HR_Bawahans on qItm.c_requestor equals q4.c_nipbwhn into q_4
                                       from qItm4 in q_4.DefaultIfEmpty()
                                       where q.v_nama.Trim() != string.Empty
                                       && (q.l_delete == false || q.l_delete == null)
                                       select new
                                       {
                                           q.l_aktif,
                                           q.l_fax,
                                           q.l_hide,
                                           q.l_import,
                                           q.n_index,
                                           q.c_area,
                                           q.c_kdgol,
                                           q.c_nosup,
                                           q.d_tglpkp,
                                           q.l_konsinyasi,
                                           //q.n_leadtime,
                                           n_leadtime = (q.c_noda != null && qItm.d_efectivedate <= DateTime.Now && qItm.c_status == "01") ? qItm.n_leadtime_akhir : (q.c_noda != null && qItm.d_efectivedate <= DateTime.Now && qItm.c_status != "01") ? qItm.n_leadtime_awal : q.n_leadtime,
                                           q.n_top,
                                           q.n_xdisc,
                                           q.v_acccode,
                                           q.v_accno1,
                                           q.v_accno2,
                                           q.v_alamat1,
                                           q.v_alamat2,
                                           q.v_alamatbank,
                                           q.v_boss,
                                           q.v_contact,
                                           q.v_fax1,
                                           q.v_fax2,
                                           q.v_fax3,
                                           q.v_nama,
                                           q.v_namabank,
                                           q.v_namatax,
                                           q.v_nppkp,
                                           q.v_npwp,
                                           q.v_taxseri,
                                           q.v_telepon1,
                                           q.v_telepon2,
                                           q.v_telepon3,
                                           q.v_alamat1_tax,
                                           q.v_alamat2_tax,
                                           qItm.c_noda,
                                           n_leadtime_akhir = (q.c_noda != null && (qItm.c_status == "01" || qItm.c_status == "02")) ? qItm.n_leadtime_akhir : (q.c_noda != null && qItm.c_status == "03") ? qItm.n_leadtime_awal : q.n_leadtime,
                                           qItm.c_alasan_perubahan,
                                           qItm.c_requestor,
                                           qItm.d_requestor,
                                           qItm.c_approval,
                                           qItm.d_approval,
                                           qItm.c_alasan_approval,
                                           qItm.d_efectivedate,
                                           qItm.c_status,
                                           keterangan = (qItm.d_efectivedate > DateTime.Now && (qItm.c_status == "01" || qItm.c_status == "02")) ? qItm.d_efectivedate : null,
                                           requestor = qItm2.v_nama,
                                           v_ket = qItm3.v_ket == "Waiting" ? qItm3.v_ket : "Ok",
                                           qItm4.c_nipbwhn,
                                           qItm4.c_nipatsn
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_MASTER_PRISIPAL_HISTORY_LEADTIME
                    //Indra 20180815 
                    case Constant.MODEL_QUERY_MASTER_PRISIPAL_HISTORY_LEADTIME:
                    {
                        var qry = (from q in db.Lg_Datsup_Approvals
                                   join q1 in db.LG_DatSups on q.c_nosup equals q1.c_nosup
                                   join q2 in db.HR_MsKries on q.c_requestor equals q2.c_nip
                                   join q3 in db.HR_MsKries on q.c_approval equals q3.c_nip into q_3
                                   from qItm in q_3.DefaultIfEmpty()                                   
                                   join q4 in db.MsTransDs on new { c_portal = '3', c_notrans = "68", c_type = q.c_status } equals new { q4.c_portal, q4.c_notrans, q4.c_type }
                                   
                                   select new
                                   {
                                       KODE_SUPPLIER		= q.c_nosup,
                                       NAMA_SUPPLIER		= q1.v_nama,
                                       NAMA_REQUESTOR		= q2.v_nama,   
                                       ALASAN_REQUEST		= q.c_alasan_perubahan,
                                       TGL_REQUEST		    = q.d_requestor,
                                       NAMA_APPROVAL		= qItm.v_nama,
                                       ALASAN_APPROVAL	    = q.c_alasan_approval,
                                       TGL_APPROVAL		    = q.d_approval,
                                       LEADTIME_AWAL		= q.n_leadtime_awal,
                                       LEADTIME_PERUBAHAN   = q.n_leadtime_akhir,
                                       EFFECTTIVE_LEADTIME  = q.d_efectivedate,
                                       STATUS               = q4.v_ket
                                   }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_HISTORY_SP
                        //Suwandi 07 Agustus 2019
                    case Constant.MODEL_QUERY_HISTORY_SP:
                        {
                            string spNo = (parameters.ContainsKey("spno") ? (string)((Functionals.ParameterParser)parameters["spno"]).Value : string.Empty);

                            var qry = (from q in db.LG_SPUPDATEs
                                       join q1 in db.HR_MsKries on q.c_entry equals q1.c_nip
                                       where q.c_spno == spNo
                                       select new
                                       {
                                           q.c_spno,
                                           q.c_sp,
                                           q.d_entry,
                                           q.d_before,
                                           q.d_after,
                                           q1.v_nama
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region Budget

                    #region Limit

                    #region MODEL_QUERY_MASTER_BUDGET

                    case Constant.MODEL_QUERY_MASTER_BUDGET:
                        {
                            decimal tahun = (parameters.ContainsKey("tahun") ? (decimal)((Functionals.ParameterParser)parameters["tahun"]).Value : 0);
                            decimal bulan = (parameters.ContainsKey("bulan") ? (decimal)((Functionals.ParameterParser)parameters["bulan"]).Value : 0);

                            var qry = (from q in db.LG_DatSups
                                       join q1 in
                                           (from sq in db.LG_DatSupServiceHs
                                            where ((tahun == 0 ? sq.n_tahun : tahun) == sq.n_tahun)
                                              && ((bulan == 0 ? sq.n_bulan : bulan) == sq.n_bulan)
                                            select new
                                            {
                                                sq.c_nosup,
                                                sq.n_tahun,
                                                sq.n_bulan,
                                                sq.limit,
                                                sq.avaiblelimit,
                                                sq.d_nextlimit
                                            }) on q.c_nosup equals q1.c_nosup into q_1
                                       from qBL in q_1.DefaultIfEmpty()
                                       where q.l_aktif == true && q.l_hide == false
                                       //&& (string.IsNullOrEmpty(supl) ? q.C_nosup : supl) == q.C_nosup
                                       select new
                                       {
                                           q.c_nosup,
                                           q.v_nama,
                                           n_tahun = (qBL != null ? (qBL.n_tahun.HasValue ? qBL.n_tahun.Value : 0) : 0),
                                           n_bulan = (qBL != null ? (qBL.n_bulan.HasValue ? qBL.n_bulan.Value : 0) : 0),
                                           n_limit = (qBL != null ? (qBL.limit.HasValue ? qBL.limit.Value : 0) : 0),
                                           n_avaiblelimit = (qBL != null ? (qBL.avaiblelimit.HasValue ? qBL.avaiblelimit.Value : 0) : 0),
                                           n_nextlimit = (qBL != null ? (qBL.d_nextlimit.HasValue ? qBL.d_nextlimit.Value : 0) : 0)
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_MASTER_BUDGET_DETAIL

                    case Constant.MODEL_QUERY_MASTER_BUDGET_DETAIL:
                        {
                            string supl = (parameters.ContainsKey("supplier") ? (string)((Functionals.ParameterParser)parameters["supplier"]).Value : string.Empty);
                            decimal tahun = (parameters.ContainsKey("tahun") ? (decimal)((Functionals.ParameterParser)parameters["tahun"]).Value : 0);
                            decimal bulan = (parameters.ContainsKey("bulan") ? (decimal)((Functionals.ParameterParser)parameters["bulan"]).Value : 0);

                            var qry = (from q in db.LG_DatSupServiceDs
                                       where (q.c_nosup == supl)
                                         && (q.n_tahun == tahun) && (q.n_bulan == bulan)
                                       select q).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #endregion

                    #region Divisi Prinsipal

                    case Constant.MODEL_QUERY_MASTER_DIVISIPRINSIPAL:
                        {
                            var qry = (from q in db.FA_MsDivPris
                                       join q1 in db.LG_DatSups on q.c_nosup equals q1.c_nosup
                                       where (q.l_delete == false || q.l_delete == null)
                                       && q.l_hide == false
                                       select new
                                       {
                                           q.c_kddivpri,
                                           q.v_nmdivpri,
                                           q.c_nosup,
                                           q.l_aktif,
                                           q.l_hide,
                                           q.n_het,
                                           q.n_idxnp,
                                           q.n_idxp,
                                           q1.v_nama
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region Divisi Prisipal Item

                    case Constant.MODEL_QUERY_MASTER_DIVISIPRINSIPAL_DETIL:
                        {
                            var qry = (from q in db.FA_Divpris
                                       join q1 in db.FA_MasItms on q.c_iteno equals q1.c_iteno
                                       where (q1.l_delete == false || q1.l_delete == null)
                                       select new
                                       {
                                           q.c_iteno,
                                           q1.v_itnam,
                                           q1.v_undes,
                                           q.c_kddivpri
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    case Constant.MODEL_QUERY_MASTER_DIVISIPRINSIPAL_ITEM:
                        {
                            var qry = (from q in db.FA_MasItms
                                       join q1 in db.FA_Divpris on q.c_iteno equals q1.c_iteno into gq
                                       from gqLeft in gq.DefaultIfEmpty()
                                       where gqLeft.c_iteno == null
                                       && (q.l_aktif == true)
                                       select new
                                       {
                                           q.c_iteno,
                                           q.v_itnam,
                                           q.v_acronim,
                                           q.c_nosup,
                                           q.v_undes
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region Master Customer

                    case Constant.MODEL_QUERY_MASTER_CUSTOMER:
                        {
                            var qry = (from q in db.LG_Cusmas
                                       join q1 in db.MsTransDs on new { c_portal = '3', c_notrans = "59", c_type = q.c_sektor } equals new { q1.c_portal, q1.c_notrans, q1.c_type } into q_1
                                       from qMTD in q_1.DefaultIfEmpty()
                                       join q2 in db.LG_MsGudangs on q.c_gdg equals q2.c_gdg
                                       select new
                                       {
                                           q.c_cab,
                                           q.c_cusno,
                                           q.c_gdg,
                                           q.c_npkp,
                                           q.c_npwp,
                                           q.c_sektor,
                                           q.d_buka,
                                           q.d_npkp,
                                           q.d_tutup,
                                           q.l_askes,
                                           q.l_cabang,
                                           q.l_dispen,
                                           q.l_hide,
                                           q.l_materai,
                                           q.l_stscus,
                                           q.n_crlimit,
                                           q.n_fee,
                                           q.t_top,
                                           q.t_toppjg,
                                           q.v_accno,
                                           q.v_adrbill1,
                                           q.v_adrbill2,
                                           q.v_adrtax1,
                                           q.v_adrtax2,
                                           q.v_citybill,
                                           q.v_citytax,
                                           q.v_cunam,
                                           q.v_fax,
                                           q.v_nmbank,
                                           q.v_nmowner,
                                           q.v_tagih,
                                           q.v_taxname,
                                           q.v_telp1,
                                           q.v_telp2,
                                           q.v_zipbill,
                                           q.v_ziptax,
                                           qMTD.v_ket,
                                           q2.v_gdgdesc,
                                           q.n_days,
                                           q.n_days_internal,
                                           q.n_days_ekspedisi
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region Cek Master Approval

                    case Constant.MODEL_QUERY_CEK_USER_APPROVAL:
                        {
                            var qry = (from q in db.LG_MSapprovals
                                       select q).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region Cek Status Approval

                    case Constant.MODEL_QUERY_CEK_STATUS_APPROVAL:
                        {
                            var qry = (from q in db.LG_TRapprovals
                                       select q).AsQueryable();
                            qry = qry.OrderBy(string.Format("kd_approval,c_cusno ,d_entry desc"));
                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region Master Expedisi

                    case Constant.MODEL_QUERY_MASTER_EXPEDISI:
                        {
                            var qry = (from q in db.LG_MsExps
                                       where (q.l_delete == false
                                       || q.l_delete == null)
                                       select q).AsQueryable();


                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion
                        ////
                    #region Master Cabang Hari

                    case Constant.MODEL_QUERY_MASTER_CABANG_HARI:
                        {
                            var qry = (from q in db.LG_Cusmas
                                       join q1 in db.LG_MsHaris on q.c_cusno equals q1.c_cusno
                                       //where (q.l_delete == false || q.l_delete == null)
                                       where ((q.l_delete == false) || (q.l_delete == null))
                                       select new
                                       {
                                           q.c_cusno,
                                           q.v_cunam,
                                           q1.l_senin,
                                           q1.l_selasa,
                                           q1.l_rabu,
                                           q1.l_kamis,
                                           q1.l_jumat,
                                           q1.l_sabtu,
                                           q1.l_delete,
                                           q1.v_ket_del,
                                       }).Distinct().AsQueryable();


                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion
                        ////

                    #region Estimasi

                    #region Expedisi Estimasi

                    case Constant.MODEL_QUERY_MASTER_ESTIMASI:
                        {
                            var qry = (from q in db.LG_MsExpEsts
                                       join q1 in db.LG_MsExps on q.c_exp equals q1.c_exp
                                       join q2 in db.LG_Cusmas on q.c_cusno equals q2.c_cusno
                                       select new MsExpEst()
                                       {
                                           c_exp = q.c_exp,
                                           v_ket = q1.v_ket,
                                           c_cusno = q.c_cusno,
                                           v_cunam = q2.v_cunam,
                                           t_udara = q.t_udara.HasValue ? q.t_udara.Value : 0m,
                                           t_daratlaut = q.t_daratlaut.HasValue ? q.t_daratlaut.Value : 0m,
                                           t_icepack = q.t_icepack.HasValue ? q.t_icepack.Value : 0m,
                                           t_import = q.t_import.HasValue ? q.t_import.Value : 0m,
                                           l_delete = (q.l_delete.HasValue ? q.l_delete.Value : false)
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region Cost Estimasi

                    case Constant.MODEL_QUERY_MASTER_COST_ESTIMASI:
                        {
                            var cabang = (from q in db.LG_Cusmas
                                          //where q.l_cabang == true
                                          select new
                                          {
                                              q.c_cusno,
                                              q.v_cunam
                                          }).AsQueryable();
                            var qerygdg = (from qq in db.LG_MsGudangs
                                           where qq.l_aktif == true
                                           select new
                                           {
                                               c_cusno = qq.c_gdg.ToString(),
                                               v_cunam = qq.v_gdgdesc
                                           }
                                           ).AsQueryable();

                            var gdgcab = cabang.Union(qerygdg).AsQueryable();

                            var qry = (from q in db.LG_MsExpCostEsts
                                       join q1 in db.LG_MsExps on q.c_exp equals q1.c_exp
                                       join q2 in gdgcab on q.c_cusno equals q2.c_cusno
                                       //join q3 in db.MsTransDs on new { c_portal = '9', c_notrans = "004", c_type_satuan = q.c_type_satuan } equals new { q3.c_portal, q3.c_notrans, c_type_satuan = q3.c_type }
                                       join q4 in db.MsTransDs on new { c_portal = '9', c_notrans = "005", c_type_kirim = q.c_type } equals new { q4.c_portal, q4.c_notrans, c_type_kirim = q4.c_type }
                                       join q5 in db.LG_MsGudangs on q.c_gdg equals q5.c_gdg
                                       where (q.l_delete == false || q.l_delete == null)
                                       select new MsExpCostEst()
                                       {
                                           c_exp = q.c_exp,
                                           v_ket = q1.v_ket,
                                           c_gdg = q.c_gdg,
                                           v_gdgdesc = q5.v_gdgdesc,
                                           c_cusno = q.c_cusno,
                                           v_cunam = q2.v_cunam,
                                           n_udara = q.n_udara.HasValue ? q.n_udara.Value : 0m,
                                           n_daratlaut = q.n_daratlaut.HasValue ? q.n_daratlaut.Value : 0m,
                                           n_icepack = q.n_icepack.HasValue ? q.n_icepack.Value : 0m,
                                           n_cdd = q.n_cdd.HasValue ? q.n_cdd.Value : 0m,
                                           n_fuso = q.n_fuso.HasValue ? q.n_fuso.Value : 0m,
                                           n_tronton = q.n_tronton.HasValue ? q.n_tronton.Value : 0m,
                                           n_container = q.n_container.HasValue ? q.n_container.Value : 0m,
                                           n_cde = q.n_cde.HasValue ? q.n_cde.Value : 0m,
                                           n_l300 = q.n_l300.HasValue ? q.n_l300.Value : 0m,
                                           c_typekrm = q4.c_type,
                                           v_typekrm = q4.v_ket,
                                           n_expmin = q.n_expmin,
                                           d_effective = q.d_effective,
                                           //c_typesat = q3.c_type,
                                           //v_typesat = q3.v_ket,
                                       }).AsQueryable();

                            //var qry = (from q in db.LG_MsExpCostEsts
                            //           select new
                            //           {
                            //               q.n_fuso
                            //           }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #region Block Item

                    #region MODEL_QUERY_MASTER_BLOCKITEM

                    case Constant.MODEL_QUERY_MASTER_BLOCKITEM:
                        {
                            var qry = (from q in db.FA_MasItms
                                       join q0 in db.LG_DatSups on q.c_nosup equals q0.c_nosup
                                       join q1 in db.LG_MsItmBlocks on q.c_iteno equals q1.c_iteno into q_1
                                       from qItmBlock in q_1.DefaultIfEmpty()
                                       select new
                                       {
                                           q.c_iteno,
                                           q.v_itnam,
                                           q.c_nosup,
                                           q0.v_nama,
                                           l_aktif = (q.l_aktif.HasValue ? q.l_aktif.Value : false),
                                           l_hide = (q.l_hide.HasValue ? q.l_hide.Value : false),
                                           l_block = (qItmBlock == null ? false : (qItmBlock.l_status.HasValue ? qItmBlock.l_status.Value : false))
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_MASTER_BLOCKITEM_DETAIL

                    case Constant.MODEL_QUERY_MASTER_BLOCKITEM_DETAIL:
                        {
                            string itemCode = (parameters.ContainsKey("itemCode") ? (string)((Functionals.ParameterParser)parameters["itemCode"]).Value : string.Empty);

                            var qry = (from q in db.LG_MsItmBlocks
                                       join q1 in db.LG_MsItmBlockHistories on q.c_iteno equals q1.c_iteno
                                       join q2 in db.SCMS_USERs on q1.c_entry equals q2.c_nip into q_2
                                       from qSUEntry in q_2.DefaultIfEmpty()
                                       join q3 in db.SCMS_USERs on q1.c_update equals q3.c_nip into q_3
                                       from qSUUpdate in q_3.DefaultIfEmpty()
                                       where q.c_iteno == itemCode
                                       orderby q1.idx descending
                                       select new
                                       {
                                           q1.idx,
                                           q1.d_start,
                                           q1.d_end,
                                           q1.l_status,
                                           UEntry = (qSUEntry == null ? q1.c_entry : qSUEntry.v_username),
                                           UUpdate = (qSUUpdate == null ? q1.c_update : qSUUpdate.v_username),
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #region Rekening Bank

                    case Constant.MODEL_QUERY_MASTER_BANK_REKENING:
                        {
                            var qry = (from q in db.FA_MsBankReks
                                       join q1 in db.FA_MsBanks on q.c_bank equals q1.c_bank
                                       join q2 in db.MsTransDs on q.c_type equals q2.c_type
                                       where (q2.c_portal == '0' && q2.c_notrans == "47") &&
                                       (q.l_delete == false || q.l_delete == null)
                                       select new
                                       {
                                           q.c_bank,
                                           q.c_glno,
                                           q.c_rekno,
                                           q.c_type,
                                           q.v_pemilk,
                                           q1.v_bank,
                                           q2.v_ket,
                                           q.IDX
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;
                    #endregion

                    #region Bank

                    case Constant.MODEL_QUERY_MASTER_BANK:
                        {
                            var qry = (from q in db.FA_MsBanks
                                       where ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
                                       select new
                                       {
                                           q.c_bank,
                                           q.v_bank,
                                           q.v_bankcab,
                                           q.l_delete,
                                           q.l_aktif
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsLike)
                                    {
                                        paternLike = kvp.Value.Value.ToString();
                                        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                    }
                                    else if (kvp.Value.IsBetween)
                                    {

                                    }
                                    else
                                    {
                                        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region Master Combo

                    #region MODEL_QUERY_MASTER_COMBO

                    case Constant.MODEL_QUERY_MASTER_COMBO:
                        {
                            //var qry = (from q in db.FA_Combos
                            //           join q1 in db.FA_MasItms on q.c_combo equals q1.c_iteno
                            //           join q2 in db.LG_DatSups on q1.c_nosup equals q2.c_nosup into q_2
                            //           from qSup in q_2.DefaultIfEmpty()
                            //           join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "11", q1.c_type } equals new { q3.c_portal, q3.c_notrans, q3.c_type } into q_3
                            //           from qJenis in q_3.DefaultIfEmpty()
                            //           join q4 in db.MsTransDs on new { c_portal = '3', c_notrans = "02", c_type = q1.c_via } equals new { q4.c_portal, q4.c_notrans, q4.c_type } into q_4
                            //           from qVia in q_4.DefaultIfEmpty()
                            //           select new
                            //           {
                            //             q.c_combo,
                            //             q1.c_nosup,
                            //             v_nama_supl = qSup.v_nama,
                            //             q1.c_alkes,
                            //             q1.c_iteno,
                            //             q1.c_itenopri,
                            //             q1.c_type,
                            //             Jenis = qJenis.v_ket,
                            //             q1.c_via,
                            //             Via = qVia.v_ket,
                            //             q1.v_itnam,
                            //             q1.v_acronim,
                            //             q1.v_undes,
                            //             q1.n_salpri,
                            //             q1.n_qtykons,
                            //             q1.n_qminord,
                            //             q1.n_pminord,
                            //             q1.n_PBF,
                            //             q1.n_estimasi,
                            //             q1.n_disc,
                            //             q1.n_box,
                            //             q1.n_bonus,
                            //             q1.n_beli,
                            //             q1.l_import,
                            //             q1.l_aktif,
                            //             q1.l_berat,
                            //             q1.l_dinkes,
                            //             q1.l_combo,
                            //             q1.l_opname
                            //           }).Distinct().AsQueryable();

                            var qry = (from q1 in db.FA_MasItms
                                       join q2 in db.LG_DatSups on q1.c_nosup equals q2.c_nosup into q_2
                                       from qSup in q_2.DefaultIfEmpty()
                                       join q3 in db.MsTransDs on new { c_portal = '3', c_notrans = "11", q1.c_type } equals new { q3.c_portal, q3.c_notrans, q3.c_type } into q_3
                                       from qJenis in q_3.DefaultIfEmpty()
                                       join q4 in db.MsTransDs on new { c_portal = '3', c_notrans = "02", c_type = q1.c_via } equals new { q4.c_portal, q4.c_notrans, q4.c_type } into q_4
                                       from qVia in q_4.DefaultIfEmpty()
                                       select new
                                       {
                                           c_combo = q1.c_iteno,
                                           q1.c_nosup,
                                           v_nama_supl = qSup.v_nama,
                                           q1.c_alkes,
                                           q1.c_iteno,
                                           q1.c_itenopri,
                                           q1.c_type,
                                           Jenis = qJenis.v_ket,
                                           q1.c_via,
                                           Via = qVia.v_ket,
                                           q1.v_itnam,
                                           q1.v_acronim,
                                           q1.v_undes,
                                           q1.n_salpri,
                                           q1.n_qtykons,
                                           q1.n_qminord,
                                           q1.n_pminord,
                                           q1.n_PBF,
                                           q1.n_estimasi,
                                           q1.n_disc,
                                           q1.n_box,
                                           q1.n_bonus,
                                           q1.n_beli,
                                           q1.l_import,
                                           q1.l_aktif,
                                           q1.l_berat,
                                           q1.l_dinkes,
                                           q1.l_combo,
                                           q1.l_opname
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_MASTER_COMBO_DETAIl

                    case Constant.MODEL_QUERY_MASTER_COMBO_DETAIl:
                        {
                            string comboNo = (parameters.ContainsKey("comboItem") ? (string)((Functionals.ParameterParser)parameters["comboItem"]).Value : string.Empty);

                            var qry = (from q in db.FA_Combos
                                       join q1 in db.FA_MasItms on q.c_iteno equals q1.c_iteno
                                       join q2 in db.LG_DatSups on q1.c_nosup equals q2.c_nosup into q_2
                                       from qSup in q_2.DefaultIfEmpty()
                                       where (q.c_combo == comboNo)
                                       select new
                                       {
                                           q.c_iteno,
                                           q.n_qty,
                                           q1.v_itnam,
                                           q1.v_acronim,
                                           v_nama_supl = qSup.v_nama
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #region Master Item Category

                    #region MODEL_QUERY_MASTER_ITEM_CATEGORY

                    case Constant.MODEL_QUERY_MASTER_ITEM_CATEGORY:
                        {
                            //string tipeTrx = (parameters.ContainsKey("tipeId") ? (string)((Functionals.ParameterParser)parameters["tipeId"]).Value : string.Empty);

                            var qry = (from q in db.FA_MasItms
                                       join q1 in db.SCMS_MSITEM_CATs on q.c_iteno equals q1.c_iteno
                                       join q2 in db.LG_DatSups on q.c_nosup equals q2.c_nosup
                                       join q3 in db.MsTransDs on q1.c_type equals q3.c_type
                                       where q3.c_notrans == "001" && q3.c_portal == '9' &&
                                       (q1.l_delete == false || q1.l_delete == null)
                                       select new
                                       {
                                           q.c_iteno,
                                           q.v_itnam,
                                           q.v_acronim,
                                           q1.l_delete,
                                           v_nama_supl = q2.v_nama,
                                           q3.v_ket,
                                           q3.c_type,
                                           q3.c_portal,
                                           q3.c_notrans,
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_MASTER_ITEM_CATEGORY_ITEM

                    case Constant.MODEL_QUERY_MASTER_ITEM_CATEGORY_ITEM:
                        {
                            //string tipeTrx = (parameters.ContainsKey("tipeId") ? (string)((Functionals.ParameterParser)parameters["tipeId"]).Value : string.Empty);

                            //var qry = (from q in db.FA_MasItms
                            //           join q1 in db.LG_DatSups on q.c_nosup equals q1.c_nosup
                            //           where (!(from sq in db.SCMS_MSITEM_CATs
                            //                    where (sq.c_type == tipeTrx)
                            //                      && ((sq.l_delete.HasValue ? sq.l_delete.Value : false) == false)
                            //                    select sq.c_iteno).Contains(q.c_iteno))
                            //           select new
                            //           {
                            //             q.c_iteno,
                            //             q.v_itnam,
                            //             q.v_acronim,
                            //             q.l_aktif,
                            //             q.l_hide,
                            //             q.l_delete,
                            //             q.c_nosup,
                            //             q.c_alkes,
                            //             v_nama = q1.v_nama,
                            //           }).Distinct().AsQueryable();

                            //if ((parameters != null) && (parameters.Count > 0))
                            //{


                            //  foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                            //  {
                            //    if (kvp.Value.IsCondition)
                            //    {
                            //      if (kvp.Value.IsLike)
                            //      {
                            //        paternLike = kvp.Value.Value.ToString();
                            //        qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                            //      }
                            //      else
                            //      {
                            //        qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                            //      }
                            //    }
                            //  }
                            //}

                            //Logger.WriteLine(qry.Provider.ToString());

                            //nCount = qry.Count();

                            //if (nCount > 0)
                            //{
                            //  if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                            //  {
                            //    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                            //  }

                            //  if ((limit == -1) || allQuery)
                            //  {
                            //    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                            //  }
                            //  else
                            //  {
                            //    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                            //  }
                            //}

                            //dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            //dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #region Master Item Via

                    #region MODEL_QUERY_MASTER_ITEM_VIA

                    case Constant.MODEL_QUERY_MASTER_ITEM_VIA:
                        {
                            string tipeTrx = (parameters.ContainsKey("tipeId") ? (string)((Functionals.ParameterParser)parameters["tipeId"]).Value : string.Empty);


                            var qry1 = (from q in db.SCMS_MSITEM_VIAs
                                        join q1 in db.LG_Cusmas on q.c_cusno equals q1.c_cusno
                                        join q2 in db.FA_MasItms on q.c_iteno equals q2.c_iteno
                                        join q3 in db.LG_DatSups on q2.c_nosup equals q3.c_nosup
                                        join q4 in db.MsTransDs on q.c_via equals q4.c_type
                                        where q4.c_portal == '3' && q4.c_notrans == "02"
                                        select new
                                        {
                                            idx = q.idx,
                                            c_cusno = q.c_cusno,
                                            v_cunam = q1.v_cunam,
                                            c_iteno = q.c_iteno,
                                            v_itnam = q2.v_itnam,
                                            v_nama = q3.v_nama,
                                            c_type = q4.c_type,
                                            v_ket = q4.v_ket,
                                        }).Distinct().AsQueryable();

                            var qry2 = (from q in db.SCMS_MSITEM_VIAs
                                        join q1 in db.LG_MsGudangs on q.c_cusno equals q1.c_gdg.ToString()
                                        join q2 in db.FA_MasItms on q.c_iteno equals q2.c_iteno
                                        join q3 in db.LG_DatSups on q2.c_nosup equals q3.c_nosup
                                        join q4 in db.MsTransDs on q.c_via equals q4.c_type
                                        where q4.c_portal == '3' && q4.c_notrans == "02"
                                        select new
                                        {
                                            idx = q.idx,
                                            c_cusno = q.c_cusno,
                                            v_cunam = q1.v_gdgdesc,
                                            c_iteno = q.c_iteno,
                                            v_itnam = q2.v_itnam,
                                            v_nama = q3.v_nama,
                                            c_type = q4.c_type,
                                            v_ket = q4.v_ket,
                                        }).Distinct().AsQueryable();

                            var qry = qry1.Union(qry2);


                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion
                    #endregion

                    #region Master Item Lantai

                    #region MODEL_QUERY_MASTER_ITEM_LANTAI

                    case Constant.MODEL_QUERY_MASTER_ITEM_LANTAI:
                        {
                            //string tipeTrx = (parameters.ContainsKey("tipeId") ? (string)((Functionals.ParameterParser)parameters["tipeId"]).Value : string.Empty);

                            var qry = (from q in db.FA_MasItms
                                       join q1 in db.SCMS_MSITEM_LATs on q.c_iteno equals q1.c_iteno
                                       join q2 in db.LG_DatSups on q.c_nosup equals q2.c_nosup
                                       join q3 in db.MsTransDs on q1.c_type_lat equals q3.c_type
                                       where q3.c_notrans == "003" && q3.c_portal == '9' &&
                                       (q1.l_delete == false || q1.l_delete == null)
                                       join q4 in db.LG_MsGudangs on q1.c_gdg equals q4.c_gdg
                                       select new
                                       {
                                           q.c_iteno,
                                           q.v_itnam,
                                           q.v_acronim,
                                           q1.l_delete,
                                           v_nama_supl = q2.v_nama,
                                           q3.v_ket,
                                           q3.c_type,
                                           q3.c_portal,
                                           q3.c_notrans,
                                           q1.c_gdg,
                                           q4.v_gdgdesc
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #region MODEL_QUERY_MASTER_DRIVER

                    case Constant.MODEL_QUERY_MASTER_DRIVER:
                        {
                            //string tipeTrx = (parameters.ContainsKey("tipeId") ? (string)((Functionals.ParameterParser)parameters["tipeId"]).Value : string.Empty);

                            var qry = (from q in db.SCMS_DRIVERs
                                       join q1 in db.MsTransDs on q.c_type equals q1.c_type
                                       where q1.c_portal == '9' && q1.c_notrans == "002"
                                       select new
                                       {
                                           c_nip = q.c_nip,
                                           v_nama = q.v_nama,
                                           c_nopol = q.c_nopol,
                                           v_ket = q1.v_ket,
                                           c_type = q1.c_type,
                                           l_aktif = q.l_aktif
                                       }
                              ).Distinct().AsQueryable();


                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);

                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_MASTER_NOMOR_PAJAK

                    case Constant.MODEL_QUERY_MASTER_NOMOR_PAJAK:
                        {
                            var qry = (from q in db.LG_MsNomorPajaks
                                       select new 
                                       {
                                           IDX = q.IDX.ToString(),
                                           s_tahun = q.s_tahun.HasValue ? q.s_tahun : 0,
                                           c_awal = q.c_awal,
                                           c_akhir = q.c_akhir,
                                           c_current = q.c_current,
                                           c_digit1 = q.c_digit1,
                                           c_digit2 = q.c_digit2,
                                           d_entry = q.d_entry
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region Master PKP

                    case Constant.MODEL_QUERY_MASTER_PKP_GRID:
                        {
                            var qry = (from q in db.LG_NonDatsups
                                       select new
                                       {
                                           q.c_pkpno,
                                           q.v_nama,
                                           q.v_npwp,
                                           q.v_nppkp,
                                           q.d_tglpkp,
                                           q.v_alamat1,
                                           q.v_alamat2,
                                           q.v_telepon1,
                                           q.v_fax1,
                                           q.v_fax2,
                                           q.l_aktif
                                       }).AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region Divisi AMS

                    #region MODEL_QUERY_MASTER_DIVISI_AMS

                    case Constant.MODEL_QUERY_MASTER_DIVISI_AMS:
                        {
                            var qry = (from q in db.FA_MsDivAMs
                                       where (q.l_delete == false || q.l_delete == null)
                                       select new
                                       {
                                           q.c_kddivams,
                                           q.v_nmdivams,
                                           q.l_aktif,
                                           q.l_hide,
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #region MODEL_QUERY_MASTER_DIVISI_AMS_DETIL

                    case Constant.MODEL_QUERY_MASTER_DIVISI_AMS_DETIL:
                        {
                            var qry = (from q in db.FA_DivAMs
                                       join q2 in db.FA_MasItms on q.c_iteno equals q2.c_iteno into gLeftItm
                                       from qLeftItm in gLeftItm.DefaultIfEmpty()
                                       select new
                                       {
                                           q.c_kddivams,
                                           q.c_iteno,
                                           qLeftItm.v_itnam,
                                           qLeftItm.v_undes,
                                           qLeftItm.v_acronim,
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {


                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);
                        }
                        break;

                    #endregion

                    #endregion

                    #region MASTER APJ
                    case Constant.MODEL_QUERY_MASTER_USER_APJ:
                        {

                            var qry = (from q in db.LG_USERSP_A_APJs
                                       join q1 in db.LG_Cusmas on q.c_cusno equals q1.c_cusno
                                       join q2 in db.LG_MsGudangs on q.c_gdg equals q2.c_gdg
                                       where ((q.l_delete == false) || (q.l_delete == null))
                                       select new
                                       {
                                           q.c_nip,
                                           q.v_nama,
                                           q.c_cusno,
                                           q.c_nosik,
                                           q.c_nopbf,
                                           q.c_kodearea,
                                           q.c_gdg,
                                           q2.v_gdgdesc,
                                           q1.v_cunam,
                                           q.l_delete,
                                       }).Distinct().AsQueryable();

                            if ((parameters != null) && (parameters.Count > 0))
                            {
                                foreach (KeyValuePair<string, Functionals.ParameterParser> kvp in parameters)
                                {
                                    if (kvp.Value.IsCondition)
                                    {
                                        if (kvp.Value.IsLike)
                                        {
                                            paternLike = kvp.Value.Value.ToString();
                                            qry = qry.Like(kvp.Key, paternLike).AsQueryable();
                                        }
                                        else if (kvp.Value.IsBetween)
                                        {

                                        }
                                        else
                                        {
                                            qry = qry.Where(kvp.Key, kvp.Value.Value).AsQueryable();
                                        }
                                    }
                                }
                            }

                            Logger.WriteLine(qry.Provider.ToString());

                            nCount = qry.Count();

                            if (nCount > 0)
                            {
                                if ((!string.IsNullOrEmpty(sort)) && (!string.IsNullOrEmpty(dir)))
                                {
                                    qry = qry.OrderBy(string.Format("{0} {1}", sort, dir).Trim());
                                }

                                if ((limit == -1) || allQuery)
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.ToList());
                                }
                                else
                                {
                                    dic.Add(Constant.DEFAULT_NAMING_RECORDS, qry.Skip(start).Take(limit).ToList());
                                }
                            }

                            dic.Add(Constant.DEFAULT_NAMING_TOTAL_ROWS, nCount);

                            dic.Add(Constant.DEFAULT_NAMING_SUCCESS, true);

                        }
                        break;

                    #endregion
                }
            }
            catch (Exception ex)
            {
                Logger.WriteLine(
                  "ScmsSoaLibrary.Modules.GlobalQuery:ModelGridQueryMaster - Switch {0} - {1}", model, ex.Message);
                Logger.WriteLine(ex.StackTrace);

                dic.Add(Constant.DEFAULT_NAMING_EXCEPTION, ex.Message);

                dic.Add(Constant.DEFAULT_NAMING_SUCCESS, false);
            }

            db.Dispose();

            return dic;
        }

        #region View Parser

        public static IQueryable<LG_vwStock> ViewStock(ScmsModel.ORMDataContext db)
        {
            #region Combo

            var qryCombo = (from q in db.LG_ComboHs
                            where ((q.n_gsisa != 0) || (q.n_bsisa != 0))
                              && ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
                            select new LG_vwStock()
                            {
                                c_table = "CB",
                                c_gdg = q.c_gdg,
                                c_no = q.c_combono,
                                c_iteno = q.c_iteno,
                                d_date = q.d_combodate,
                                c_type = "01",
                                c_batch = q.c_batch,
                                n_gsisa = q.n_gsisa,
                                n_bsisa = q.n_bsisa
                            });

            //Logger.WriteLine(qryCombo.Provider.ToString());

            #endregion

            #region Stock

            var qryStock = (from q in db.LG_RNHs
                            join qRN1 in db.LG_RND1s on new { q.c_rnno, q.c_gdg } equals new { qRN1.c_rnno, qRN1.c_gdg }
                            join q2 in db.LG_RND2s on q.c_rnno equals q2.c_rnno into q_2
                            from qRN2 in q_2.Where(t => qRN1.c_gdg == t.c_gdg && qRN1.c_iteno == t.c_iteno && qRN1.c_batch == t.c_batch).DefaultIfEmpty()
                            join q3 in db.LG_POHs on q.c_gdg equals q3.c_gdg into q_3
                            from qPOH in q_3.Where(t => qRN2.c_no == t.c_pono).DefaultIfEmpty()
                            join q4 in db.LG_POD2s on q.c_gdg equals q4.c_gdg into q_4
                            from qPOD2 in q_4.Where(t => qPOH.c_pono == t.c_pono).DefaultIfEmpty()
                            join q5 in db.LG_ORHs on q.c_gdg equals q5.c_gdg into q_5
                            from qORH in q_5.Where(t => qPOD2.c_orno == t.c_orno).DefaultIfEmpty()
                            join q6 in db.LG_PLD2s on q.c_rnno equals q6.c_rnno into q_6
                            from qPLD2 in q_6.Where(t => qRN1.c_iteno == t.c_iteno && qRN1.c_batch == t.c_batch).DefaultIfEmpty()
                            //join q6 in
                            //  ((from sq1 in db.LG_PLD2s select new { sq1.c_rnno, sq1.c_iteno, sq1.c_batch }).Distinct().AsQueryable()) on q.c_rnno equals q6.c_rnno into q_6
                            //from qPLD2 in q_6.Where(t => qRN1.c_iteno == t.c_iteno && qRN1.c_batch == t.c_batch).DefaultIfEmpty()
                            where q.c_type != "02"
                              && ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
                              && (((qRN1.n_gsisa != 0 || qRN1.n_bsisa != 0) && (qORH.c_type != "02")) ||
                              ((qRN1.n_gsisa != 0 || qRN1.n_bsisa != 0) && (qORH.c_type == "02") && (qPLD2.c_iteno != null)) ||
                              ((qRN1.n_gsisa != 0 || qRN1.n_bsisa != 0) && (qORH.c_type == null)))
                            select new LG_vwStock()
                            {
                                c_table = "RN",
                                c_gdg = q.c_gdg,
                                c_no = q.c_rnno,
                                d_date = q.d_rndate,
                                c_type = q.c_type,
                                c_iteno = qRN1.c_iteno,
                                c_batch = qRN1.c_batch,
                                n_gsisa = qRN1.n_gsisa,
                                n_bsisa = qRN1.n_bsisa
                            }).Distinct().AsQueryable();

            //Logger.WriteLine(qryStock.Provider.ToString());

            #endregion

            return qryStock.Union(qryCombo).Distinct();
        }

        public static IEnumerable<LG_vwStockLite> ViewStockLite(ScmsModel.ORMDataContext db)
        {
            return ViewStockLite(db, '0', null, 0);
        }

        public static IQueryable<LG_vwStockLite> ViewStockLite(ScmsModel.ORMDataContext db, char gdg)
        {
            return ViewStockLite(db, gdg, null, 0);
        }

        public static IQueryable<LG_vwStockLite> ViewStockLite(ScmsModel.ORMDataContext db, byte itemType)
        {
            return ViewStockLite(db, '0', null, 0);
        }

        public static IQueryable<LG_vwStockLite> ViewStockLite(ScmsModel.ORMDataContext db, char gdg, string item)
        {
            return ViewStockLite(db, gdg, item, 0);
        }

        public static IQueryable<LG_vwStockLite> ViewStockLite(ScmsModel.ORMDataContext db, char gdg, string pinscipal, bool isPrincipal)
        {
            return ViewStockLite(db, gdg, pinscipal, 0);

            isPrincipalInfo = isPrincipal;
        }

        public static IQueryable<LG_vwStockLite> ViewStockLite(ScmsModel.ORMDataContext db, char gdg, byte itemType)
        {
            return ViewStockLite(db, gdg, null, 0);
        }

        public static IQueryable<LG_vwStockLite> ViewStockLite(ScmsModel.ORMDataContext db, char gdg, string item, byte itemType)
        {
            IQueryable<LG_vwStockLite> qryGudang1 = null;
            IQueryable<LG_vwStockLite> qryGudang2 = null;
            IQueryable<LG_vwStockLite> qryCombo = null;
            IQueryable<LG_vwStockLite> qryStock = null;

            //bool isRegular = (itemType == 0 ? true : ((itemType & 1) == 1));
            bool isCombo = (itemType == 0 ? true : ((itemType & 2) == 2));
            bool isRegular = true;

            item = (item == null ? string.Empty : item.Trim());


            #region Old Code

            //#region Combo

            //if (isCombo)
            //{
            //  qryCombo = (from q in db.LG_ComboHs
            //              where ((gdg == '0' ? q.c_gdg : gdg) == q.c_gdg)
            //                && (q.c_iteno == (string.IsNullOrEmpty(item) ? q.c_iteno : item))
            //                && ((q.n_gsisa != 0) || (q.n_bsisa != 0))
            //                // Production
            //                //&& ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
            //              select new LG_vwStockLite()
            //              {
            //                c_table = "CB",
            //                c_gdg = q.c_gdg,
            //                c_no = q.c_combono,
            //                c_iteno = q.c_iteno,
            //                d_date = (q.d_combodate.HasValue ? q.d_combodate.Value : Commons.Functionals.StandardSqlDateTime),
            //                c_type = "01",
            //                c_batch = q.c_batch,
            //                n_gsisa = (q.n_gsisa.HasValue ? q.n_gsisa.Value : 0),
            //                n_bsisa = (q.n_bsisa.HasValue ? q.n_bsisa.Value : 0)
            //              }).Distinct().AsQueryable();
            //}
            //else
            //{
            //  qryCombo = (from q in db.LG_ComboHs
            //              select new LG_vwStockLite()
            //              {
            //                c_table = "CB",
            //                c_gdg = q.c_gdg,
            //                c_no = q.c_combono,
            //                c_iteno = q.c_iteno,
            //                d_date = (q.d_combodate.HasValue ? q.d_combodate.Value : Commons.Functionals.StandardSqlDateTime),
            //                c_type = "01",
            //                c_batch = q.c_batch,
            //                n_gsisa = (q.n_gsisa.HasValue ? q.n_gsisa.Value : 0),
            //                n_bsisa = (q.n_bsisa.HasValue ? q.n_bsisa.Value : 0)
            //              }).Take(0).AsQueryable();
            //}

            ////Logger.WriteLine(qryCombo.Provider.ToString());

            //#endregion

            //#region Stock

            //if (isRegular && (gdg == 1)) //
            //{
            //  qryStock = (from q in db.LG_RNHs
            //              //join q1 in db.LG_RND1s on new { q.c_gdg, q.c_rnno, c_iteno = item } equals new { q1.c_gdg, q1.c_rnno, q1.c_iteno }
            //              join q1 in db.LG_RND1s on new { q.c_gdg, q.c_rnno } equals new { q1.c_gdg, q1.c_rnno }
            //              // --A Production -- for Deleted
            //              join q2 in db.LG_RND2s on new { q.c_gdg, q.c_rnno, q1.c_iteno } equals new { q2.c_gdg, q2.c_rnno, q2.c_iteno }
            //              join q3 in db.LG_POD2s on new { q.c_gdg, c_pono = q2.c_no } equals new { q3.c_gdg, q3.c_pono }
            //              join q4 in db.LG_ORHs on new { q3.c_gdg, q3.c_orno } equals new { q4.c_gdg, q4.c_orno }
            //              // --A
            //              where
            //                // Production
            //                //((q.c_type != "06")  || ((q.l_khusus.HasValue ? q.l_khusus.Value : false) == false))

            //                // --A Production -- for Deleted
            //                (q4.c_type != "02") &&

            //                // --A

            //                (q1.c_iteno == (string.IsNullOrEmpty(item) ? q1.c_iteno : item))
            //                && ((q1.n_gsisa != 0) || (q1.n_bsisa != 0))
            //                && (gdg == '0' ? q.c_gdg : gdg) == q.c_gdg
            //              // Production
            //              //&& ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
            //              select new LG_vwStockLite()
            //              {
            //                c_table = "RN",
            //                c_gdg = q.c_gdg,
            //                c_no = q.c_rnno,
            //                d_date = (q.d_rndate.HasValue ? q.d_rndate.Value : Commons.Functionals.StandardSqlDateTime),
            //                c_type = q.c_type,
            //                c_iteno = q1.c_iteno,
            //                c_batch = q1.c_batch,
            //                n_gsisa = (q1.n_gsisa.HasValue ? q1.n_gsisa.Value : 0),
            //                n_bsisa = (q1.n_bsisa.HasValue ? q1.n_bsisa.Value : 0)
            //              }).Distinct().AsQueryable();


            //}
            //else
            //{
            //  qryStock = (from q in db.LG_RNHs
            //              join q1 in db.LG_RND1s on new { q.c_gdg, q.c_rnno } equals new { q1.c_gdg, q1.c_rnno }
            //              where q.c_gdg == gdg 
            //              //&& (q1.c_iteno == (string.IsNullOrEmpty(item) ? q1.c_iteno : item))
            //              select new LG_vwStockLite()
            //              {
            //                c_table = "RN",
            //                c_gdg = q.c_gdg,
            //                c_no = q.c_rnno,
            //                d_date = (q.d_rndate.HasValue ? q.d_rndate.Value : Commons.Functionals.StandardSqlDateTime),
            //                c_type = q.c_type,
            //                c_iteno = q1.c_iteno,
            //                c_batch = q1.c_batch,
            //                n_gsisa = (q1.n_gsisa.HasValue ? q1.n_gsisa.Value : 0),
            //                n_bsisa = (q1.n_bsisa.HasValue ? q1.n_bsisa.Value : 0)
            //              }).Take(0).AsQueryable();

            //}

            ////Logger.WriteLine(qryStock.Provider.ToString());

            //#endregion


            #endregion

            //int ss = qryStock.Union(qryCombo).Distinct().AsQueryable().Count();

            qryCombo = (from q in db.LG_ComboHs
                        where ((gdg == '0' ? q.c_gdg : gdg) == q.c_gdg)
                          && ((q.n_gsisa != 0) || (q.n_bsisa != 0)) && (q.c_iteno == (string.IsNullOrEmpty(item) ? q.c_iteno : item))
                            // Production
                        && ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
                        select new LG_vwStockLite()
                        {
                            c_table = "CB",
                            c_gdg = q.c_gdg,
                            c_no = q.c_combono,
                            d_date = (q.d_combodate.HasValue ? q.d_combodate.Value : Commons.Functionals.StandardSqlDateTime),
                            c_type = "01",
                            c_iteno = q.c_iteno,
                            c_batch = q.c_batch,
                            n_gsisa = (q.n_gsisa.HasValue ? q.n_gsisa.Value : 0),
                            n_bsisa = (q.n_bsisa.HasValue ? q.n_bsisa.Value : 0)
                        }).Distinct().AsQueryable();
            if (isPrincipalInfo)
            {
                qryGudang1 = (from q in db.LG_RNHs
                              join q1 in db.LG_RND1s on new { q.c_gdg, q.c_rnno } equals new { q1.c_gdg, q1.c_rnno }
                              join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno
                              where ((q1.n_gsisa != 0) || (q1.n_bsisa != 0)) && q.c_type != "02"
                                && ((gdg == '0' ? q.c_gdg : gdg) == q.c_gdg) && (q.l_khusus == false || q.l_khusus == null)
                                && (q.l_delete == null || q.l_delete == false) && q2.c_nosup == item

                              select new LG_vwStockLite()
                              {
                                  c_table = "RN",
                                  c_gdg = q.c_gdg,
                                  c_no = q.c_rnno,
                                  d_date = (q.d_rndate.HasValue ? q.d_rndate.Value : Commons.Functionals.StandardSqlDateTime),
                                  c_type = q.c_type,
                                  c_iteno = q1.c_iteno,
                                  c_batch = q1.c_batch,
                                  n_gsisa = (q1.n_gsisa.HasValue ? q1.n_gsisa.Value : 0),
                                  n_bsisa = (q1.n_bsisa.HasValue ? q1.n_bsisa.Value : 0)
                              }).Distinct().AsQueryable();

                qryGudang2 = (from q in db.LG_RNHs
                              join q1 in db.LG_RND1s on new { q.c_gdg, q.c_rnno } equals new { q1.c_gdg, q1.c_rnno }
                              join q2 in db.FA_MasItms on q1.c_iteno equals q2.c_iteno
                              where q.c_gdg == gdg && ((q1.n_gsisa != 0) || (q1.n_bsisa != 0)) && q.c_type != "02"
                              && (q.l_delete == null || q.l_delete == false) && q2.c_nosup == item
                              select new LG_vwStockLite()
                              {
                                  c_table = "RN",
                                  c_gdg = q.c_gdg,
                                  c_no = q.c_rnno,
                                  d_date = (q.d_rndate.HasValue ? q.d_rndate.Value : Commons.Functionals.StandardSqlDateTime),
                                  c_type = q.c_type,
                                  c_iteno = q1.c_iteno,
                                  c_batch = q1.c_batch,
                                  n_gsisa = (q1.n_gsisa.HasValue ? q1.n_gsisa.Value : 0),
                                  n_bsisa = (q1.n_bsisa.HasValue ? q1.n_bsisa.Value : 0)
                              }).Distinct().AsQueryable();
                
            }
            else
            {
                qryGudang1 = (from q in db.LG_RNHs
                              join q1 in db.LG_RND1s on new { q.c_gdg, q.c_rnno } equals new { q1.c_gdg, q1.c_rnno }
                              where ((q1.n_gsisa != 0) || (q1.n_bsisa != 0)) && q.c_type != "02"
                                && ((gdg == '0' ? q.c_gdg : gdg) == q.c_gdg) && (q.l_khusus == false || q.l_khusus == null)
                                && (q.l_delete == null || q.l_delete == false) && (q1.c_iteno == (string.IsNullOrEmpty(item) ? q1.c_iteno : item))
                              select new LG_vwStockLite()
                              {
                                  c_table = "RN",
                                  c_gdg = q.c_gdg,
                                  c_no = q.c_rnno,
                                  d_date = (q.d_rndate.HasValue ? q.d_rndate.Value : Commons.Functionals.StandardSqlDateTime),
                                  c_type = q.c_type,
                                  c_iteno = q1.c_iteno,
                                  c_batch = q1.c_batch,
                                  n_gsisa = (q1.n_gsisa.HasValue ? q1.n_gsisa.Value : 0),
                                  n_bsisa = (q1.n_bsisa.HasValue ? q1.n_bsisa.Value : 0)
                              }).Distinct().AsQueryable();

                qryGudang2 = (from q in db.LG_RNHs
                              join q1 in db.LG_RND1s on new { q.c_gdg, q.c_rnno } equals new { q1.c_gdg, q1.c_rnno }
                              where q.c_gdg == gdg && ((q1.n_gsisa != 0) || (q1.n_bsisa != 0)) && q.c_type != "02"
                              && (q.l_delete == null || q.l_delete == false) && (q1.c_iteno == (string.IsNullOrEmpty(item) ? q1.c_iteno : item))
                              select new LG_vwStockLite()
                              {
                                  c_table = "RN",
                                  c_gdg = q.c_gdg,
                                  c_no = q.c_rnno,
                                  d_date = (q.d_rndate.HasValue ? q.d_rndate.Value : Commons.Functionals.StandardSqlDateTime),
                                  c_type = q.c_type,
                                  c_iteno = q1.c_iteno,
                                  c_batch = q1.c_batch,
                                  n_gsisa = (q1.n_gsisa.HasValue ? q1.n_gsisa.Value : 0),
                                  n_bsisa = (q1.n_bsisa.HasValue ? q1.n_bsisa.Value : 0)
                              }).Distinct().AsQueryable();
            }
            if (gdg == '1')
            {
                qryStock = qryCombo.Union(qryGudang1).Distinct().AsQueryable();
            }
            else if (gdg == '6')
            { 
                qryStock = qryCombo.Union(qryGudang1).Distinct().AsQueryable();
            }
            else
            {
                qryStock = qryCombo.Union(qryGudang2).Distinct().AsQueryable();
            }
            int ncount = qryStock.Count();
            return qryStock.Distinct().AsQueryable();
        }

        public static IQueryable<LG_vwStockLite> VwStockContains(ScmsModel.ORMDataContext db, char gdg, params string[] items)
        {
            IQueryable<LG_vwStockLite> qryStock = null;

            qryStock = (from q in db.LG_RNHs
                        join q1 in db.LG_RND1s on new { q.c_gdg, q.c_rnno } equals new { q1.c_gdg, q1.c_rnno }
                        where ((q1.n_gsisa != 0) || (q1.n_bsisa != 0))
                          && ((gdg == '0' ? q.c_gdg : gdg) == q.c_gdg)
                        && ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
                        select new LG_vwStockLite()
                        {
                            c_table = "RN",
                            c_gdg = q1.c_gdg,
                            c_no = q.c_rnno,
                            d_date = (q.d_rndate.HasValue ? q.d_rndate.Value : Commons.Functionals.StandardSqlDateTime),
                            c_type = q.c_type,
                            c_iteno = q1.c_iteno,
                            c_batch = q1.c_batch,
                            n_gsisa = (q1.n_gsisa.HasValue ? q1.n_gsisa.Value : 0),
                            n_bsisa = (q1.n_bsisa.HasValue ? q1.n_bsisa.Value : 0)
                        }).Distinct().AsQueryable();

            int kk = qryStock.Count();

            return qryStock;
        }

        public static IQueryable<LG_vwStockLite> ViewStockLiteContains(ScmsModel.ORMDataContext db, char gdg, params string[] items)
        {
            IQueryable<LG_vwStockLite> qryCombo = null;
            IQueryable<LG_vwStockLite> qryStock = null;

            if (items == null)
            {
                return null;
            }

            #region Combo

            qryCombo = (from q in db.LG_ComboHs
                        join q1 in db.LG_MsBatches on new { q.c_iteno, q.c_batch } equals new { q1.c_iteno, q1.c_batch }
                        where ((gdg == '0' ? q.c_gdg : gdg) == q.c_gdg)
                          && items.Contains(q.c_iteno)
                          && ((q.n_gsisa != 0) || (q.n_bsisa != 0))
                         && ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
                        select new LG_vwStockLite()
                        {
                            c_table = "CB",
                            c_gdg = q.c_gdg,
                            c_no = q.c_combono,
                            c_iteno = q.c_iteno,
                            d_date = (q1.d_expired.HasValue ? q1.d_expired.Value : Commons.Functionals.StandardSqlDateTime),
                            c_type = "01",
                            c_batch = q.c_batch,
                            n_gsisa = (q.n_gsisa.HasValue ? q.n_gsisa.Value : 0),
                            n_bsisa = (q.n_bsisa.HasValue ? q.n_bsisa.Value : 0)
                        }).Distinct().AsQueryable();
            var sss = qryCombo.ToList();
            //Logger.WriteLine(qryCombo.Provider.ToString());

            #endregion

            #region Stock

            qryStock = (from q in db.LG_RNHs
                        join q1 in db.LG_RND1s on new { q.c_gdg, q.c_rnno } equals new { q1.c_gdg, q1.c_rnno }
                        join q5 in db.LG_MsBatches on new { q1.c_iteno, q1.c_batch } equals new { q5.c_iteno, q5.c_batch }

                        where
                          ((q1.n_gsisa != 0) || (q1.n_bsisa != 0)) && q.c_type != "02"
                              && (gdg == '0' ? q.c_gdg : gdg) == q.c_gdg && (q.l_khusus == false || q.l_khusus == null)
                              && (q.l_delete == null || q.l_delete == false) &&
                          items.Contains(q1.c_iteno)
                        select new LG_vwStockLite()
                        {
                            c_table = "RN",
                            c_gdg = q.c_gdg,
                            c_no = q.c_rnno,
                            d_date = (q5.d_expired.HasValue ? q5.d_expired.Value : Commons.Functionals.StandardSqlDateTime),
                            c_type = q.c_type,
                            c_iteno = q1.c_iteno,
                            c_batch = q1.c_batch,
                            n_gsisa = (q1.n_gsisa.HasValue ? q1.n_gsisa.Value : 0),
                            n_bsisa = (q1.n_bsisa.HasValue ? q1.n_bsisa.Value : 0)
                        }).Distinct().AsQueryable();

            //Logger.WriteLine(qryStock.Provider.ToString());

            #endregion

            return qryStock.Union(qryCombo).Distinct().AsQueryable();
        }

        public static IQueryable<LG_vwStockLite> ViewStockLiteAdjContains(ScmsModel.ORMDataContext db, char gdg, params string[] items)
        {
            IQueryable<LG_vwStockLite> qryCombo = null;
            IQueryable<LG_vwStockLite> qryStock = null;

            if (items == null)
            {
                return null;
            }

            #region Combo

            qryCombo = (from q in db.LG_ComboHs
                        join q1 in db.LG_MsBatches on new { q.c_iteno, q.c_batch } equals new { q1.c_iteno, q1.c_batch }
                        where ((gdg == '0' ? q.c_gdg : gdg) == q.c_gdg)
                          && items.Contains(q.c_iteno)
                         && ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
                        select new LG_vwStockLite()
                        {
                            c_table = "CB",
                            c_gdg = q.c_gdg,
                            c_no = q.c_combono,
                            c_iteno = q.c_iteno,
                            d_date = (q1.d_expired.HasValue ? q1.d_expired.Value : Commons.Functionals.StandardSqlDateTime),
                            c_type = "01",
                            c_batch = q.c_batch,
                            n_gsisa = (q.n_gsisa.HasValue ? q.n_gsisa.Value : 0),
                            n_bsisa = (q.n_bsisa.HasValue ? q.n_bsisa.Value : 0)
                        }).Distinct().AsQueryable();

            //Logger.WriteLine(qryCombo.Provider.ToString());

            #endregion

            #region Stock

            qryStock = (from q in db.LG_RNHs
                        join q1 in db.LG_RND1s on new { q.c_gdg, q.c_rnno } equals new { q1.c_gdg, q1.c_rnno }
                        join q5 in db.LG_MsBatches on new { q1.c_iteno, q1.c_batch } equals new { q5.c_iteno, q5.c_batch }

                        where
                          q.c_type != "02"
                              && (gdg == '0' ? q.c_gdg : gdg) == q.c_gdg && (q.l_khusus == false || q.l_khusus == null)
                              && (q.l_delete == null || q.l_delete == false) &&
                          items.Contains(q1.c_iteno)
                        select new LG_vwStockLite()
                        {
                            c_table = "RN",
                            c_gdg = q.c_gdg,
                            c_no = q.c_rnno,
                            d_date = (q5.d_expired.HasValue ? q5.d_expired.Value : Commons.Functionals.StandardSqlDateTime),
                            c_type = q.c_type,
                            c_iteno = q1.c_iteno,
                            c_batch = q1.c_batch,
                            n_gsisa = (q1.n_gsisa.HasValue ? q1.n_gsisa.Value : 0),
                            n_bsisa = (q1.n_bsisa.HasValue ? q1.n_bsisa.Value : 0)
                        }).Distinct().AsQueryable();

            //Logger.WriteLine(qryStock.Provider.ToString());

            #endregion


            var qrytes = qryCombo.ToList();
            var qrytes2 = qryStock.ToList();

            return qryStock.Union(qryCombo).Distinct().AsQueryable();
        }

        public static IQueryable<LG_vwStockLite> ViewStockLiteContainsBad(ScmsModel.ORMDataContext db, char gdg, params string[] items)
        {
            IQueryable<LG_vwStockLite> qryCombo = null;
            IQueryable<LG_vwStockLite> qryStock = null;

            if (items == null)
            {
                return null;
            }

            #region Combo

            qryCombo = (from q in db.LG_ComboHs
                        join q1 in db.LG_MsBatches on new { q.c_iteno, q.c_batch } equals new { q1.c_iteno, q1.c_batch }
                        where ((gdg == '0' ? q.c_gdg : gdg) == q.c_gdg)
                          && items.Contains(q.c_iteno)
                          && ((q.n_gsisa != 0) || (q.n_bsisa != 0))
                         && ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
                        select new LG_vwStockLite()
                        {
                            c_table = "CB",
                            c_gdg = q.c_gdg,
                            c_no = q.c_combono,
                            c_iteno = q.c_iteno,
                            d_date = (q1.d_expired.HasValue ? q1.d_expired.Value : Commons.Functionals.StandardSqlDateTime),
                            c_type = "01",
                            c_batch = q.c_batch,
                            n_gsisa = (q.n_gsisa.HasValue ? q.n_gsisa.Value : 0),
                            n_bsisa = (q.n_bsisa.HasValue ? q.n_bsisa.Value : 0)
                        }).Distinct().AsQueryable();

            //Logger.WriteLine(qryCombo.Provider.ToString());

            #endregion

            #region Stock

            qryStock = (from q in db.LG_RNHs
                        join q1 in db.LG_RND1s on new { q.c_gdg, q.c_rnno } equals new { q1.c_gdg, q1.c_rnno }
                        join q5 in db.LG_MsBatches on new { q1.c_iteno, q1.c_batch } equals new { q5.c_iteno, q5.c_batch }

                        where
                          ((q1.n_gsisa != 0) || (q1.n_bsisa != 0))
                              && (gdg == '0' ? q.c_gdg : gdg) == q.c_gdg && (q.l_khusus == false || q.l_khusus == null)
                              && (q.l_delete == null || q.l_delete == false) &&
                          items.Contains(q1.c_iteno)
                        select new LG_vwStockLite()
                        {
                            c_table = "RN",
                            c_gdg = q.c_gdg,
                            c_no = q.c_rnno,
                            d_date = (q5.d_expired.HasValue ? q5.d_expired.Value : Commons.Functionals.StandardSqlDateTime),
                            c_type = q.c_type,
                            c_iteno = q1.c_iteno,
                            c_batch = q1.c_batch,
                            n_gsisa = (q1.n_gsisa.HasValue ? q1.n_gsisa.Value : 0),
                            n_bsisa = (q1.n_bsisa.HasValue ? q1.n_bsisa.Value : 0)
                        }).Distinct().AsQueryable();

            //Logger.WriteLine(qryStock.Provider.ToString());

            #endregion

            return qryStock.Union(qryCombo).Distinct().AsQueryable();
        }

        public static IQueryable<LG_vwStockLite> ViewStockSimple(ScmsModel.ORMDataContext db, char gdg)
        {
            return ViewStockSimple(db, gdg, null);
        }

        public static IQueryable<LG_vwStockLite> ViewStockSimple(ScmsModel.ORMDataContext db, char gdg, string item)
        {
            IQueryable<LG_vwStockLite> qryStock = null;

            #region Stock

            qryStock = (from q in db.LG_RNHs
                        join q1 in db.LG_RND1s on new { q.c_gdg, q.c_rnno } equals new { q1.c_gdg, q1.c_rnno }
                        where ((q.c_type != "06") || ((q.l_khusus.HasValue ? q.l_khusus.Value : false) == false))
                          && (q1.c_iteno == (string.IsNullOrEmpty(item) ? q1.c_iteno : item))
                          && ((q1.n_gsisa != 0) || (q1.n_bsisa != 0))
                          && ((gdg == '0' ? q.c_gdg : gdg) == q.c_gdg)
                          && ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
                        select new LG_vwStockLite()
                        {
                            c_table = "RN",
                            c_gdg = q.c_gdg,
                            c_no = q.c_rnno,
                            d_date = (q.d_rndate.HasValue ? q.d_rndate.Value : Commons.Functionals.StandardSqlDateTime),
                            c_type = q.c_type,
                            c_iteno = q1.c_iteno,
                            c_batch = q1.c_batch,
                            n_gsisa = (q1.n_gsisa.HasValue ? q1.n_gsisa.Value : 0),
                            n_bsisa = (q1.n_bsisa.HasValue ? q1.n_bsisa.Value : 0)
                        }).Distinct().AsQueryable();

            //Logger.WriteLine(qryStock.Provider.ToString());

            #endregion

            return qryStock.AsQueryable();
        }

        public static IQueryable<LG_vwStockBatch> ViewStockBatch(ScmsModel.ORMDataContext db, char gdg)
        {
            return ViewStockBatch(db, gdg, null);
        }

        public static IQueryable<LG_vwStockBatch> ViewStockBatch(ScmsModel.ORMDataContext db, char gdg, string item)
        {
            #region View 1

            //string[] typeList = new[] { "01", "06", "03", "04", "05", "06" };

            var qryVWS1 = (from q in ViewStockLite(db, gdg, item)
                           where ((q.n_gsisa > 0) || (q.n_bsisa > 0)) //&& typeList.Contains(q.c_type)                      
                           group q by new
                           {
                               q.c_gdg,
                               q.c_iteno,
                               q.c_batch
                           } into grp
                           select new
                           {
                               c_gdg = grp.Key.c_gdg,
                               c_batch = grp.Key.c_batch,
                               c_iteno = grp.Key.c_iteno,
                               N_GSISA = grp.Sum(q => q.n_gsisa),
                               N_BSISA = grp.Sum(q => q.n_bsisa)
                           });

            #endregion

            #region View 2

            var qryVWS2 = (from q in ViewStockLite(db, gdg, item)
                           where ((q.n_gsisa > 0) || (q.n_bsisa > 0)) //&& typeList.Contains(q.c_type)
                           group q by new
                           {
                               q.c_gdg,
                               q.c_iteno
                           } into grp
                           select new
                           {
                               c_gdg = grp.Key.c_gdg,
                               c_iteno = grp.Key.c_iteno,
                               N_GSISATOTAL = grp.Sum(q => q.n_gsisa),
                               N_BSISATOTAL = grp.Sum(q => q.n_bsisa)
                           });

            #endregion

            return (from q in qryVWS1
                    join qVWS2 in qryVWS2 on new { q.c_iteno, q.c_gdg } equals new { qVWS2.c_iteno, qVWS2.c_gdg }
                    select new LG_vwStockBatch()
                    {
                        c_gdg = q.c_gdg,
                        c_iteno = q.c_iteno,
                        c_batch = q.c_batch,
                        N_BSISA = q.N_BSISA,
                        N_GSISA = q.N_GSISA,
                        N_BSISATOTAL = qVWS2.N_BSISATOTAL,
                        N_GSISATOTAL = qVWS2.N_GSISATOTAL
                    });
        }

        public static IQueryable<LG_vwStockBatch> ViewStockBatchSimple(ScmsModel.ORMDataContext db, char gdg)
        {
            //string[] typeList = new[] { "01", "03", "04", "05" };

            return (from q in ViewStockSimple(db, gdg)
                    where ((q.n_gsisa > 0) || (q.n_bsisa > 0)) //&& typeList.Contains(q.c_type)
                    group q by new
                    {
                        q.c_gdg,
                        q.c_iteno,
                        q.c_batch
                    } into grp
                    select new LG_vwStockBatch()
                    {
                        c_gdg = grp.Key.c_gdg,
                        c_batch = grp.Key.c_batch,
                        c_iteno = grp.Key.c_iteno,
                        N_GSISATOTAL = grp.Sum(q => q.n_gsisa),
                        N_BSISATOTAL = grp.Sum(q => q.n_bsisa)
                    }).Distinct().AsQueryable();
        }

        public static IQueryable<LG_vwSPPending> ViewStockSPPending(ScmsModel.ORMDataContext db)
        {
            #region SP & SPG

            var qrySp = (from q in db.LG_SPHs
                         join q1 in db.LG_SPD1s on q.c_spno equals q1.c_spno
                         where (q1.n_sisa > 0)
                         select new SpSpg()
                         {
                             c_cusno = q.c_cusno,
                             c_sp = q.c_sp.Trim(),
                             c_spno = q.c_spno,
                             c_iteno = q1.c_iteno,
                             c_type = q1.c_type,
                             d_spdate = q.d_spdate,
                             n_sisa = q1.n_sisa
                         }).AsQueryable();

            var qrySpg = (from q in db.LG_SPGHs
                          join q1 in db.LG_SPGD1s on q.c_spgno equals q1.c_spgno
                          where (q1.n_sisa > 0) && (q.l_status == true)
                          select new SpSpg()
                          {
                              c_cusno = q.c_gdg1.ToString(),
                              c_sp = q.c_spgno,
                              c_spno = q.c_spgno.Trim(),
                              c_iteno = q1.c_iteno,
                              d_spdate = q.d_spgdate,
                              c_type = "01",
                              n_sisa = q1.n_sisa
                          }).AsQueryable();

            var qrySpSpg = qrySp.Union(qrySpg).AsQueryable();

            #endregion

            #region Gudang & Cusmas

            //var qryCus = (from q in db.LG_Cusmas
            //              select new { q.c_cusno, q.v_cunam, q.c_gdg });

            //var qryGdg = (from q1 in db.LG_MsGudangs
            //              select new                    {
            //                c_cusno = Convert.ToString(q1.c_gdg),
            //                v_cunam = q1.v_nama,
            //                q1.c_gdg
            //              });

            var qryCusGdg = (from q in db.LG_Cusmas
                             select new { q.c_cusno, q.v_cunam, c_gdg = (q.c_gdg.HasValue ? q.c_gdg.Value : '1') })
                             .Union(
                             (from q1 in db.LG_MsGudangs
                              select new
                              {
                                  c_cusno = q1.c_gdg.ToString(),
                                  v_cunam = q1.v_nama,
                                  c_gdg = q1.c_gdg
                              }
                                )).AsQueryable();

            #endregion

            #region SP, SPG, Gudang & CusMas

            var qrySpSpgGdgCus = (from q in qrySpSpg
                                  join q1 in qryCusGdg on q.c_cusno equals q1.c_cusno
                                  select new
                                  {
                                      q.c_cusno,
                                      q.c_iteno,
                                      q.c_sp,
                                      q.c_spno,
                                      q.c_type,
                                      q.d_spdate,
                                      q.n_sisa,
                                      q1.c_gdg,
                                      q1.v_cunam
                                  });

            #endregion

            //int cnt = 0;

            //Logger.WriteLine(qrySpSpg.Provider.ToString());

            //cnt = qrySpSpg.Count();

            //Logger.WriteLine(qrySpSpgGdgCus.Provider.ToString());

            //cnt = qrySpSpgGdgCus.Count();

            return (from q in qrySpSpgGdgCus
                    join q2 in
                        (from sq1 in qrySpSpg
                         group sq1 by new
                         {
                             sq1.c_cusno,
                             sq1.c_iteno,
                             sq1.c_type
                         } into g
                         select new
                         {
                             n_sisaType = g.Sum(q1 => q1.n_sisa),
                             g.Key.c_cusno,
                             g.Key.c_iteno,
                             g.Key.c_type
                         }) on new { q.c_cusno, q.c_iteno, q.c_type } equals new { q2.c_cusno, q2.c_iteno, q2.c_type }
                    join q3 in
                        (from sq1 in qrySpSpg
                         group sq1 by sq1.c_iteno into g
                         select new
                         {
                             n_pending = g.Sum(q1 => q1.n_sisa),
                             c_iteno = g.Key
                         }) on q.c_iteno equals q3.c_iteno
                    join q4 in
                        (from sq1 in qrySpSpgGdgCus
                         group sq1 by new
                         {
                             sq1.c_gdg,
                             sq1.c_iteno
                         } into g
                         select new
                         {
                             n_sisaGudang = g.Sum(q1 => q1.n_sisa),
                             g.Key.c_gdg,
                             g.Key.c_iteno
                         }) on new { q.c_gdg, q.c_iteno } equals new { q4.c_gdg, q4.c_iteno }
                    join q5 in
                        (from sq1 in qrySpSpg
                         group sq1 by new
                         {
                             sq1.c_cusno,
                             sq1.c_iteno,
                             sq1.c_spno
                         } into g
                         select new
                         {
                             n_sisa = g.Sum(q1 => q1.n_sisa),
                             g.Key.c_cusno,
                             g.Key.c_iteno,
                             g.Key.c_spno
                         }) on new { q.c_cusno, q.c_iteno, q.c_spno } equals new { q5.c_cusno, q5.c_iteno, q5.c_spno }
                    select new LG_vwSPPending()
                    {
                        c_gdg = q.c_gdg,
                        c_cusno = q.c_cusno,
                        c_iteno = q.c_iteno,
                        c_sp = q.c_sp,
                        c_spno = q.c_spno,
                        c_type = q.c_type,
                        d_spdate = q.d_spdate,
                        n_sisa = q5.n_sisa,
                        n_sisaSP = q.n_sisa,
                        n_sisaType = q2.n_sisaType,
                        n_pending = q3.n_pending,
                        n_sisaGudang = q4.n_sisaGudang,
                        v_cunam = q.v_cunam
                    });
        }

        public static IQueryable<LG_vwSPPending_New> ViewStockSPPendingNew(ScmsModel.ORMDataContext db)
        {
            #region SP & SPG

            var qrySp = (from q in db.LG_SPHs
                         join q1 in db.LG_SPD1s on q.c_spno equals q1.c_spno
                         join q2 in db.LG_Cusmas on q.c_cusno equals q2.c_cusno into q_2
                         from qCus in q_2.DefaultIfEmpty()
                         where (q1.n_sisa > 0)
                          //&& (qCus.n_days.HasValue ? (SqlMethods.DateDiffDay(q.d_spdate, DateTime.Now.Date) <= qCus.n_days) :
                          //                                  (SqlMethods.DateDiffMonth(q.d_spdate, DateTime.Now.Date) < 2))
                          && (SqlMethods.DateDiffMonth(q.d_etasp, DateTime.Now.Date) < 2)
                          && ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
                         select new SpSpg()
                         {
                             c_gdg = qCus.c_gdg,
                             c_cusno = q.c_cusno,
                             c_iteno = q1.c_iteno,
                             c_spno = q.c_spno,
                             d_spdate = q.d_spdate,
                             v_cunam = qCus.v_cunam,
                             c_sp = q.c_sp.Trim(),
                             c_type = q1.c_type,
                             n_sisa = q1.n_sisa,
                             d_entry = q.d_entry,
                         }).AsQueryable();

            var qrySpg = (from q in db.LG_SPGHs
                          join q1 in db.LG_SPGD1s on q.c_spgno equals q1.c_spgno
                          join q3 in db.VW_MAXETDSGs on q.c_spgno equals q3.C_SPGNO
                          join q2 in db.LG_MsGudangs on q.c_gdg1 equals q2.c_gdg into q_2
                          from qGdg in q_2.DefaultIfEmpty()
                          where (q1.n_sisa > 0) && (q.l_status == true)
                            && (SqlMethods.DateDiffMonth(q3.ETA, DateTime.Now) < 2)
                            && ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
                          select new SpSpg()
                          {
                              c_gdg = q.c_gdg1,
                              c_cusno = q.c_gdg1.ToString(),
                              c_iteno = q1.c_iteno,
                              c_spno = q.c_spgno.Trim(),
                              d_spdate = q.d_spgdate,
                              v_cunam = qGdg.v_gdgdesc,
                              c_sp = q.c_spgno,
                              c_type = "SG",
                              n_sisa = q1.n_sisa,
                              d_entry = q.d_entry
                          }).AsQueryable();

            #endregion

            return qrySp
              .Union(qrySpg).Select(x => new
               LG_vwSPPending_New()
               {
                   c_gdg = (x.c_gdg.HasValue ? x.c_gdg.Value : 'X'),
                   c_cusno = x.c_cusno,
                   c_iteno = x.c_iteno,
                   c_spno = x.c_spno,
                   d_spdate = (x.d_spdate.HasValue ? x.d_spdate.Value : Functionals.StandardSqlDateTime),
                   v_cunam = x.v_cunam,
                   c_sp = x.c_sp,
                   c_type = x.c_type,
                   n_pending = (x.n_sisa.HasValue ? x.n_sisa.Value : 0),
                   d_entry = (x.d_entry.HasValue ? x.d_entry.Value : Functionals.StandardSqlDateTime)
               });
        }

        public static List<LG_vwSPPending_New> ViewStockSPPendingList(ScmsModel.ORMDataContext db)
        {
            #region SP & SPG

            var qrySp = (from q in db.LG_SPHs
                         join q1 in db.LG_SPD1s on q.c_spno equals q1.c_spno
                         join q2 in db.LG_Cusmas on q.c_cusno equals q2.c_cusno into q_2
                         from qCus in q_2.DefaultIfEmpty()
                         where (q1.n_sisa > 0)
                          && ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
                         select new SpSpg()
                         {
                             c_gdg = qCus.c_gdg,
                             c_cusno = q.c_cusno,
                             c_iteno = q1.c_iteno,
                             c_spno = q.c_spno,
                             d_spdate = q.d_spdate,
                             v_cunam = qCus.v_cunam,
                             c_sp = q.c_sp.Trim(),
                             c_type = q1.c_type,
                             n_sisa = q1.n_sisa,
                             d_entry = q.d_entry,
                         }).Distinct().ToList();

            var qrySpg = (from q in db.LG_SPGHs
                          join q1 in db.LG_SPGD1s on q.c_spgno equals q1.c_spgno
                          join q2 in db.LG_MsGudangs on q.c_gdg1 equals q2.c_gdg into q_2
                          from qGdg in q_2.DefaultIfEmpty()
                          where (q1.n_sisa > 0) && (q.l_status == true)
                            && ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
                          select new SpSpg()
                          {
                              c_gdg = q.c_gdg1,
                              c_cusno = q.c_gdg1.ToString(),
                              c_iteno = q1.c_iteno,
                              c_spno = q.c_spgno.Trim(),
                              d_spdate = q.d_spgdate,
                              v_cunam = qGdg.v_gdgdesc,
                              c_sp = q.c_spgno,
                              c_type = "SG",
                              n_sisa = q1.n_sisa,
                              d_entry = q.d_entry
                          }).Distinct().ToList();

            #endregion

            //var qrySP = qrySp
            //  .Union(qrySpg).Select(x => new
            //   LG_vwSPPending_New()
            //  {
            //    c_gdg = (x.c_gdg.HasValue ? x.c_gdg.Value : 'X'),
            //    c_cusno = x.c_cusno,
            //    c_iteno = x.c_iteno,
            //    c_spno = x.c_spno,
            //    d_spdate = x.d_spdate,
            //    v_cunam = x.v_cunam,
            //    c_sp = x.c_sp,
            //    c_type = x.c_type,
            //    n_pending = x.n_sisa,
            //    d_entry = x.d_entry
            //  });

            var qrySPPending = qrySp
              .Union(qrySpg).Select(x => new
               LG_vwSPPending_New()
              {
                  c_gdg = (x.c_gdg.HasValue ? x.c_gdg.Value : 'X'),
                  c_cusno = x.c_cusno,
                  c_iteno = x.c_iteno,
                  c_spno = x.c_spno,
                  d_spdate = (x.d_spdate.HasValue ? x.d_spdate.Value : Functionals.StandardSqlDateTime),
                  v_cunam = x.v_cunam,
                  c_sp = x.c_sp,
                  c_type = x.c_type,
                  n_pending = (x.n_sisa.HasValue ? x.n_sisa.Value : 0),
                  d_entry = (x.d_entry.HasValue ? x.d_entry.Value : Functionals.StandardSqlDateTime)
              }).ToList();

            qrySp.Clear();
            qrySpg.Clear();

            return qrySPPending;
        }

        public static IQueryable<LG_vwAvgSales> ViewAverageSalesRealtime(ScmsModel.ORMDataContext db)
        {
            var q = (from q1 in db.LG_AvgSales
                     select new LG_vwAvgSales()
                     {
                         c_iteno = q1.c_iteno,
                         n_Bulan = 1,
                         n_retur = q1.n_rtr01,
                         n_sales = q1.n_sls01,
                         n_Tahun = q1.s_tahun,
                         c_cusno = q1.c_cusno
                     }).Union(from q1 in db.LG_AvgSales
                              select new LG_vwAvgSales()
                              {
                                  c_iteno = q1.c_iteno,
                                  n_Bulan = 2,
                                  n_retur = q1.n_rtr02,
                                  n_sales = q1.n_sls02,
                                  n_Tahun = q1.s_tahun,
                                  c_cusno = q1.c_cusno
                              }).Union(from q1 in db.LG_AvgSales
                                       select new LG_vwAvgSales()
                                       {
                                           c_iteno = q1.c_iteno,
                                           n_Bulan = 3,
                                           n_retur = q1.n_rtr03,
                                           n_sales = q1.n_sls03,
                                           n_Tahun = q1.s_tahun,
                                           c_cusno = q1.c_cusno
                                       }).Union(from q1 in db.LG_AvgSales
                                                select new LG_vwAvgSales()
                                                {
                                                    c_iteno = q1.c_iteno,
                                                    n_Bulan = 4,
                                                    n_retur = q1.n_rtr04,
                                                    n_sales = q1.n_sls04,
                                                    n_Tahun = q1.s_tahun,
                                                    c_cusno = q1.c_cusno
                                                }).Union(from q1 in db.LG_AvgSales
                                                         select new LG_vwAvgSales()
                                                         {
                                                             c_iteno = q1.c_iteno,
                                                             n_Bulan = 5,
                                                             n_retur = q1.n_rtr05,
                                                             n_sales = q1.n_sls05,
                                                             n_Tahun = q1.s_tahun,
                                                             c_cusno = q1.c_cusno
                                                         }).Union(from q1 in db.LG_AvgSales
                                                                  select new LG_vwAvgSales()
                                                                  {
                                                                      c_iteno = q1.c_iteno,
                                                                      n_Bulan = 6,
                                                                      n_retur = q1.n_rtr06,
                                                                      n_sales = q1.n_sls06,
                                                                      n_Tahun = q1.s_tahun,
                                                                      c_cusno = q1.c_cusno
                                                                  }).Union(from q1 in db.LG_AvgSales
                                                                           select new LG_vwAvgSales()
                                                                           {
                                                                               c_iteno = q1.c_iteno,
                                                                               n_Bulan = 7,
                                                                               n_retur = q1.n_rtr07,
                                                                               n_sales = q1.n_sls07,
                                                                               n_Tahun = q1.s_tahun,
                                                                               c_cusno = q1.c_cusno
                                                                           }).Union(from q1 in db.LG_AvgSales
                                                                                    select new LG_vwAvgSales()
                                                                                    {
                                                                                        c_iteno = q1.c_iteno,
                                                                                        n_Bulan = 8,
                                                                                        n_retur = q1.n_rtr08,
                                                                                        n_sales = q1.n_sls08,
                                                                                        n_Tahun = q1.s_tahun,
                                                                                        c_cusno = q1.c_cusno
                                                                                    }).Union(from q1 in db.LG_AvgSales
                                                                                             select new LG_vwAvgSales()
                                                                                             {
                                                                                                 c_iteno = q1.c_iteno,
                                                                                                 n_Bulan = 9,
                                                                                                 n_retur = q1.n_rtr09,
                                                                                                 n_sales = q1.n_sls09,
                                                                                                 n_Tahun = q1.s_tahun,
                                                                                                 c_cusno = q1.c_cusno
                                                                                             }).Union(from q1 in db.LG_AvgSales
                                                                                                      select new LG_vwAvgSales()
                                                                                                      {
                                                                                                          c_iteno = q1.c_iteno,
                                                                                                          n_Bulan = 10,
                                                                                                          n_retur = q1.n_rtr10,
                                                                                                          n_sales = q1.n_sls10,
                                                                                                          n_Tahun = q1.s_tahun,
                                                                                                          c_cusno = q1.c_cusno
                                                                                                      }).Union(from q1 in db.LG_AvgSales
                                                                                                               select new LG_vwAvgSales()
                                                                                                               {
                                                                                                                   c_iteno = q1.c_iteno,
                                                                                                                   n_Bulan = 11,
                                                                                                                   n_retur = q1.n_rtr11,
                                                                                                                   n_sales = q1.n_sls11,
                                                                                                                   n_Tahun = q1.s_tahun,
                                                                                                                   c_cusno = q1.c_cusno
                                                                                                               }).Union(from q1 in db.LG_AvgSales
                                                                                                                        select new LG_vwAvgSales()
                                                                                                                        {
                                                                                                                            c_iteno = q1.c_iteno,
                                                                                                                            n_Bulan = 12,
                                                                                                                            n_retur = q1.n_rtr12,
                                                                                                                            n_sales = q1.n_sls12,
                                                                                                                            n_Tahun = q1.s_tahun,
                                                                                                                            c_cusno = q1.c_cusno
                                                                                                                        });

            return q;
        }

        public static IQueryable<AverageSales> ViewAverageSales(ScmsModel.ORMDataContext db, DateTime activeDT)
        {
            return ViewAverageSales(db, string.Empty, activeDT);
        }

        public static IQueryable<AverageSales> ViewAverageSales(ScmsModel.ORMDataContext db, string custNo, DateTime activeDT)
        {
            IQueryable<AverageSales> qry = (from q in db.LG_AvgSales
                                            where (q.c_cusno == (string.IsNullOrEmpty(custNo) ? q.c_cusno : custNo)) && (q.s_tahun == activeDT.Year)
                                            select new AverageSales()
                                            {
                                                Customer = q.c_cusno,
                                                Item = q.c_iteno,
                                                Year = q.s_tahun,
                                                Retur = (
                                                  (activeDT.Month == 1 ? (q.n_rtr01.HasValue ? q.n_rtr01.Value : 0) :
                                                  (activeDT.Month == 2 ? (q.n_rtr02.HasValue ? q.n_rtr02.Value : 0) :
                                                  (activeDT.Month == 3 ? (q.n_rtr03.HasValue ? q.n_rtr03.Value : 0) :
                                                  (activeDT.Month == 4 ? (q.n_rtr04.HasValue ? q.n_rtr04.Value : 0) :
                                                  (activeDT.Month == 5 ? (q.n_rtr05.HasValue ? q.n_rtr05.Value : 0) :
                                                  (activeDT.Month == 6 ? (q.n_rtr06.HasValue ? q.n_rtr06.Value : 0) :
                                                  (activeDT.Month == 7 ? (q.n_rtr07.HasValue ? q.n_rtr07.Value : 0) :
                                                  (activeDT.Month == 8 ? (q.n_rtr08.HasValue ? q.n_rtr08.Value : 0) :
                                                  (activeDT.Month == 9 ? (q.n_rtr09.HasValue ? q.n_rtr09.Value : 0) :
                                                  (activeDT.Month == 10 ? (q.n_rtr10.HasValue ? q.n_rtr10.Value : 0) :
                                                  (activeDT.Month == 11 ? (q.n_rtr11.HasValue ? q.n_rtr11.Value : 0) :
                                                  (activeDT.Month == 12 ? (q.n_rtr12.HasValue ? q.n_rtr12.Value : 0) :
                                                  0))))))))))))
                                                 ),
                                                Sales = (
                                                 (activeDT.Month == 1 ? (q.n_sls01.HasValue ? q.n_sls01.Value : 0) :
                                                 (activeDT.Month == 2 ? (q.n_sls02.HasValue ? q.n_sls02.Value : 0) :
                                                 (activeDT.Month == 3 ? (q.n_sls03.HasValue ? q.n_sls03.Value : 0) :
                                                 (activeDT.Month == 4 ? (q.n_sls04.HasValue ? q.n_sls04.Value : 0) :
                                                 (activeDT.Month == 5 ? (q.n_sls05.HasValue ? q.n_sls05.Value : 0) :
                                                 (activeDT.Month == 6 ? (q.n_sls06.HasValue ? q.n_sls06.Value : 0) :
                                                 (activeDT.Month == 7 ? (q.n_sls07.HasValue ? q.n_sls07.Value : 0) :
                                                 (activeDT.Month == 8 ? (q.n_sls08.HasValue ? q.n_sls08.Value : 0) :
                                                 (activeDT.Month == 9 ? (q.n_sls09.HasValue ? q.n_sls09.Value : 0) :
                                                 (activeDT.Month == 10 ? (q.n_sls10.HasValue ? q.n_sls10.Value : 0) :
                                                 (activeDT.Month == 11 ? (q.n_sls11.HasValue ? q.n_sls11.Value : 0) :
                                                 (activeDT.Month == 12 ? (q.n_sls12.HasValue ? q.n_sls12.Value : 0) :
                                                 0))))))))))))
                                               )
                                            });

            return qry;
        }

        public static IQueryable<LG_vwPOPending_New> ViewStockPOPendingNew(ScmsModel.ORMDataContext db)
        {
            #region PO & SPG
            //  OLD
            //var qryPO = (from q in db.LG_POHs
            //             join q1 in db.LG_POD1s on new { q.c_gdg, q.c_pono } equals new { q1.c_gdg, q1.c_pono }
            //             where (q1.n_sisa > 0)
            //               && (SqlMethods.DateDiffMonth(q.d_podate, DateTime.Now) <
            //                 (q.l_import == true ? int.MaxValue : 2))
            //               && ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
            //             select new PoSpg()
            //             {
            //               c_gdg = q.c_gdg,
            //               c_pono = q.c_pono,
            //               c_nosup = q.c_nosup,
            //               d_podate = q.d_podate,
            //               l_import = (q.l_import.HasValue ? q.l_import.Value : false),
            //               c_iteno = q1.c_iteno,
            //               n_sisa = (q1.n_sisa.HasValue ? q1.n_sisa.Value : 0)
            //             }).AsQueryable();

            var qryPO = (from q in db.LG_vwPOPending_news
                         //join q1 in db.LG_POD1s on new { q.c_gdg, q.c_pono } equals new { q1.c_gdg, q1.c_pono }
                         where (q.n_sisa > 0)
                         //&& (SqlMethods.DateDiffMonth(q.d_podate, DateTime.Now) <
                         //  (q.l_import == true ? int.MaxValue : 2))
                         //&& ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
                         select new PoSpg()
                         {
                             c_gdg = q.c_gdg,
                             c_pono = q.c_pono,
                             c_nosup = q.c_nosup,
                             d_podate = q.d_podate,
                             l_import = (q.l_import.HasValue ? q.l_import.Value : false),
                             c_iteno = q.c_iteno,
                             n_sisa = (q.n_sisa.HasValue ? q.n_sisa.Value : 0)
                         }).AsQueryable();

            var qrySpg = (from q in db.LG_SPGHs
                          join q1 in db.LG_SPGD1s on new { c_gdg = q.c_gdg1, q.c_spgno } equals new { q1.c_gdg, q1.c_spgno }
                          join q2 in db.LG_DatSups on q.c_nosup equals q2.c_nosup
                          where (q1.n_sisa > 0)
                            && (SqlMethods.DateDiffMonth(q.d_spgdate, DateTime.Now) < 2)
                            && ((q.l_delete.HasValue ? q.l_delete.Value : false) == false)
                          select new PoSpg()
                          {
                              c_gdg = q.c_gdg1,
                              c_pono = q.c_spgno,
                              c_nosup = q.c_nosup,
                              d_podate = q.d_spgdate,
                              l_import = (q2.l_import.HasValue ? q2.l_import.Value : false),
                              c_iteno = q1.c_iteno,
                              n_sisa = (q1.n_sisa.HasValue ? q1.n_sisa.Value : 0)
                          }).AsQueryable();

            #endregion

            return qryPO
              .Union(qrySpg).Select(x => new
               LG_vwPOPending_New()
              {
                  c_gdg = x.c_gdg,
                  c_nosup = x.c_nosup,
                  c_pono = x.c_pono,
                  d_podate = x.d_podate,
                  l_import = x.l_import,
                  c_iteno = x.c_iteno,
                  n_sisa = x.n_sisa
              });
        }

        #endregion
    }
}